/*
Ceph REST API

Testing MgrModuleAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package ceph

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/boyvinall/go-ceph/api"
)

func Test_ceph_MgrModuleAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test MgrModuleAPIService ApiMgrModuleGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MgrModuleAPI.ApiMgrModuleGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MgrModuleAPIService ApiMgrModuleModuleNameDisablePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var moduleName string

		httpRes, err := apiClient.MgrModuleAPI.ApiMgrModuleModuleNameDisablePost(context.Background(), moduleName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MgrModuleAPIService ApiMgrModuleModuleNameEnablePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var moduleName string

		httpRes, err := apiClient.MgrModuleAPI.ApiMgrModuleModuleNameEnablePost(context.Background(), moduleName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MgrModuleAPIService ApiMgrModuleModuleNameGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var moduleName string

		httpRes, err := apiClient.MgrModuleAPI.ApiMgrModuleModuleNameGet(context.Background(), moduleName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MgrModuleAPIService ApiMgrModuleModuleNameOptionsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var moduleName string

		httpRes, err := apiClient.MgrModuleAPI.ApiMgrModuleModuleNameOptionsGet(context.Background(), moduleName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MgrModuleAPIService ApiMgrModuleModuleNamePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var moduleName string

		httpRes, err := apiClient.MgrModuleAPI.ApiMgrModuleModuleNamePut(context.Background(), moduleName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
