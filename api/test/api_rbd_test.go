/*
Ceph REST API

Testing RbdAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package ceph

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/boyvinall/go-ceph/api"
)

func Test_ceph_RbdAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RbdAPIService ApiBlockImageCloneFormatVersionGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RbdAPI.ApiBlockImageCloneFormatVersionGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbdAPIService ApiBlockImageDefaultFeaturesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RbdAPI.ApiBlockImageDefaultFeaturesGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbdAPIService ApiBlockImageGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RbdAPI.ApiBlockImageGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbdAPIService ApiBlockImageImageSpecCopyPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var imageSpec string

		httpRes, err := apiClient.RbdAPI.ApiBlockImageImageSpecCopyPost(context.Background(), imageSpec).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbdAPIService ApiBlockImageImageSpecDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var imageSpec string

		httpRes, err := apiClient.RbdAPI.ApiBlockImageImageSpecDelete(context.Background(), imageSpec).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbdAPIService ApiBlockImageImageSpecFlattenPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var imageSpec string

		httpRes, err := apiClient.RbdAPI.ApiBlockImageImageSpecFlattenPost(context.Background(), imageSpec).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbdAPIService ApiBlockImageImageSpecGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var imageSpec string

		resp, httpRes, err := apiClient.RbdAPI.ApiBlockImageImageSpecGet(context.Background(), imageSpec).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbdAPIService ApiBlockImageImageSpecMoveTrashPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var imageSpec string

		httpRes, err := apiClient.RbdAPI.ApiBlockImageImageSpecMoveTrashPost(context.Background(), imageSpec).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbdAPIService ApiBlockImageImageSpecPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var imageSpec string

		httpRes, err := apiClient.RbdAPI.ApiBlockImageImageSpecPut(context.Background(), imageSpec).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbdAPIService ApiBlockImagePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RbdAPI.ApiBlockImagePost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
