/*
Ceph REST API

Testing RgwZoneAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package ceph

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/boyvinall/go-ceph"
)

func Test_ceph_RgwZoneAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RgwZoneAPIService ApiRgwZoneCreateSystemUserPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RgwZoneAPI.ApiRgwZoneCreateSystemUserPut(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RgwZoneAPIService ApiRgwZoneGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RgwZoneAPI.ApiRgwZoneGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RgwZoneAPIService ApiRgwZoneGetAllZonesInfoGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RgwZoneAPI.ApiRgwZoneGetAllZonesInfoGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RgwZoneAPIService ApiRgwZoneGetPoolNamesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RgwZoneAPI.ApiRgwZoneGetPoolNamesGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RgwZoneAPIService ApiRgwZoneGetUserListGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RgwZoneAPI.ApiRgwZoneGetUserListGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RgwZoneAPIService ApiRgwZonePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RgwZoneAPI.ApiRgwZonePost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RgwZoneAPIService ApiRgwZoneZoneNameDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var zoneName string

		httpRes, err := apiClient.RgwZoneAPI.ApiRgwZoneZoneNameDelete(context.Background(), zoneName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RgwZoneAPIService ApiRgwZoneZoneNameGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var zoneName string

		httpRes, err := apiClient.RgwZoneAPI.ApiRgwZoneZoneNameGet(context.Background(), zoneName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RgwZoneAPIService ApiRgwZoneZoneNamePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var zoneName string

		httpRes, err := apiClient.RgwZoneAPI.ApiRgwZoneZoneNamePut(context.Background(), zoneName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
