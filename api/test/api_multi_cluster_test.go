/*
Ceph REST API

Testing MultiClusterAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package ceph

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/boyvinall/go-ceph/api"
)

func Test_ceph_MultiClusterAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test MultiClusterAPIService ApiMultiClusterAuthPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.MultiClusterAPI.ApiMultiClusterAuthPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MultiClusterAPIService ApiMultiClusterCheckTokenStatusGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.MultiClusterAPI.ApiMultiClusterCheckTokenStatusGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MultiClusterAPIService ApiMultiClusterDeleteClusterClusterNameClusterUserDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterName string
		var clusterUser string

		httpRes, err := apiClient.MultiClusterAPI.ApiMultiClusterDeleteClusterClusterNameClusterUserDelete(context.Background(), clusterName, clusterUser).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MultiClusterAPIService ApiMultiClusterEditClusterPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.MultiClusterAPI.ApiMultiClusterEditClusterPut(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MultiClusterAPIService ApiMultiClusterGetConfigGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.MultiClusterAPI.ApiMultiClusterGetConfigGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MultiClusterAPIService ApiMultiClusterGetPrometheusApiUrlGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.MultiClusterAPI.ApiMultiClusterGetPrometheusApiUrlGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MultiClusterAPIService ApiMultiClusterReconnectClusterPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.MultiClusterAPI.ApiMultiClusterReconnectClusterPut(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MultiClusterAPIService ApiMultiClusterSecurityConfigGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.MultiClusterAPI.ApiMultiClusterSecurityConfigGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MultiClusterAPIService ApiMultiClusterSetConfigPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.MultiClusterAPI.ApiMultiClusterSetConfigPut(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
