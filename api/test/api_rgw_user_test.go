/*
Ceph REST API

Testing RgwUserAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package ceph

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/boyvinall/go-ceph/api"
)

func Test_ceph_RgwUserAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RgwUserAPIService ApiRgwUserGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RgwUserAPI.ApiRgwUserGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RgwUserAPIService ApiRgwUserGetEmailsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RgwUserAPI.ApiRgwUserGetEmailsGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RgwUserAPIService ApiRgwUserPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RgwUserAPI.ApiRgwUserPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RgwUserAPIService ApiRgwUserUidCapabilityDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uid string

		httpRes, err := apiClient.RgwUserAPI.ApiRgwUserUidCapabilityDelete(context.Background(), uid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RgwUserAPIService ApiRgwUserUidCapabilityPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uid string

		httpRes, err := apiClient.RgwUserAPI.ApiRgwUserUidCapabilityPost(context.Background(), uid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RgwUserAPIService ApiRgwUserUidDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uid string

		httpRes, err := apiClient.RgwUserAPI.ApiRgwUserUidDelete(context.Background(), uid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RgwUserAPIService ApiRgwUserUidGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uid string

		httpRes, err := apiClient.RgwUserAPI.ApiRgwUserUidGet(context.Background(), uid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RgwUserAPIService ApiRgwUserUidKeyDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uid string

		httpRes, err := apiClient.RgwUserAPI.ApiRgwUserUidKeyDelete(context.Background(), uid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RgwUserAPIService ApiRgwUserUidKeyPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uid string

		httpRes, err := apiClient.RgwUserAPI.ApiRgwUserUidKeyPost(context.Background(), uid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RgwUserAPIService ApiRgwUserUidPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uid string

		httpRes, err := apiClient.RgwUserAPI.ApiRgwUserUidPut(context.Background(), uid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RgwUserAPIService ApiRgwUserUidQuotaGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uid string

		httpRes, err := apiClient.RgwUserAPI.ApiRgwUserUidQuotaGet(context.Background(), uid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RgwUserAPIService ApiRgwUserUidQuotaPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uid string

		httpRes, err := apiClient.RgwUserAPI.ApiRgwUserUidQuotaPut(context.Background(), uid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RgwUserAPIService ApiRgwUserUidSubuserPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uid string

		httpRes, err := apiClient.RgwUserAPI.ApiRgwUserUidSubuserPost(context.Background(), uid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RgwUserAPIService ApiRgwUserUidSubuserSubuserDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uid string
		var subuser string

		httpRes, err := apiClient.RgwUserAPI.ApiRgwUserUidSubuserSubuserDelete(context.Background(), uid, subuser).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
