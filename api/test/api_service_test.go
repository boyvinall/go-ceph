/*
Ceph REST API

Testing ServiceAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package ceph

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/boyvinall/go-ceph"
)

func Test_ceph_ServiceAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ServiceAPIService ApiServiceGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ServiceAPI.ApiServiceGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServiceAPIService ApiServiceKnownTypesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ServiceAPI.ApiServiceKnownTypesGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServiceAPIService ApiServicePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ServiceAPI.ApiServicePost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServiceAPIService ApiServiceServiceNameDaemonsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceName string

		httpRes, err := apiClient.ServiceAPI.ApiServiceServiceNameDaemonsGet(context.Background(), serviceName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServiceAPIService ApiServiceServiceNameDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceName string

		httpRes, err := apiClient.ServiceAPI.ApiServiceServiceNameDelete(context.Background(), serviceName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServiceAPIService ApiServiceServiceNameGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceName string

		httpRes, err := apiClient.ServiceAPI.ApiServiceServiceNameGet(context.Background(), serviceName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServiceAPIService ApiServiceServiceNamePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceName string

		httpRes, err := apiClient.ServiceAPI.ApiServiceServiceNamePut(context.Background(), serviceName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
