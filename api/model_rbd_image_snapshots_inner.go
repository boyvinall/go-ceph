/*
Ceph REST API

This is the official Ceph REST API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ceph

import (
	"encoding/json"
)

// checks if the RbdImageSnapshotsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RbdImageSnapshotsInner{}

// RbdImageSnapshotsInner struct for RbdImageSnapshotsInner
type RbdImageSnapshotsInner struct {
	// 
	Id *int32 `json:"id,omitempty"`
	// 
	Size *float32 `json:"size,omitempty"`
	// 
	Name *string `json:"name,omitempty"`
	// 
	Namespace *int32 `json:"namespace,omitempty"`
	// 
	Timestamp *string `json:"timestamp,omitempty"`
	// 
	IsProtected *bool `json:"is_protected,omitempty"`
	// 
	UsedBytes NullableInt32 `json:"used_bytes,omitempty"`
	// 
	Children []int32 `json:"children,omitempty"`
	// 
	DiskUsage *float32 `json:"disk_usage,omitempty"`
}

// NewRbdImageSnapshotsInner instantiates a new RbdImageSnapshotsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRbdImageSnapshotsInner() *RbdImageSnapshotsInner {
	this := RbdImageSnapshotsInner{}
	return &this
}

// NewRbdImageSnapshotsInnerWithDefaults instantiates a new RbdImageSnapshotsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRbdImageSnapshotsInnerWithDefaults() *RbdImageSnapshotsInner {
	this := RbdImageSnapshotsInner{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RbdImageSnapshotsInner) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RbdImageSnapshotsInner) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RbdImageSnapshotsInner) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *RbdImageSnapshotsInner) SetId(v int32) {
	o.Id = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *RbdImageSnapshotsInner) GetSize() float32 {
	if o == nil || IsNil(o.Size) {
		var ret float32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RbdImageSnapshotsInner) GetSizeOk() (*float32, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *RbdImageSnapshotsInner) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given float32 and assigns it to the Size field.
func (o *RbdImageSnapshotsInner) SetSize(v float32) {
	o.Size = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RbdImageSnapshotsInner) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RbdImageSnapshotsInner) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RbdImageSnapshotsInner) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RbdImageSnapshotsInner) SetName(v string) {
	o.Name = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *RbdImageSnapshotsInner) GetNamespace() int32 {
	if o == nil || IsNil(o.Namespace) {
		var ret int32
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RbdImageSnapshotsInner) GetNamespaceOk() (*int32, bool) {
	if o == nil || IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *RbdImageSnapshotsInner) HasNamespace() bool {
	if o != nil && !IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given int32 and assigns it to the Namespace field.
func (o *RbdImageSnapshotsInner) SetNamespace(v int32) {
	o.Namespace = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *RbdImageSnapshotsInner) GetTimestamp() string {
	if o == nil || IsNil(o.Timestamp) {
		var ret string
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RbdImageSnapshotsInner) GetTimestampOk() (*string, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *RbdImageSnapshotsInner) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given string and assigns it to the Timestamp field.
func (o *RbdImageSnapshotsInner) SetTimestamp(v string) {
	o.Timestamp = &v
}

// GetIsProtected returns the IsProtected field value if set, zero value otherwise.
func (o *RbdImageSnapshotsInner) GetIsProtected() bool {
	if o == nil || IsNil(o.IsProtected) {
		var ret bool
		return ret
	}
	return *o.IsProtected
}

// GetIsProtectedOk returns a tuple with the IsProtected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RbdImageSnapshotsInner) GetIsProtectedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsProtected) {
		return nil, false
	}
	return o.IsProtected, true
}

// HasIsProtected returns a boolean if a field has been set.
func (o *RbdImageSnapshotsInner) HasIsProtected() bool {
	if o != nil && !IsNil(o.IsProtected) {
		return true
	}

	return false
}

// SetIsProtected gets a reference to the given bool and assigns it to the IsProtected field.
func (o *RbdImageSnapshotsInner) SetIsProtected(v bool) {
	o.IsProtected = &v
}

// GetUsedBytes returns the UsedBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RbdImageSnapshotsInner) GetUsedBytes() int32 {
	if o == nil || IsNil(o.UsedBytes.Get()) {
		var ret int32
		return ret
	}
	return *o.UsedBytes.Get()
}

// GetUsedBytesOk returns a tuple with the UsedBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RbdImageSnapshotsInner) GetUsedBytesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.UsedBytes.Get(), o.UsedBytes.IsSet()
}

// HasUsedBytes returns a boolean if a field has been set.
func (o *RbdImageSnapshotsInner) HasUsedBytes() bool {
	if o != nil && o.UsedBytes.IsSet() {
		return true
	}

	return false
}

// SetUsedBytes gets a reference to the given NullableInt32 and assigns it to the UsedBytes field.
func (o *RbdImageSnapshotsInner) SetUsedBytes(v int32) {
	o.UsedBytes.Set(&v)
}
// SetUsedBytesNil sets the value for UsedBytes to be an explicit nil
func (o *RbdImageSnapshotsInner) SetUsedBytesNil() {
	o.UsedBytes.Set(nil)
}

// UnsetUsedBytes ensures that no value is present for UsedBytes, not even an explicit nil
func (o *RbdImageSnapshotsInner) UnsetUsedBytes() {
	o.UsedBytes.Unset()
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *RbdImageSnapshotsInner) GetChildren() []int32 {
	if o == nil || IsNil(o.Children) {
		var ret []int32
		return ret
	}
	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RbdImageSnapshotsInner) GetChildrenOk() ([]int32, bool) {
	if o == nil || IsNil(o.Children) {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *RbdImageSnapshotsInner) HasChildren() bool {
	if o != nil && !IsNil(o.Children) {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []int32 and assigns it to the Children field.
func (o *RbdImageSnapshotsInner) SetChildren(v []int32) {
	o.Children = v
}

// GetDiskUsage returns the DiskUsage field value if set, zero value otherwise.
func (o *RbdImageSnapshotsInner) GetDiskUsage() float32 {
	if o == nil || IsNil(o.DiskUsage) {
		var ret float32
		return ret
	}
	return *o.DiskUsage
}

// GetDiskUsageOk returns a tuple with the DiskUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RbdImageSnapshotsInner) GetDiskUsageOk() (*float32, bool) {
	if o == nil || IsNil(o.DiskUsage) {
		return nil, false
	}
	return o.DiskUsage, true
}

// HasDiskUsage returns a boolean if a field has been set.
func (o *RbdImageSnapshotsInner) HasDiskUsage() bool {
	if o != nil && !IsNil(o.DiskUsage) {
		return true
	}

	return false
}

// SetDiskUsage gets a reference to the given float32 and assigns it to the DiskUsage field.
func (o *RbdImageSnapshotsInner) SetDiskUsage(v float32) {
	o.DiskUsage = &v
}

func (o RbdImageSnapshotsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RbdImageSnapshotsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.IsProtected) {
		toSerialize["is_protected"] = o.IsProtected
	}
	if o.UsedBytes.IsSet() {
		toSerialize["used_bytes"] = o.UsedBytes.Get()
	}
	if !IsNil(o.Children) {
		toSerialize["children"] = o.Children
	}
	if !IsNil(o.DiskUsage) {
		toSerialize["disk_usage"] = o.DiskUsage
	}
	return toSerialize, nil
}

type NullableRbdImageSnapshotsInner struct {
	value *RbdImageSnapshotsInner
	isSet bool
}

func (v NullableRbdImageSnapshotsInner) Get() *RbdImageSnapshotsInner {
	return v.value
}

func (v *NullableRbdImageSnapshotsInner) Set(val *RbdImageSnapshotsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableRbdImageSnapshotsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableRbdImageSnapshotsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRbdImageSnapshotsInner(val *RbdImageSnapshotsInner) *NullableRbdImageSnapshotsInner {
	return &NullableRbdImageSnapshotsInner{value: val, isSet: true}
}

func (v NullableRbdImageSnapshotsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRbdImageSnapshotsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


