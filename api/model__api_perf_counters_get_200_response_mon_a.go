/*
Ceph REST API

This is the official Ceph REST API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ceph

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApiPerfCountersGet200ResponseMonA type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiPerfCountersGet200ResponseMonA{}

// ApiPerfCountersGet200ResponseMonA Service ID
type ApiPerfCountersGet200ResponseMonA struct {
	CacheBytes ApiPerfCountersGet200ResponseMonACacheBytes `json:".cache_bytes"`
}

type _ApiPerfCountersGet200ResponseMonA ApiPerfCountersGet200ResponseMonA

// NewApiPerfCountersGet200ResponseMonA instantiates a new ApiPerfCountersGet200ResponseMonA object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiPerfCountersGet200ResponseMonA(cacheBytes ApiPerfCountersGet200ResponseMonACacheBytes) *ApiPerfCountersGet200ResponseMonA {
	this := ApiPerfCountersGet200ResponseMonA{}
	this.CacheBytes = cacheBytes
	return &this
}

// NewApiPerfCountersGet200ResponseMonAWithDefaults instantiates a new ApiPerfCountersGet200ResponseMonA object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiPerfCountersGet200ResponseMonAWithDefaults() *ApiPerfCountersGet200ResponseMonA {
	this := ApiPerfCountersGet200ResponseMonA{}
	return &this
}

// GetCacheBytes returns the CacheBytes field value
func (o *ApiPerfCountersGet200ResponseMonA) GetCacheBytes() ApiPerfCountersGet200ResponseMonACacheBytes {
	if o == nil {
		var ret ApiPerfCountersGet200ResponseMonACacheBytes
		return ret
	}

	return o.CacheBytes
}

// GetCacheBytesOk returns a tuple with the CacheBytes field value
// and a boolean to check if the value has been set.
func (o *ApiPerfCountersGet200ResponseMonA) GetCacheBytesOk() (*ApiPerfCountersGet200ResponseMonACacheBytes, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CacheBytes, true
}

// SetCacheBytes sets field value
func (o *ApiPerfCountersGet200ResponseMonA) SetCacheBytes(v ApiPerfCountersGet200ResponseMonACacheBytes) {
	o.CacheBytes = v
}

func (o ApiPerfCountersGet200ResponseMonA) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiPerfCountersGet200ResponseMonA) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize[".cache_bytes"] = o.CacheBytes
	return toSerialize, nil
}

func (o *ApiPerfCountersGet200ResponseMonA) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		".cache_bytes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiPerfCountersGet200ResponseMonA := _ApiPerfCountersGet200ResponseMonA{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiPerfCountersGet200ResponseMonA)

	if err != nil {
		return err
	}

	*o = ApiPerfCountersGet200ResponseMonA(varApiPerfCountersGet200ResponseMonA)

	return err
}

type NullableApiPerfCountersGet200ResponseMonA struct {
	value *ApiPerfCountersGet200ResponseMonA
	isSet bool
}

func (v NullableApiPerfCountersGet200ResponseMonA) Get() *ApiPerfCountersGet200ResponseMonA {
	return v.value
}

func (v *NullableApiPerfCountersGet200ResponseMonA) Set(val *ApiPerfCountersGet200ResponseMonA) {
	v.value = val
	v.isSet = true
}

func (v NullableApiPerfCountersGet200ResponseMonA) IsSet() bool {
	return v.isSet
}

func (v *NullableApiPerfCountersGet200ResponseMonA) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiPerfCountersGet200ResponseMonA(val *ApiPerfCountersGet200ResponseMonA) *NullableApiPerfCountersGet200ResponseMonA {
	return &NullableApiPerfCountersGet200ResponseMonA{value: val, isSet: true}
}

func (v NullableApiPerfCountersGet200ResponseMonA) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiPerfCountersGet200ResponseMonA) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


