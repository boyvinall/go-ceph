/*
Ceph REST API

This is the official Ceph REST API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ceph

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApiCephfsFsIdStatfsGet200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiCephfsFsIdStatfsGet200Response{}

// ApiCephfsFsIdStatfsGet200Response struct for ApiCephfsFsIdStatfsGet200Response
type ApiCephfsFsIdStatfsGet200Response struct {
	// 
	Bytes int32 `json:"bytes"`
	// 
	Files int32 `json:"files"`
	// 
	Subdirs int32 `json:"subdirs"`
}

type _ApiCephfsFsIdStatfsGet200Response ApiCephfsFsIdStatfsGet200Response

// NewApiCephfsFsIdStatfsGet200Response instantiates a new ApiCephfsFsIdStatfsGet200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiCephfsFsIdStatfsGet200Response(bytes int32, files int32, subdirs int32) *ApiCephfsFsIdStatfsGet200Response {
	this := ApiCephfsFsIdStatfsGet200Response{}
	this.Bytes = bytes
	this.Files = files
	this.Subdirs = subdirs
	return &this
}

// NewApiCephfsFsIdStatfsGet200ResponseWithDefaults instantiates a new ApiCephfsFsIdStatfsGet200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiCephfsFsIdStatfsGet200ResponseWithDefaults() *ApiCephfsFsIdStatfsGet200Response {
	this := ApiCephfsFsIdStatfsGet200Response{}
	return &this
}

// GetBytes returns the Bytes field value
func (o *ApiCephfsFsIdStatfsGet200Response) GetBytes() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Bytes
}

// GetBytesOk returns a tuple with the Bytes field value
// and a boolean to check if the value has been set.
func (o *ApiCephfsFsIdStatfsGet200Response) GetBytesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bytes, true
}

// SetBytes sets field value
func (o *ApiCephfsFsIdStatfsGet200Response) SetBytes(v int32) {
	o.Bytes = v
}

// GetFiles returns the Files field value
func (o *ApiCephfsFsIdStatfsGet200Response) GetFiles() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Files
}

// GetFilesOk returns a tuple with the Files field value
// and a boolean to check if the value has been set.
func (o *ApiCephfsFsIdStatfsGet200Response) GetFilesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Files, true
}

// SetFiles sets field value
func (o *ApiCephfsFsIdStatfsGet200Response) SetFiles(v int32) {
	o.Files = v
}

// GetSubdirs returns the Subdirs field value
func (o *ApiCephfsFsIdStatfsGet200Response) GetSubdirs() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Subdirs
}

// GetSubdirsOk returns a tuple with the Subdirs field value
// and a boolean to check if the value has been set.
func (o *ApiCephfsFsIdStatfsGet200Response) GetSubdirsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subdirs, true
}

// SetSubdirs sets field value
func (o *ApiCephfsFsIdStatfsGet200Response) SetSubdirs(v int32) {
	o.Subdirs = v
}

func (o ApiCephfsFsIdStatfsGet200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiCephfsFsIdStatfsGet200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bytes"] = o.Bytes
	toSerialize["files"] = o.Files
	toSerialize["subdirs"] = o.Subdirs
	return toSerialize, nil
}

func (o *ApiCephfsFsIdStatfsGet200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"bytes",
		"files",
		"subdirs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiCephfsFsIdStatfsGet200Response := _ApiCephfsFsIdStatfsGet200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiCephfsFsIdStatfsGet200Response)

	if err != nil {
		return err
	}

	*o = ApiCephfsFsIdStatfsGet200Response(varApiCephfsFsIdStatfsGet200Response)

	return err
}

type NullableApiCephfsFsIdStatfsGet200Response struct {
	value *ApiCephfsFsIdStatfsGet200Response
	isSet bool
}

func (v NullableApiCephfsFsIdStatfsGet200Response) Get() *ApiCephfsFsIdStatfsGet200Response {
	return v.value
}

func (v *NullableApiCephfsFsIdStatfsGet200Response) Set(val *ApiCephfsFsIdStatfsGet200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableApiCephfsFsIdStatfsGet200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableApiCephfsFsIdStatfsGet200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiCephfsFsIdStatfsGet200Response(val *ApiCephfsFsIdStatfsGet200Response) *NullableApiCephfsFsIdStatfsGet200Response {
	return &NullableApiCephfsFsIdStatfsGet200Response{value: val, isSet: true}
}

func (v NullableApiCephfsFsIdStatfsGet200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiCephfsFsIdStatfsGet200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


