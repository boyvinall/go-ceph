/*
Ceph REST API

This is the official Ceph REST API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ceph

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// RbdNamespaceAPIService RbdNamespaceAPI service
type RbdNamespaceAPIService service

type ApiApiBlockPoolPoolNameNamespaceGetRequest struct {
	ctx context.Context
	ApiService *RbdNamespaceAPIService
	poolName string
}

func (r ApiApiBlockPoolPoolNameNamespaceGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiBlockPoolPoolNameNamespaceGetExecute(r)
}

/*
ApiBlockPoolPoolNameNamespaceGet Method for ApiBlockPoolPoolNameNamespaceGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param poolName
 @return ApiApiBlockPoolPoolNameNamespaceGetRequest
*/
func (a *RbdNamespaceAPIService) ApiBlockPoolPoolNameNamespaceGet(ctx context.Context, poolName string) ApiApiBlockPoolPoolNameNamespaceGetRequest {
	return ApiApiBlockPoolPoolNameNamespaceGetRequest{
		ApiService: a,
		ctx: ctx,
		poolName: poolName,
	}
}

// Execute executes the request
func (a *RbdNamespaceAPIService) ApiBlockPoolPoolNameNamespaceGetExecute(r ApiApiBlockPoolPoolNameNamespaceGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbdNamespaceAPIService.ApiBlockPoolPoolNameNamespaceGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/block/pool/{pool_name}/namespace"
	localVarPath = strings.Replace(localVarPath, "{"+"pool_name"+"}", url.PathEscape(parameterValueToString(r.poolName, "poolName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiBlockPoolPoolNameNamespaceNamespaceDeleteRequest struct {
	ctx context.Context
	ApiService *RbdNamespaceAPIService
	poolName string
	namespace string
}

func (r ApiApiBlockPoolPoolNameNamespaceNamespaceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiBlockPoolPoolNameNamespaceNamespaceDeleteExecute(r)
}

/*
ApiBlockPoolPoolNameNamespaceNamespaceDelete Method for ApiBlockPoolPoolNameNamespaceNamespaceDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param poolName
 @param namespace
 @return ApiApiBlockPoolPoolNameNamespaceNamespaceDeleteRequest
*/
func (a *RbdNamespaceAPIService) ApiBlockPoolPoolNameNamespaceNamespaceDelete(ctx context.Context, poolName string, namespace string) ApiApiBlockPoolPoolNameNamespaceNamespaceDeleteRequest {
	return ApiApiBlockPoolPoolNameNamespaceNamespaceDeleteRequest{
		ApiService: a,
		ctx: ctx,
		poolName: poolName,
		namespace: namespace,
	}
}

// Execute executes the request
func (a *RbdNamespaceAPIService) ApiBlockPoolPoolNameNamespaceNamespaceDeleteExecute(r ApiApiBlockPoolPoolNameNamespaceNamespaceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbdNamespaceAPIService.ApiBlockPoolPoolNameNamespaceNamespaceDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/block/pool/{pool_name}/namespace/{namespace}"
	localVarPath = strings.Replace(localVarPath, "{"+"pool_name"+"}", url.PathEscape(parameterValueToString(r.poolName, "poolName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiBlockPoolPoolNameNamespacePostRequest struct {
	ctx context.Context
	ApiService *RbdNamespaceAPIService
	poolName string
	apiBlockPoolPoolNameNamespacePostRequest *ApiBlockPoolPoolNameNamespacePostRequest
}

func (r ApiApiBlockPoolPoolNameNamespacePostRequest) ApiBlockPoolPoolNameNamespacePostRequest(apiBlockPoolPoolNameNamespacePostRequest ApiBlockPoolPoolNameNamespacePostRequest) ApiApiBlockPoolPoolNameNamespacePostRequest {
	r.apiBlockPoolPoolNameNamespacePostRequest = &apiBlockPoolPoolNameNamespacePostRequest
	return r
}

func (r ApiApiBlockPoolPoolNameNamespacePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiBlockPoolPoolNameNamespacePostExecute(r)
}

/*
ApiBlockPoolPoolNameNamespacePost Method for ApiBlockPoolPoolNameNamespacePost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param poolName
 @return ApiApiBlockPoolPoolNameNamespacePostRequest
*/
func (a *RbdNamespaceAPIService) ApiBlockPoolPoolNameNamespacePost(ctx context.Context, poolName string) ApiApiBlockPoolPoolNameNamespacePostRequest {
	return ApiApiBlockPoolPoolNameNamespacePostRequest{
		ApiService: a,
		ctx: ctx,
		poolName: poolName,
	}
}

// Execute executes the request
func (a *RbdNamespaceAPIService) ApiBlockPoolPoolNameNamespacePostExecute(r ApiApiBlockPoolPoolNameNamespacePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbdNamespaceAPIService.ApiBlockPoolPoolNameNamespacePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/block/pool/{pool_name}/namespace"
	localVarPath = strings.Replace(localVarPath, "{"+"pool_name"+"}", url.PathEscape(parameterValueToString(r.poolName, "poolName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiBlockPoolPoolNameNamespacePostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
