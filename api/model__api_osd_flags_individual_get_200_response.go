/*
Ceph REST API

This is the official Ceph REST API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ceph

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApiOsdFlagsIndividualGet200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiOsdFlagsIndividualGet200Response{}

// ApiOsdFlagsIndividualGet200Response struct for ApiOsdFlagsIndividualGet200Response
type ApiOsdFlagsIndividualGet200Response struct {
	// List of active flags
	Flags []string `json:"flags"`
	// OSD ID
	Osd int32 `json:"osd"`
}

type _ApiOsdFlagsIndividualGet200Response ApiOsdFlagsIndividualGet200Response

// NewApiOsdFlagsIndividualGet200Response instantiates a new ApiOsdFlagsIndividualGet200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiOsdFlagsIndividualGet200Response(flags []string, osd int32) *ApiOsdFlagsIndividualGet200Response {
	this := ApiOsdFlagsIndividualGet200Response{}
	this.Flags = flags
	this.Osd = osd
	return &this
}

// NewApiOsdFlagsIndividualGet200ResponseWithDefaults instantiates a new ApiOsdFlagsIndividualGet200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiOsdFlagsIndividualGet200ResponseWithDefaults() *ApiOsdFlagsIndividualGet200Response {
	this := ApiOsdFlagsIndividualGet200Response{}
	return &this
}

// GetFlags returns the Flags field value
func (o *ApiOsdFlagsIndividualGet200Response) GetFlags() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Flags
}

// GetFlagsOk returns a tuple with the Flags field value
// and a boolean to check if the value has been set.
func (o *ApiOsdFlagsIndividualGet200Response) GetFlagsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Flags, true
}

// SetFlags sets field value
func (o *ApiOsdFlagsIndividualGet200Response) SetFlags(v []string) {
	o.Flags = v
}

// GetOsd returns the Osd field value
func (o *ApiOsdFlagsIndividualGet200Response) GetOsd() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Osd
}

// GetOsdOk returns a tuple with the Osd field value
// and a boolean to check if the value has been set.
func (o *ApiOsdFlagsIndividualGet200Response) GetOsdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Osd, true
}

// SetOsd sets field value
func (o *ApiOsdFlagsIndividualGet200Response) SetOsd(v int32) {
	o.Osd = v
}

func (o ApiOsdFlagsIndividualGet200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiOsdFlagsIndividualGet200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["flags"] = o.Flags
	toSerialize["osd"] = o.Osd
	return toSerialize, nil
}

func (o *ApiOsdFlagsIndividualGet200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"flags",
		"osd",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiOsdFlagsIndividualGet200Response := _ApiOsdFlagsIndividualGet200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiOsdFlagsIndividualGet200Response)

	if err != nil {
		return err
	}

	*o = ApiOsdFlagsIndividualGet200Response(varApiOsdFlagsIndividualGet200Response)

	return err
}

type NullableApiOsdFlagsIndividualGet200Response struct {
	value *ApiOsdFlagsIndividualGet200Response
	isSet bool
}

func (v NullableApiOsdFlagsIndividualGet200Response) Get() *ApiOsdFlagsIndividualGet200Response {
	return v.value
}

func (v *NullableApiOsdFlagsIndividualGet200Response) Set(val *ApiOsdFlagsIndividualGet200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableApiOsdFlagsIndividualGet200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableApiOsdFlagsIndividualGet200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiOsdFlagsIndividualGet200Response(val *ApiOsdFlagsIndividualGet200Response) *NullableApiOsdFlagsIndividualGet200Response {
	return &NullableApiOsdFlagsIndividualGet200Response{value: val, isSet: true}
}

func (v NullableApiOsdFlagsIndividualGet200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiOsdFlagsIndividualGet200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


