/*
Ceph REST API

This is the official Ceph REST API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ceph

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// NVMeOFSubsystemHostAllowlistAPIService NVMeOFSubsystemHostAllowlistAPI service
type NVMeOFSubsystemHostAllowlistAPIService service

type ApiApiNvmeofSubsystemNqnHostGetRequest struct {
	ctx context.Context
	ApiService *NVMeOFSubsystemHostAllowlistAPIService
	nqn string
	gwGroup *string
}

// NVMeoF gateway group
func (r ApiApiNvmeofSubsystemNqnHostGetRequest) GwGroup(gwGroup string) ApiApiNvmeofSubsystemNqnHostGetRequest {
	r.gwGroup = &gwGroup
	return r
}

func (r ApiApiNvmeofSubsystemNqnHostGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiNvmeofSubsystemNqnHostGetExecute(r)
}

/*
ApiNvmeofSubsystemNqnHostGet List all allowed hosts for an NVMeoF subsystem

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param nqn NVMeoF subsystem NQN
 @return ApiApiNvmeofSubsystemNqnHostGetRequest
*/
func (a *NVMeOFSubsystemHostAllowlistAPIService) ApiNvmeofSubsystemNqnHostGet(ctx context.Context, nqn string) ApiApiNvmeofSubsystemNqnHostGetRequest {
	return ApiApiNvmeofSubsystemNqnHostGetRequest{
		ApiService: a,
		ctx: ctx,
		nqn: nqn,
	}
}

// Execute executes the request
func (a *NVMeOFSubsystemHostAllowlistAPIService) ApiNvmeofSubsystemNqnHostGetExecute(r ApiApiNvmeofSubsystemNqnHostGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NVMeOFSubsystemHostAllowlistAPIService.ApiNvmeofSubsystemNqnHostGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/nvmeof/subsystem/{nqn}/host"
	localVarPath = strings.Replace(localVarPath, "{"+"nqn"+"}", url.PathEscape(parameterValueToString(r.nqn, "nqn")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.gwGroup != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gw_group", r.gwGroup, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiNvmeofSubsystemNqnHostHostNqnDeleteRequest struct {
	ctx context.Context
	ApiService *NVMeOFSubsystemHostAllowlistAPIService
	nqn string
	hostNqn string
	gwGroup *string
}

// NVMeoF gateway group
func (r ApiApiNvmeofSubsystemNqnHostHostNqnDeleteRequest) GwGroup(gwGroup string) ApiApiNvmeofSubsystemNqnHostHostNqnDeleteRequest {
	r.gwGroup = &gwGroup
	return r
}

func (r ApiApiNvmeofSubsystemNqnHostHostNqnDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiNvmeofSubsystemNqnHostHostNqnDeleteExecute(r)
}

/*
ApiNvmeofSubsystemNqnHostHostNqnDelete Disallow hosts from accessing an NVMeoF subsystem

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param nqn NVMeoF subsystem NQN
 @param hostNqn NVMeoF host NQN. Use \"*\" to disallow any host.
 @return ApiApiNvmeofSubsystemNqnHostHostNqnDeleteRequest
*/
func (a *NVMeOFSubsystemHostAllowlistAPIService) ApiNvmeofSubsystemNqnHostHostNqnDelete(ctx context.Context, nqn string, hostNqn string) ApiApiNvmeofSubsystemNqnHostHostNqnDeleteRequest {
	return ApiApiNvmeofSubsystemNqnHostHostNqnDeleteRequest{
		ApiService: a,
		ctx: ctx,
		nqn: nqn,
		hostNqn: hostNqn,
	}
}

// Execute executes the request
func (a *NVMeOFSubsystemHostAllowlistAPIService) ApiNvmeofSubsystemNqnHostHostNqnDeleteExecute(r ApiApiNvmeofSubsystemNqnHostHostNqnDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NVMeOFSubsystemHostAllowlistAPIService.ApiNvmeofSubsystemNqnHostHostNqnDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/nvmeof/subsystem/{nqn}/host/{host_nqn}"
	localVarPath = strings.Replace(localVarPath, "{"+"nqn"+"}", url.PathEscape(parameterValueToString(r.nqn, "nqn")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"host_nqn"+"}", url.PathEscape(parameterValueToString(r.hostNqn, "hostNqn")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.gwGroup != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gw_group", r.gwGroup, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiNvmeofSubsystemNqnHostPostRequest struct {
	ctx context.Context
	ApiService *NVMeOFSubsystemHostAllowlistAPIService
	nqn string
	apiNvmeofSubsystemNqnHostPostRequest *ApiNvmeofSubsystemNqnHostPostRequest
}

func (r ApiApiNvmeofSubsystemNqnHostPostRequest) ApiNvmeofSubsystemNqnHostPostRequest(apiNvmeofSubsystemNqnHostPostRequest ApiNvmeofSubsystemNqnHostPostRequest) ApiApiNvmeofSubsystemNqnHostPostRequest {
	r.apiNvmeofSubsystemNqnHostPostRequest = &apiNvmeofSubsystemNqnHostPostRequest
	return r
}

func (r ApiApiNvmeofSubsystemNqnHostPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiNvmeofSubsystemNqnHostPostExecute(r)
}

/*
ApiNvmeofSubsystemNqnHostPost Allow hosts to access an NVMeoF subsystem

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param nqn NVMeoF subsystem NQN
 @return ApiApiNvmeofSubsystemNqnHostPostRequest
*/
func (a *NVMeOFSubsystemHostAllowlistAPIService) ApiNvmeofSubsystemNqnHostPost(ctx context.Context, nqn string) ApiApiNvmeofSubsystemNqnHostPostRequest {
	return ApiApiNvmeofSubsystemNqnHostPostRequest{
		ApiService: a,
		ctx: ctx,
		nqn: nqn,
	}
}

// Execute executes the request
func (a *NVMeOFSubsystemHostAllowlistAPIService) ApiNvmeofSubsystemNqnHostPostExecute(r ApiApiNvmeofSubsystemNqnHostPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NVMeOFSubsystemHostAllowlistAPIService.ApiNvmeofSubsystemNqnHostPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/nvmeof/subsystem/{nqn}/host"
	localVarPath = strings.Replace(localVarPath, "{"+"nqn"+"}", url.PathEscape(parameterValueToString(r.nqn, "nqn")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiNvmeofSubsystemNqnHostPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
