/*
Ceph REST API

This is the official Ceph REST API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ceph

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// CephfsSubvolumeGroupAPIService CephfsSubvolumeGroupAPI service
type CephfsSubvolumeGroupAPIService service

type ApiApiCephfsSubvolumeGroupPostRequest struct {
	ctx context.Context
	ApiService *CephfsSubvolumeGroupAPIService
	apiCephfsSubvolumeGroupPostRequest *ApiCephfsSubvolumeGroupPostRequest
}

func (r ApiApiCephfsSubvolumeGroupPostRequest) ApiCephfsSubvolumeGroupPostRequest(apiCephfsSubvolumeGroupPostRequest ApiCephfsSubvolumeGroupPostRequest) ApiApiCephfsSubvolumeGroupPostRequest {
	r.apiCephfsSubvolumeGroupPostRequest = &apiCephfsSubvolumeGroupPostRequest
	return r
}

func (r ApiApiCephfsSubvolumeGroupPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiCephfsSubvolumeGroupPostExecute(r)
}

/*
ApiCephfsSubvolumeGroupPost Method for ApiCephfsSubvolumeGroupPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiCephfsSubvolumeGroupPostRequest
*/
func (a *CephfsSubvolumeGroupAPIService) ApiCephfsSubvolumeGroupPost(ctx context.Context) ApiApiCephfsSubvolumeGroupPostRequest {
	return ApiApiCephfsSubvolumeGroupPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CephfsSubvolumeGroupAPIService) ApiCephfsSubvolumeGroupPostExecute(r ApiApiCephfsSubvolumeGroupPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CephfsSubvolumeGroupAPIService.ApiCephfsSubvolumeGroupPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/cephfs/subvolume/group"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiCephfsSubvolumeGroupPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiCephfsSubvolumeGroupVolNameDeleteRequest struct {
	ctx context.Context
	ApiService *CephfsSubvolumeGroupAPIService
	volName string
	groupName *string
}

func (r ApiApiCephfsSubvolumeGroupVolNameDeleteRequest) GroupName(groupName string) ApiApiCephfsSubvolumeGroupVolNameDeleteRequest {
	r.groupName = &groupName
	return r
}

func (r ApiApiCephfsSubvolumeGroupVolNameDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiCephfsSubvolumeGroupVolNameDeleteExecute(r)
}

/*
ApiCephfsSubvolumeGroupVolNameDelete Method for ApiCephfsSubvolumeGroupVolNameDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param volName
 @return ApiApiCephfsSubvolumeGroupVolNameDeleteRequest
*/
func (a *CephfsSubvolumeGroupAPIService) ApiCephfsSubvolumeGroupVolNameDelete(ctx context.Context, volName string) ApiApiCephfsSubvolumeGroupVolNameDeleteRequest {
	return ApiApiCephfsSubvolumeGroupVolNameDeleteRequest{
		ApiService: a,
		ctx: ctx,
		volName: volName,
	}
}

// Execute executes the request
func (a *CephfsSubvolumeGroupAPIService) ApiCephfsSubvolumeGroupVolNameDeleteExecute(r ApiApiCephfsSubvolumeGroupVolNameDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CephfsSubvolumeGroupAPIService.ApiCephfsSubvolumeGroupVolNameDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/cephfs/subvolume/group/{vol_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"vol_name"+"}", url.PathEscape(parameterValueToString(r.volName, "volName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.groupName == nil {
		return nil, reportError("groupName is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "group_name", r.groupName, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiCephfsSubvolumeGroupVolNameGetRequest struct {
	ctx context.Context
	ApiService *CephfsSubvolumeGroupAPIService
	volName string
	info *bool
}

func (r ApiApiCephfsSubvolumeGroupVolNameGetRequest) Info(info bool) ApiApiCephfsSubvolumeGroupVolNameGetRequest {
	r.info = &info
	return r
}

func (r ApiApiCephfsSubvolumeGroupVolNameGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiCephfsSubvolumeGroupVolNameGetExecute(r)
}

/*
ApiCephfsSubvolumeGroupVolNameGet Method for ApiCephfsSubvolumeGroupVolNameGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param volName
 @return ApiApiCephfsSubvolumeGroupVolNameGetRequest
*/
func (a *CephfsSubvolumeGroupAPIService) ApiCephfsSubvolumeGroupVolNameGet(ctx context.Context, volName string) ApiApiCephfsSubvolumeGroupVolNameGetRequest {
	return ApiApiCephfsSubvolumeGroupVolNameGetRequest{
		ApiService: a,
		ctx: ctx,
		volName: volName,
	}
}

// Execute executes the request
func (a *CephfsSubvolumeGroupAPIService) ApiCephfsSubvolumeGroupVolNameGetExecute(r ApiApiCephfsSubvolumeGroupVolNameGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CephfsSubvolumeGroupAPIService.ApiCephfsSubvolumeGroupVolNameGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/cephfs/subvolume/group/{vol_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"vol_name"+"}", url.PathEscape(parameterValueToString(r.volName, "volName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.info != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "info", r.info, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiCephfsSubvolumeGroupVolNameInfoGetRequest struct {
	ctx context.Context
	ApiService *CephfsSubvolumeGroupAPIService
	volName string
	groupName *string
}

func (r ApiApiCephfsSubvolumeGroupVolNameInfoGetRequest) GroupName(groupName string) ApiApiCephfsSubvolumeGroupVolNameInfoGetRequest {
	r.groupName = &groupName
	return r
}

func (r ApiApiCephfsSubvolumeGroupVolNameInfoGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiCephfsSubvolumeGroupVolNameInfoGetExecute(r)
}

/*
ApiCephfsSubvolumeGroupVolNameInfoGet Method for ApiCephfsSubvolumeGroupVolNameInfoGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param volName
 @return ApiApiCephfsSubvolumeGroupVolNameInfoGetRequest
*/
func (a *CephfsSubvolumeGroupAPIService) ApiCephfsSubvolumeGroupVolNameInfoGet(ctx context.Context, volName string) ApiApiCephfsSubvolumeGroupVolNameInfoGetRequest {
	return ApiApiCephfsSubvolumeGroupVolNameInfoGetRequest{
		ApiService: a,
		ctx: ctx,
		volName: volName,
	}
}

// Execute executes the request
func (a *CephfsSubvolumeGroupAPIService) ApiCephfsSubvolumeGroupVolNameInfoGetExecute(r ApiApiCephfsSubvolumeGroupVolNameInfoGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CephfsSubvolumeGroupAPIService.ApiCephfsSubvolumeGroupVolNameInfoGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/cephfs/subvolume/group/{vol_name}/info"
	localVarPath = strings.Replace(localVarPath, "{"+"vol_name"+"}", url.PathEscape(parameterValueToString(r.volName, "volName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.groupName == nil {
		return nil, reportError("groupName is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "group_name", r.groupName, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiCephfsSubvolumeGroupVolNamePutRequest struct {
	ctx context.Context
	ApiService *CephfsSubvolumeGroupAPIService
	volName string
	apiCephfsSubvolumeGroupVolNamePutRequest *ApiCephfsSubvolumeGroupVolNamePutRequest
}

func (r ApiApiCephfsSubvolumeGroupVolNamePutRequest) ApiCephfsSubvolumeGroupVolNamePutRequest(apiCephfsSubvolumeGroupVolNamePutRequest ApiCephfsSubvolumeGroupVolNamePutRequest) ApiApiCephfsSubvolumeGroupVolNamePutRequest {
	r.apiCephfsSubvolumeGroupVolNamePutRequest = &apiCephfsSubvolumeGroupVolNamePutRequest
	return r
}

func (r ApiApiCephfsSubvolumeGroupVolNamePutRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiCephfsSubvolumeGroupVolNamePutExecute(r)
}

/*
ApiCephfsSubvolumeGroupVolNamePut Method for ApiCephfsSubvolumeGroupVolNamePut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param volName
 @return ApiApiCephfsSubvolumeGroupVolNamePutRequest
*/
func (a *CephfsSubvolumeGroupAPIService) ApiCephfsSubvolumeGroupVolNamePut(ctx context.Context, volName string) ApiApiCephfsSubvolumeGroupVolNamePutRequest {
	return ApiApiCephfsSubvolumeGroupVolNamePutRequest{
		ApiService: a,
		ctx: ctx,
		volName: volName,
	}
}

// Execute executes the request
func (a *CephfsSubvolumeGroupAPIService) ApiCephfsSubvolumeGroupVolNamePutExecute(r ApiApiCephfsSubvolumeGroupVolNamePutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CephfsSubvolumeGroupAPIService.ApiCephfsSubvolumeGroupVolNamePut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/cephfs/subvolume/group/{vol_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"vol_name"+"}", url.PathEscape(parameterValueToString(r.volName, "volName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiCephfsSubvolumeGroupVolNamePutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
