/*
Ceph REST API

This is the official Ceph REST API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ceph

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApiClusterConfPutRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiClusterConfPutRequest{}

// ApiClusterConfPutRequest struct for ApiClusterConfPutRequest
type ApiClusterConfPutRequest struct {
	Options string `json:"options"`
}

type _ApiClusterConfPutRequest ApiClusterConfPutRequest

// NewApiClusterConfPutRequest instantiates a new ApiClusterConfPutRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiClusterConfPutRequest(options string) *ApiClusterConfPutRequest {
	this := ApiClusterConfPutRequest{}
	this.Options = options
	return &this
}

// NewApiClusterConfPutRequestWithDefaults instantiates a new ApiClusterConfPutRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiClusterConfPutRequestWithDefaults() *ApiClusterConfPutRequest {
	this := ApiClusterConfPutRequest{}
	return &this
}

// GetOptions returns the Options field value
func (o *ApiClusterConfPutRequest) GetOptions() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value
// and a boolean to check if the value has been set.
func (o *ApiClusterConfPutRequest) GetOptionsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Options, true
}

// SetOptions sets field value
func (o *ApiClusterConfPutRequest) SetOptions(v string) {
	o.Options = v
}

func (o ApiClusterConfPutRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiClusterConfPutRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["options"] = o.Options
	return toSerialize, nil
}

func (o *ApiClusterConfPutRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"options",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiClusterConfPutRequest := _ApiClusterConfPutRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiClusterConfPutRequest)

	if err != nil {
		return err
	}

	*o = ApiClusterConfPutRequest(varApiClusterConfPutRequest)

	return err
}

type NullableApiClusterConfPutRequest struct {
	value *ApiClusterConfPutRequest
	isSet bool
}

func (v NullableApiClusterConfPutRequest) Get() *ApiClusterConfPutRequest {
	return v.value
}

func (v *NullableApiClusterConfPutRequest) Set(val *ApiClusterConfPutRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableApiClusterConfPutRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableApiClusterConfPutRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiClusterConfPutRequest(val *ApiClusterConfPutRequest) *NullableApiClusterConfPutRequest {
	return &NullableApiClusterConfPutRequest{value: val, isSet: true}
}

func (v NullableApiClusterConfPutRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiClusterConfPutRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


