/*
Ceph REST API

This is the official Ceph REST API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ceph

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApiRgwRealmRealmNamePutRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiRgwRealmRealmNamePutRequest{}

// ApiRgwRealmRealmNamePutRequest struct for ApiRgwRealmRealmNamePutRequest
type ApiRgwRealmRealmNamePutRequest struct {
	Default *string `json:"default,omitempty"`
	NewRealmName string `json:"new_realm_name"`
}

type _ApiRgwRealmRealmNamePutRequest ApiRgwRealmRealmNamePutRequest

// NewApiRgwRealmRealmNamePutRequest instantiates a new ApiRgwRealmRealmNamePutRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiRgwRealmRealmNamePutRequest(newRealmName string) *ApiRgwRealmRealmNamePutRequest {
	this := ApiRgwRealmRealmNamePutRequest{}
	var default_ string = ""
	this.Default = &default_
	this.NewRealmName = newRealmName
	return &this
}

// NewApiRgwRealmRealmNamePutRequestWithDefaults instantiates a new ApiRgwRealmRealmNamePutRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiRgwRealmRealmNamePutRequestWithDefaults() *ApiRgwRealmRealmNamePutRequest {
	this := ApiRgwRealmRealmNamePutRequest{}
	var default_ string = ""
	this.Default = &default_
	return &this
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *ApiRgwRealmRealmNamePutRequest) GetDefault() string {
	if o == nil || IsNil(o.Default) {
		var ret string
		return ret
	}
	return *o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiRgwRealmRealmNamePutRequest) GetDefaultOk() (*string, bool) {
	if o == nil || IsNil(o.Default) {
		return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *ApiRgwRealmRealmNamePutRequest) HasDefault() bool {
	if o != nil && !IsNil(o.Default) {
		return true
	}

	return false
}

// SetDefault gets a reference to the given string and assigns it to the Default field.
func (o *ApiRgwRealmRealmNamePutRequest) SetDefault(v string) {
	o.Default = &v
}

// GetNewRealmName returns the NewRealmName field value
func (o *ApiRgwRealmRealmNamePutRequest) GetNewRealmName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NewRealmName
}

// GetNewRealmNameOk returns a tuple with the NewRealmName field value
// and a boolean to check if the value has been set.
func (o *ApiRgwRealmRealmNamePutRequest) GetNewRealmNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NewRealmName, true
}

// SetNewRealmName sets field value
func (o *ApiRgwRealmRealmNamePutRequest) SetNewRealmName(v string) {
	o.NewRealmName = v
}

func (o ApiRgwRealmRealmNamePutRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiRgwRealmRealmNamePutRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Default) {
		toSerialize["default"] = o.Default
	}
	toSerialize["new_realm_name"] = o.NewRealmName
	return toSerialize, nil
}

func (o *ApiRgwRealmRealmNamePutRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"new_realm_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiRgwRealmRealmNamePutRequest := _ApiRgwRealmRealmNamePutRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiRgwRealmRealmNamePutRequest)

	if err != nil {
		return err
	}

	*o = ApiRgwRealmRealmNamePutRequest(varApiRgwRealmRealmNamePutRequest)

	return err
}

type NullableApiRgwRealmRealmNamePutRequest struct {
	value *ApiRgwRealmRealmNamePutRequest
	isSet bool
}

func (v NullableApiRgwRealmRealmNamePutRequest) Get() *ApiRgwRealmRealmNamePutRequest {
	return v.value
}

func (v *NullableApiRgwRealmRealmNamePutRequest) Set(val *ApiRgwRealmRealmNamePutRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableApiRgwRealmRealmNamePutRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableApiRgwRealmRealmNamePutRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiRgwRealmRealmNamePutRequest(val *ApiRgwRealmRealmNamePutRequest) *NullableApiRgwRealmRealmNamePutRequest {
	return &NullableApiRgwRealmRealmNamePutRequest{value: val, isSet: true}
}

func (v NullableApiRgwRealmRealmNamePutRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiRgwRealmRealmNamePutRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


