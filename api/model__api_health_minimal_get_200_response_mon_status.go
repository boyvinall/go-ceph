/*
Ceph REST API

This is the official Ceph REST API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ceph

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApiHealthMinimalGet200ResponseMonStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiHealthMinimalGet200ResponseMonStatus{}

// ApiHealthMinimalGet200ResponseMonStatus 
type ApiHealthMinimalGet200ResponseMonStatus struct {
	Monmap ApiHealthMinimalGet200ResponseMonStatusMonmap `json:"monmap"`
	// 
	Quorum []int32 `json:"quorum"`
}

type _ApiHealthMinimalGet200ResponseMonStatus ApiHealthMinimalGet200ResponseMonStatus

// NewApiHealthMinimalGet200ResponseMonStatus instantiates a new ApiHealthMinimalGet200ResponseMonStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiHealthMinimalGet200ResponseMonStatus(monmap ApiHealthMinimalGet200ResponseMonStatusMonmap, quorum []int32) *ApiHealthMinimalGet200ResponseMonStatus {
	this := ApiHealthMinimalGet200ResponseMonStatus{}
	this.Monmap = monmap
	this.Quorum = quorum
	return &this
}

// NewApiHealthMinimalGet200ResponseMonStatusWithDefaults instantiates a new ApiHealthMinimalGet200ResponseMonStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiHealthMinimalGet200ResponseMonStatusWithDefaults() *ApiHealthMinimalGet200ResponseMonStatus {
	this := ApiHealthMinimalGet200ResponseMonStatus{}
	return &this
}

// GetMonmap returns the Monmap field value
func (o *ApiHealthMinimalGet200ResponseMonStatus) GetMonmap() ApiHealthMinimalGet200ResponseMonStatusMonmap {
	if o == nil {
		var ret ApiHealthMinimalGet200ResponseMonStatusMonmap
		return ret
	}

	return o.Monmap
}

// GetMonmapOk returns a tuple with the Monmap field value
// and a boolean to check if the value has been set.
func (o *ApiHealthMinimalGet200ResponseMonStatus) GetMonmapOk() (*ApiHealthMinimalGet200ResponseMonStatusMonmap, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Monmap, true
}

// SetMonmap sets field value
func (o *ApiHealthMinimalGet200ResponseMonStatus) SetMonmap(v ApiHealthMinimalGet200ResponseMonStatusMonmap) {
	o.Monmap = v
}

// GetQuorum returns the Quorum field value
func (o *ApiHealthMinimalGet200ResponseMonStatus) GetQuorum() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.Quorum
}

// GetQuorumOk returns a tuple with the Quorum field value
// and a boolean to check if the value has been set.
func (o *ApiHealthMinimalGet200ResponseMonStatus) GetQuorumOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Quorum, true
}

// SetQuorum sets field value
func (o *ApiHealthMinimalGet200ResponseMonStatus) SetQuorum(v []int32) {
	o.Quorum = v
}

func (o ApiHealthMinimalGet200ResponseMonStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiHealthMinimalGet200ResponseMonStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["monmap"] = o.Monmap
	toSerialize["quorum"] = o.Quorum
	return toSerialize, nil
}

func (o *ApiHealthMinimalGet200ResponseMonStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"monmap",
		"quorum",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiHealthMinimalGet200ResponseMonStatus := _ApiHealthMinimalGet200ResponseMonStatus{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiHealthMinimalGet200ResponseMonStatus)

	if err != nil {
		return err
	}

	*o = ApiHealthMinimalGet200ResponseMonStatus(varApiHealthMinimalGet200ResponseMonStatus)

	return err
}

type NullableApiHealthMinimalGet200ResponseMonStatus struct {
	value *ApiHealthMinimalGet200ResponseMonStatus
	isSet bool
}

func (v NullableApiHealthMinimalGet200ResponseMonStatus) Get() *ApiHealthMinimalGet200ResponseMonStatus {
	return v.value
}

func (v *NullableApiHealthMinimalGet200ResponseMonStatus) Set(val *ApiHealthMinimalGet200ResponseMonStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableApiHealthMinimalGet200ResponseMonStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableApiHealthMinimalGet200ResponseMonStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiHealthMinimalGet200ResponseMonStatus(val *ApiHealthMinimalGet200ResponseMonStatus) *NullableApiHealthMinimalGet200ResponseMonStatus {
	return &NullableApiHealthMinimalGet200ResponseMonStatus{value: val, isSet: true}
}

func (v NullableApiHealthMinimalGet200ResponseMonStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiHealthMinimalGet200ResponseMonStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


