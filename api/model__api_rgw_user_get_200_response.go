/*
Ceph REST API

This is the official Ceph REST API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ceph

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApiRgwUserGet200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiRgwUserGet200Response{}

// ApiRgwUserGet200Response struct for ApiRgwUserGet200Response
type ApiRgwUserGet200Response struct {
	// list of rgw users
	ListOfUsers []string `json:"list_of_users"`
}

type _ApiRgwUserGet200Response ApiRgwUserGet200Response

// NewApiRgwUserGet200Response instantiates a new ApiRgwUserGet200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiRgwUserGet200Response(listOfUsers []string) *ApiRgwUserGet200Response {
	this := ApiRgwUserGet200Response{}
	this.ListOfUsers = listOfUsers
	return &this
}

// NewApiRgwUserGet200ResponseWithDefaults instantiates a new ApiRgwUserGet200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiRgwUserGet200ResponseWithDefaults() *ApiRgwUserGet200Response {
	this := ApiRgwUserGet200Response{}
	return &this
}

// GetListOfUsers returns the ListOfUsers field value
func (o *ApiRgwUserGet200Response) GetListOfUsers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ListOfUsers
}

// GetListOfUsersOk returns a tuple with the ListOfUsers field value
// and a boolean to check if the value has been set.
func (o *ApiRgwUserGet200Response) GetListOfUsersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ListOfUsers, true
}

// SetListOfUsers sets field value
func (o *ApiRgwUserGet200Response) SetListOfUsers(v []string) {
	o.ListOfUsers = v
}

func (o ApiRgwUserGet200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiRgwUserGet200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["list_of_users"] = o.ListOfUsers
	return toSerialize, nil
}

func (o *ApiRgwUserGet200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"list_of_users",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiRgwUserGet200Response := _ApiRgwUserGet200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiRgwUserGet200Response)

	if err != nil {
		return err
	}

	*o = ApiRgwUserGet200Response(varApiRgwUserGet200Response)

	return err
}

type NullableApiRgwUserGet200Response struct {
	value *ApiRgwUserGet200Response
	isSet bool
}

func (v NullableApiRgwUserGet200Response) Get() *ApiRgwUserGet200Response {
	return v.value
}

func (v *NullableApiRgwUserGet200Response) Set(val *ApiRgwUserGet200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableApiRgwUserGet200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableApiRgwUserGet200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiRgwUserGet200Response(val *ApiRgwUserGet200Response) *NullableApiRgwUserGet200Response {
	return &NullableApiRgwUserGet200Response{value: val, isSet: true}
}

func (v NullableApiRgwUserGet200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiRgwUserGet200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


