/*
Ceph REST API

This is the official Ceph REST API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ceph

import (
	"encoding/json"
)

// checks if the ApiTelemetryPutRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiTelemetryPutRequest{}

// ApiTelemetryPutRequest struct for ApiTelemetryPutRequest
type ApiTelemetryPutRequest struct {
	Enable *bool `json:"enable,omitempty"`
	LicenseName *string `json:"license_name,omitempty"`
}

// NewApiTelemetryPutRequest instantiates a new ApiTelemetryPutRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiTelemetryPutRequest() *ApiTelemetryPutRequest {
	this := ApiTelemetryPutRequest{}
	var enable bool = true
	this.Enable = &enable
	return &this
}

// NewApiTelemetryPutRequestWithDefaults instantiates a new ApiTelemetryPutRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiTelemetryPutRequestWithDefaults() *ApiTelemetryPutRequest {
	this := ApiTelemetryPutRequest{}
	var enable bool = true
	this.Enable = &enable
	return &this
}

// GetEnable returns the Enable field value if set, zero value otherwise.
func (o *ApiTelemetryPutRequest) GetEnable() bool {
	if o == nil || IsNil(o.Enable) {
		var ret bool
		return ret
	}
	return *o.Enable
}

// GetEnableOk returns a tuple with the Enable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiTelemetryPutRequest) GetEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.Enable) {
		return nil, false
	}
	return o.Enable, true
}

// HasEnable returns a boolean if a field has been set.
func (o *ApiTelemetryPutRequest) HasEnable() bool {
	if o != nil && !IsNil(o.Enable) {
		return true
	}

	return false
}

// SetEnable gets a reference to the given bool and assigns it to the Enable field.
func (o *ApiTelemetryPutRequest) SetEnable(v bool) {
	o.Enable = &v
}

// GetLicenseName returns the LicenseName field value if set, zero value otherwise.
func (o *ApiTelemetryPutRequest) GetLicenseName() string {
	if o == nil || IsNil(o.LicenseName) {
		var ret string
		return ret
	}
	return *o.LicenseName
}

// GetLicenseNameOk returns a tuple with the LicenseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiTelemetryPutRequest) GetLicenseNameOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseName) {
		return nil, false
	}
	return o.LicenseName, true
}

// HasLicenseName returns a boolean if a field has been set.
func (o *ApiTelemetryPutRequest) HasLicenseName() bool {
	if o != nil && !IsNil(o.LicenseName) {
		return true
	}

	return false
}

// SetLicenseName gets a reference to the given string and assigns it to the LicenseName field.
func (o *ApiTelemetryPutRequest) SetLicenseName(v string) {
	o.LicenseName = &v
}

func (o ApiTelemetryPutRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiTelemetryPutRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enable) {
		toSerialize["enable"] = o.Enable
	}
	if !IsNil(o.LicenseName) {
		toSerialize["license_name"] = o.LicenseName
	}
	return toSerialize, nil
}

type NullableApiTelemetryPutRequest struct {
	value *ApiTelemetryPutRequest
	isSet bool
}

func (v NullableApiTelemetryPutRequest) Get() *ApiTelemetryPutRequest {
	return v.value
}

func (v *NullableApiTelemetryPutRequest) Set(val *ApiTelemetryPutRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableApiTelemetryPutRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableApiTelemetryPutRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiTelemetryPutRequest(val *ApiTelemetryPutRequest) *NullableApiTelemetryPutRequest {
	return &NullableApiTelemetryPutRequest{value: val, isSet: true}
}

func (v NullableApiTelemetryPutRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiTelemetryPutRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


