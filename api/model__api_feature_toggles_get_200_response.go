/*
Ceph REST API

This is the official Ceph REST API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ceph

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApiFeatureTogglesGet200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiFeatureTogglesGet200Response{}

// ApiFeatureTogglesGet200Response struct for ApiFeatureTogglesGet200Response
type ApiFeatureTogglesGet200Response struct {
	// 
	Cephfs bool `json:"cephfs"`
	// 
	Dashboard bool `json:"dashboard"`
	// 
	Iscsi bool `json:"iscsi"`
	// 
	Mirroring bool `json:"mirroring"`
	// 
	Nfs bool `json:"nfs"`
	// 
	Rbd bool `json:"rbd"`
	// 
	Rgw bool `json:"rgw"`
}

type _ApiFeatureTogglesGet200Response ApiFeatureTogglesGet200Response

// NewApiFeatureTogglesGet200Response instantiates a new ApiFeatureTogglesGet200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiFeatureTogglesGet200Response(cephfs bool, dashboard bool, iscsi bool, mirroring bool, nfs bool, rbd bool, rgw bool) *ApiFeatureTogglesGet200Response {
	this := ApiFeatureTogglesGet200Response{}
	this.Cephfs = cephfs
	this.Dashboard = dashboard
	this.Iscsi = iscsi
	this.Mirroring = mirroring
	this.Nfs = nfs
	this.Rbd = rbd
	this.Rgw = rgw
	return &this
}

// NewApiFeatureTogglesGet200ResponseWithDefaults instantiates a new ApiFeatureTogglesGet200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiFeatureTogglesGet200ResponseWithDefaults() *ApiFeatureTogglesGet200Response {
	this := ApiFeatureTogglesGet200Response{}
	return &this
}

// GetCephfs returns the Cephfs field value
func (o *ApiFeatureTogglesGet200Response) GetCephfs() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Cephfs
}

// GetCephfsOk returns a tuple with the Cephfs field value
// and a boolean to check if the value has been set.
func (o *ApiFeatureTogglesGet200Response) GetCephfsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cephfs, true
}

// SetCephfs sets field value
func (o *ApiFeatureTogglesGet200Response) SetCephfs(v bool) {
	o.Cephfs = v
}

// GetDashboard returns the Dashboard field value
func (o *ApiFeatureTogglesGet200Response) GetDashboard() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Dashboard
}

// GetDashboardOk returns a tuple with the Dashboard field value
// and a boolean to check if the value has been set.
func (o *ApiFeatureTogglesGet200Response) GetDashboardOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dashboard, true
}

// SetDashboard sets field value
func (o *ApiFeatureTogglesGet200Response) SetDashboard(v bool) {
	o.Dashboard = v
}

// GetIscsi returns the Iscsi field value
func (o *ApiFeatureTogglesGet200Response) GetIscsi() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Iscsi
}

// GetIscsiOk returns a tuple with the Iscsi field value
// and a boolean to check if the value has been set.
func (o *ApiFeatureTogglesGet200Response) GetIscsiOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Iscsi, true
}

// SetIscsi sets field value
func (o *ApiFeatureTogglesGet200Response) SetIscsi(v bool) {
	o.Iscsi = v
}

// GetMirroring returns the Mirroring field value
func (o *ApiFeatureTogglesGet200Response) GetMirroring() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Mirroring
}

// GetMirroringOk returns a tuple with the Mirroring field value
// and a boolean to check if the value has been set.
func (o *ApiFeatureTogglesGet200Response) GetMirroringOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mirroring, true
}

// SetMirroring sets field value
func (o *ApiFeatureTogglesGet200Response) SetMirroring(v bool) {
	o.Mirroring = v
}

// GetNfs returns the Nfs field value
func (o *ApiFeatureTogglesGet200Response) GetNfs() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Nfs
}

// GetNfsOk returns a tuple with the Nfs field value
// and a boolean to check if the value has been set.
func (o *ApiFeatureTogglesGet200Response) GetNfsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Nfs, true
}

// SetNfs sets field value
func (o *ApiFeatureTogglesGet200Response) SetNfs(v bool) {
	o.Nfs = v
}

// GetRbd returns the Rbd field value
func (o *ApiFeatureTogglesGet200Response) GetRbd() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Rbd
}

// GetRbdOk returns a tuple with the Rbd field value
// and a boolean to check if the value has been set.
func (o *ApiFeatureTogglesGet200Response) GetRbdOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rbd, true
}

// SetRbd sets field value
func (o *ApiFeatureTogglesGet200Response) SetRbd(v bool) {
	o.Rbd = v
}

// GetRgw returns the Rgw field value
func (o *ApiFeatureTogglesGet200Response) GetRgw() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Rgw
}

// GetRgwOk returns a tuple with the Rgw field value
// and a boolean to check if the value has been set.
func (o *ApiFeatureTogglesGet200Response) GetRgwOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rgw, true
}

// SetRgw sets field value
func (o *ApiFeatureTogglesGet200Response) SetRgw(v bool) {
	o.Rgw = v
}

func (o ApiFeatureTogglesGet200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiFeatureTogglesGet200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cephfs"] = o.Cephfs
	toSerialize["dashboard"] = o.Dashboard
	toSerialize["iscsi"] = o.Iscsi
	toSerialize["mirroring"] = o.Mirroring
	toSerialize["nfs"] = o.Nfs
	toSerialize["rbd"] = o.Rbd
	toSerialize["rgw"] = o.Rgw
	return toSerialize, nil
}

func (o *ApiFeatureTogglesGet200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cephfs",
		"dashboard",
		"iscsi",
		"mirroring",
		"nfs",
		"rbd",
		"rgw",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiFeatureTogglesGet200Response := _ApiFeatureTogglesGet200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiFeatureTogglesGet200Response)

	if err != nil {
		return err
	}

	*o = ApiFeatureTogglesGet200Response(varApiFeatureTogglesGet200Response)

	return err
}

type NullableApiFeatureTogglesGet200Response struct {
	value *ApiFeatureTogglesGet200Response
	isSet bool
}

func (v NullableApiFeatureTogglesGet200Response) Get() *ApiFeatureTogglesGet200Response {
	return v.value
}

func (v *NullableApiFeatureTogglesGet200Response) Set(val *ApiFeatureTogglesGet200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableApiFeatureTogglesGet200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableApiFeatureTogglesGet200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiFeatureTogglesGet200Response(val *ApiFeatureTogglesGet200Response) *NullableApiFeatureTogglesGet200Response {
	return &NullableApiFeatureTogglesGet200Response{value: val, isSet: true}
}

func (v NullableApiFeatureTogglesGet200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiFeatureTogglesGet200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


