/*
Ceph REST API

This is the official Ceph REST API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ceph

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// RgwMultisiteAPIService RgwMultisiteAPI service
type RgwMultisiteAPIService service

type ApiApiRgwMultisiteSyncFlowFlowIdFlowTypeGroupIdDeleteRequest struct {
	ctx context.Context
	ApiService *RgwMultisiteAPIService
	flowId string
	flowType string
	groupId string
	sourceZone *string
	destinationZone *string
	zones *string
	bucketName *string
}

func (r ApiApiRgwMultisiteSyncFlowFlowIdFlowTypeGroupIdDeleteRequest) SourceZone(sourceZone string) ApiApiRgwMultisiteSyncFlowFlowIdFlowTypeGroupIdDeleteRequest {
	r.sourceZone = &sourceZone
	return r
}

func (r ApiApiRgwMultisiteSyncFlowFlowIdFlowTypeGroupIdDeleteRequest) DestinationZone(destinationZone string) ApiApiRgwMultisiteSyncFlowFlowIdFlowTypeGroupIdDeleteRequest {
	r.destinationZone = &destinationZone
	return r
}

func (r ApiApiRgwMultisiteSyncFlowFlowIdFlowTypeGroupIdDeleteRequest) Zones(zones string) ApiApiRgwMultisiteSyncFlowFlowIdFlowTypeGroupIdDeleteRequest {
	r.zones = &zones
	return r
}

func (r ApiApiRgwMultisiteSyncFlowFlowIdFlowTypeGroupIdDeleteRequest) BucketName(bucketName string) ApiApiRgwMultisiteSyncFlowFlowIdFlowTypeGroupIdDeleteRequest {
	r.bucketName = &bucketName
	return r
}

func (r ApiApiRgwMultisiteSyncFlowFlowIdFlowTypeGroupIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiRgwMultisiteSyncFlowFlowIdFlowTypeGroupIdDeleteExecute(r)
}

/*
ApiRgwMultisiteSyncFlowFlowIdFlowTypeGroupIdDelete Remove the sync flow

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param flowId
 @param flowType
 @param groupId
 @return ApiApiRgwMultisiteSyncFlowFlowIdFlowTypeGroupIdDeleteRequest
*/
func (a *RgwMultisiteAPIService) ApiRgwMultisiteSyncFlowFlowIdFlowTypeGroupIdDelete(ctx context.Context, flowId string, flowType string, groupId string) ApiApiRgwMultisiteSyncFlowFlowIdFlowTypeGroupIdDeleteRequest {
	return ApiApiRgwMultisiteSyncFlowFlowIdFlowTypeGroupIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		flowId: flowId,
		flowType: flowType,
		groupId: groupId,
	}
}

// Execute executes the request
func (a *RgwMultisiteAPIService) ApiRgwMultisiteSyncFlowFlowIdFlowTypeGroupIdDeleteExecute(r ApiApiRgwMultisiteSyncFlowFlowIdFlowTypeGroupIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RgwMultisiteAPIService.ApiRgwMultisiteSyncFlowFlowIdFlowTypeGroupIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/rgw/multisite/sync-flow/{flow_id}/{flow_type}/{group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"flow_id"+"}", url.PathEscape(parameterValueToString(r.flowId, "flowId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"flow_type"+"}", url.PathEscape(parameterValueToString(r.flowType, "flowType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"group_id"+"}", url.PathEscape(parameterValueToString(r.groupId, "groupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.sourceZone != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "source_zone", r.sourceZone, "form", "")
	}
	if r.destinationZone != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "destination_zone", r.destinationZone, "form", "")
	}
	if r.zones != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "zones", r.zones, "form", "")
	}
	if r.bucketName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bucket_name", r.bucketName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiRgwMultisiteSyncFlowPutRequest struct {
	ctx context.Context
	ApiService *RgwMultisiteAPIService
	apiRgwMultisiteSyncFlowPutRequest *ApiRgwMultisiteSyncFlowPutRequest
}

func (r ApiApiRgwMultisiteSyncFlowPutRequest) ApiRgwMultisiteSyncFlowPutRequest(apiRgwMultisiteSyncFlowPutRequest ApiRgwMultisiteSyncFlowPutRequest) ApiApiRgwMultisiteSyncFlowPutRequest {
	r.apiRgwMultisiteSyncFlowPutRequest = &apiRgwMultisiteSyncFlowPutRequest
	return r
}

func (r ApiApiRgwMultisiteSyncFlowPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiRgwMultisiteSyncFlowPutExecute(r)
}

/*
ApiRgwMultisiteSyncFlowPut Create or update the sync flow

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiRgwMultisiteSyncFlowPutRequest
*/
func (a *RgwMultisiteAPIService) ApiRgwMultisiteSyncFlowPut(ctx context.Context) ApiApiRgwMultisiteSyncFlowPutRequest {
	return ApiApiRgwMultisiteSyncFlowPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *RgwMultisiteAPIService) ApiRgwMultisiteSyncFlowPutExecute(r ApiApiRgwMultisiteSyncFlowPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RgwMultisiteAPIService.ApiRgwMultisiteSyncFlowPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/rgw/multisite/sync-flow"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiRgwMultisiteSyncFlowPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiRgwMultisiteSyncPipeGroupIdPipeIdDeleteRequest struct {
	ctx context.Context
	ApiService *RgwMultisiteAPIService
	groupId string
	pipeId string
	sourceZones *string
	destinationZones *string
	bucketName *string
}

func (r ApiApiRgwMultisiteSyncPipeGroupIdPipeIdDeleteRequest) SourceZones(sourceZones string) ApiApiRgwMultisiteSyncPipeGroupIdPipeIdDeleteRequest {
	r.sourceZones = &sourceZones
	return r
}

func (r ApiApiRgwMultisiteSyncPipeGroupIdPipeIdDeleteRequest) DestinationZones(destinationZones string) ApiApiRgwMultisiteSyncPipeGroupIdPipeIdDeleteRequest {
	r.destinationZones = &destinationZones
	return r
}

func (r ApiApiRgwMultisiteSyncPipeGroupIdPipeIdDeleteRequest) BucketName(bucketName string) ApiApiRgwMultisiteSyncPipeGroupIdPipeIdDeleteRequest {
	r.bucketName = &bucketName
	return r
}

func (r ApiApiRgwMultisiteSyncPipeGroupIdPipeIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiRgwMultisiteSyncPipeGroupIdPipeIdDeleteExecute(r)
}

/*
ApiRgwMultisiteSyncPipeGroupIdPipeIdDelete Remove the sync pipe

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId
 @param pipeId
 @return ApiApiRgwMultisiteSyncPipeGroupIdPipeIdDeleteRequest
*/
func (a *RgwMultisiteAPIService) ApiRgwMultisiteSyncPipeGroupIdPipeIdDelete(ctx context.Context, groupId string, pipeId string) ApiApiRgwMultisiteSyncPipeGroupIdPipeIdDeleteRequest {
	return ApiApiRgwMultisiteSyncPipeGroupIdPipeIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		pipeId: pipeId,
	}
}

// Execute executes the request
func (a *RgwMultisiteAPIService) ApiRgwMultisiteSyncPipeGroupIdPipeIdDeleteExecute(r ApiApiRgwMultisiteSyncPipeGroupIdPipeIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RgwMultisiteAPIService.ApiRgwMultisiteSyncPipeGroupIdPipeIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/rgw/multisite/sync-pipe/{group_id}/{pipe_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group_id"+"}", url.PathEscape(parameterValueToString(r.groupId, "groupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"pipe_id"+"}", url.PathEscape(parameterValueToString(r.pipeId, "pipeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.sourceZones != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "source_zones", r.sourceZones, "form", "")
	}
	if r.destinationZones != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "destination_zones", r.destinationZones, "form", "")
	}
	if r.bucketName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bucket_name", r.bucketName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiRgwMultisiteSyncPipePutRequest struct {
	ctx context.Context
	ApiService *RgwMultisiteAPIService
	apiRgwMultisiteSyncPipePutRequest *ApiRgwMultisiteSyncPipePutRequest
}

func (r ApiApiRgwMultisiteSyncPipePutRequest) ApiRgwMultisiteSyncPipePutRequest(apiRgwMultisiteSyncPipePutRequest ApiRgwMultisiteSyncPipePutRequest) ApiApiRgwMultisiteSyncPipePutRequest {
	r.apiRgwMultisiteSyncPipePutRequest = &apiRgwMultisiteSyncPipePutRequest
	return r
}

func (r ApiApiRgwMultisiteSyncPipePutRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiRgwMultisiteSyncPipePutExecute(r)
}

/*
ApiRgwMultisiteSyncPipePut Create or update the sync pipe

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiRgwMultisiteSyncPipePutRequest
*/
func (a *RgwMultisiteAPIService) ApiRgwMultisiteSyncPipePut(ctx context.Context) ApiApiRgwMultisiteSyncPipePutRequest {
	return ApiApiRgwMultisiteSyncPipePutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *RgwMultisiteAPIService) ApiRgwMultisiteSyncPipePutExecute(r ApiApiRgwMultisiteSyncPipePutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RgwMultisiteAPIService.ApiRgwMultisiteSyncPipePut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/rgw/multisite/sync-pipe"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiRgwMultisiteSyncPipePutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiRgwMultisiteSyncPolicyGetRequest struct {
	ctx context.Context
	ApiService *RgwMultisiteAPIService
	bucketName *string
	zonegroupName *string
	allPolicy *string
}

func (r ApiApiRgwMultisiteSyncPolicyGetRequest) BucketName(bucketName string) ApiApiRgwMultisiteSyncPolicyGetRequest {
	r.bucketName = &bucketName
	return r
}

func (r ApiApiRgwMultisiteSyncPolicyGetRequest) ZonegroupName(zonegroupName string) ApiApiRgwMultisiteSyncPolicyGetRequest {
	r.zonegroupName = &zonegroupName
	return r
}

func (r ApiApiRgwMultisiteSyncPolicyGetRequest) AllPolicy(allPolicy string) ApiApiRgwMultisiteSyncPolicyGetRequest {
	r.allPolicy = &allPolicy
	return r
}

func (r ApiApiRgwMultisiteSyncPolicyGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiRgwMultisiteSyncPolicyGetExecute(r)
}

/*
ApiRgwMultisiteSyncPolicyGet Get the sync policy

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiRgwMultisiteSyncPolicyGetRequest
*/
func (a *RgwMultisiteAPIService) ApiRgwMultisiteSyncPolicyGet(ctx context.Context) ApiApiRgwMultisiteSyncPolicyGetRequest {
	return ApiApiRgwMultisiteSyncPolicyGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *RgwMultisiteAPIService) ApiRgwMultisiteSyncPolicyGetExecute(r ApiApiRgwMultisiteSyncPolicyGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RgwMultisiteAPIService.ApiRgwMultisiteSyncPolicyGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/rgw/multisite/sync-policy"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.bucketName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bucket_name", r.bucketName, "form", "")
	}
	if r.zonegroupName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "zonegroup_name", r.zonegroupName, "form", "")
	}
	if r.allPolicy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "all_policy", r.allPolicy, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiRgwMultisiteSyncPolicyGroupGroupIdDeleteRequest struct {
	ctx context.Context
	ApiService *RgwMultisiteAPIService
	groupId string
	bucketName *string
}

func (r ApiApiRgwMultisiteSyncPolicyGroupGroupIdDeleteRequest) BucketName(bucketName string) ApiApiRgwMultisiteSyncPolicyGroupGroupIdDeleteRequest {
	r.bucketName = &bucketName
	return r
}

func (r ApiApiRgwMultisiteSyncPolicyGroupGroupIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiRgwMultisiteSyncPolicyGroupGroupIdDeleteExecute(r)
}

/*
ApiRgwMultisiteSyncPolicyGroupGroupIdDelete Remove the sync policy group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId
 @return ApiApiRgwMultisiteSyncPolicyGroupGroupIdDeleteRequest
*/
func (a *RgwMultisiteAPIService) ApiRgwMultisiteSyncPolicyGroupGroupIdDelete(ctx context.Context, groupId string) ApiApiRgwMultisiteSyncPolicyGroupGroupIdDeleteRequest {
	return ApiApiRgwMultisiteSyncPolicyGroupGroupIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
	}
}

// Execute executes the request
func (a *RgwMultisiteAPIService) ApiRgwMultisiteSyncPolicyGroupGroupIdDeleteExecute(r ApiApiRgwMultisiteSyncPolicyGroupGroupIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RgwMultisiteAPIService.ApiRgwMultisiteSyncPolicyGroupGroupIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/rgw/multisite/sync-policy-group/{group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group_id"+"}", url.PathEscape(parameterValueToString(r.groupId, "groupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.bucketName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bucket_name", r.bucketName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiRgwMultisiteSyncPolicyGroupGroupIdGetRequest struct {
	ctx context.Context
	ApiService *RgwMultisiteAPIService
	groupId string
	bucketName *string
}

func (r ApiApiRgwMultisiteSyncPolicyGroupGroupIdGetRequest) BucketName(bucketName string) ApiApiRgwMultisiteSyncPolicyGroupGroupIdGetRequest {
	r.bucketName = &bucketName
	return r
}

func (r ApiApiRgwMultisiteSyncPolicyGroupGroupIdGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiRgwMultisiteSyncPolicyGroupGroupIdGetExecute(r)
}

/*
ApiRgwMultisiteSyncPolicyGroupGroupIdGet Get the sync policy group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId
 @return ApiApiRgwMultisiteSyncPolicyGroupGroupIdGetRequest
*/
func (a *RgwMultisiteAPIService) ApiRgwMultisiteSyncPolicyGroupGroupIdGet(ctx context.Context, groupId string) ApiApiRgwMultisiteSyncPolicyGroupGroupIdGetRequest {
	return ApiApiRgwMultisiteSyncPolicyGroupGroupIdGetRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
	}
}

// Execute executes the request
func (a *RgwMultisiteAPIService) ApiRgwMultisiteSyncPolicyGroupGroupIdGetExecute(r ApiApiRgwMultisiteSyncPolicyGroupGroupIdGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RgwMultisiteAPIService.ApiRgwMultisiteSyncPolicyGroupGroupIdGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/rgw/multisite/sync-policy-group/{group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group_id"+"}", url.PathEscape(parameterValueToString(r.groupId, "groupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.bucketName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bucket_name", r.bucketName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiRgwMultisiteSyncPolicyGroupPostRequest struct {
	ctx context.Context
	ApiService *RgwMultisiteAPIService
	apiRgwMultisiteSyncPolicyGroupPutRequest *ApiRgwMultisiteSyncPolicyGroupPutRequest
}

func (r ApiApiRgwMultisiteSyncPolicyGroupPostRequest) ApiRgwMultisiteSyncPolicyGroupPutRequest(apiRgwMultisiteSyncPolicyGroupPutRequest ApiRgwMultisiteSyncPolicyGroupPutRequest) ApiApiRgwMultisiteSyncPolicyGroupPostRequest {
	r.apiRgwMultisiteSyncPolicyGroupPutRequest = &apiRgwMultisiteSyncPolicyGroupPutRequest
	return r
}

func (r ApiApiRgwMultisiteSyncPolicyGroupPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiRgwMultisiteSyncPolicyGroupPostExecute(r)
}

/*
ApiRgwMultisiteSyncPolicyGroupPost Create the sync policy group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiRgwMultisiteSyncPolicyGroupPostRequest
*/
func (a *RgwMultisiteAPIService) ApiRgwMultisiteSyncPolicyGroupPost(ctx context.Context) ApiApiRgwMultisiteSyncPolicyGroupPostRequest {
	return ApiApiRgwMultisiteSyncPolicyGroupPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *RgwMultisiteAPIService) ApiRgwMultisiteSyncPolicyGroupPostExecute(r ApiApiRgwMultisiteSyncPolicyGroupPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RgwMultisiteAPIService.ApiRgwMultisiteSyncPolicyGroupPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/rgw/multisite/sync-policy-group"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiRgwMultisiteSyncPolicyGroupPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiRgwMultisiteSyncPolicyGroupPutRequest struct {
	ctx context.Context
	ApiService *RgwMultisiteAPIService
	apiRgwMultisiteSyncPolicyGroupPutRequest *ApiRgwMultisiteSyncPolicyGroupPutRequest
}

func (r ApiApiRgwMultisiteSyncPolicyGroupPutRequest) ApiRgwMultisiteSyncPolicyGroupPutRequest(apiRgwMultisiteSyncPolicyGroupPutRequest ApiRgwMultisiteSyncPolicyGroupPutRequest) ApiApiRgwMultisiteSyncPolicyGroupPutRequest {
	r.apiRgwMultisiteSyncPolicyGroupPutRequest = &apiRgwMultisiteSyncPolicyGroupPutRequest
	return r
}

func (r ApiApiRgwMultisiteSyncPolicyGroupPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiRgwMultisiteSyncPolicyGroupPutExecute(r)
}

/*
ApiRgwMultisiteSyncPolicyGroupPut Update the sync policy group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiRgwMultisiteSyncPolicyGroupPutRequest
*/
func (a *RgwMultisiteAPIService) ApiRgwMultisiteSyncPolicyGroupPut(ctx context.Context) ApiApiRgwMultisiteSyncPolicyGroupPutRequest {
	return ApiApiRgwMultisiteSyncPolicyGroupPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *RgwMultisiteAPIService) ApiRgwMultisiteSyncPolicyGroupPutExecute(r ApiApiRgwMultisiteSyncPolicyGroupPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RgwMultisiteAPIService.ApiRgwMultisiteSyncPolicyGroupPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/rgw/multisite/sync-policy-group"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiRgwMultisiteSyncPolicyGroupPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiRgwMultisiteSyncStatusGetRequest struct {
	ctx context.Context
	ApiService *RgwMultisiteAPIService
	daemonName *string
}

func (r ApiApiRgwMultisiteSyncStatusGetRequest) DaemonName(daemonName string) ApiApiRgwMultisiteSyncStatusGetRequest {
	r.daemonName = &daemonName
	return r
}

func (r ApiApiRgwMultisiteSyncStatusGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiRgwMultisiteSyncStatusGetExecute(r)
}

/*
ApiRgwMultisiteSyncStatusGet Get the sync status

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiRgwMultisiteSyncStatusGetRequest
*/
func (a *RgwMultisiteAPIService) ApiRgwMultisiteSyncStatusGet(ctx context.Context) ApiApiRgwMultisiteSyncStatusGetRequest {
	return ApiApiRgwMultisiteSyncStatusGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *RgwMultisiteAPIService) ApiRgwMultisiteSyncStatusGetExecute(r ApiApiRgwMultisiteSyncStatusGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RgwMultisiteAPIService.ApiRgwMultisiteSyncStatusGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/rgw/multisite/sync_status"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.daemonName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "daemon_name", r.daemonName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
