/*
Ceph REST API

This is the official Ceph REST API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ceph

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// RbdMirroringPoolPeerAPIService RbdMirroringPoolPeerAPI service
type RbdMirroringPoolPeerAPIService service

type ApiApiBlockMirroringPoolPoolNamePeerGetRequest struct {
	ctx context.Context
	ApiService *RbdMirroringPoolPeerAPIService
	poolName string
}

func (r ApiApiBlockMirroringPoolPoolNamePeerGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiBlockMirroringPoolPoolNamePeerGetExecute(r)
}

/*
ApiBlockMirroringPoolPoolNamePeerGet Method for ApiBlockMirroringPoolPoolNamePeerGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param poolName
 @return ApiApiBlockMirroringPoolPoolNamePeerGetRequest
*/
func (a *RbdMirroringPoolPeerAPIService) ApiBlockMirroringPoolPoolNamePeerGet(ctx context.Context, poolName string) ApiApiBlockMirroringPoolPoolNamePeerGetRequest {
	return ApiApiBlockMirroringPoolPoolNamePeerGetRequest{
		ApiService: a,
		ctx: ctx,
		poolName: poolName,
	}
}

// Execute executes the request
func (a *RbdMirroringPoolPeerAPIService) ApiBlockMirroringPoolPoolNamePeerGetExecute(r ApiApiBlockMirroringPoolPoolNamePeerGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbdMirroringPoolPeerAPIService.ApiBlockMirroringPoolPoolNamePeerGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/block/mirroring/pool/{pool_name}/peer"
	localVarPath = strings.Replace(localVarPath, "{"+"pool_name"+"}", url.PathEscape(parameterValueToString(r.poolName, "poolName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiBlockMirroringPoolPoolNamePeerPeerUuidDeleteRequest struct {
	ctx context.Context
	ApiService *RbdMirroringPoolPeerAPIService
	poolName string
	peerUuid string
}

func (r ApiApiBlockMirroringPoolPoolNamePeerPeerUuidDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiBlockMirroringPoolPoolNamePeerPeerUuidDeleteExecute(r)
}

/*
ApiBlockMirroringPoolPoolNamePeerPeerUuidDelete Method for ApiBlockMirroringPoolPoolNamePeerPeerUuidDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param poolName
 @param peerUuid
 @return ApiApiBlockMirroringPoolPoolNamePeerPeerUuidDeleteRequest
*/
func (a *RbdMirroringPoolPeerAPIService) ApiBlockMirroringPoolPoolNamePeerPeerUuidDelete(ctx context.Context, poolName string, peerUuid string) ApiApiBlockMirroringPoolPoolNamePeerPeerUuidDeleteRequest {
	return ApiApiBlockMirroringPoolPoolNamePeerPeerUuidDeleteRequest{
		ApiService: a,
		ctx: ctx,
		poolName: poolName,
		peerUuid: peerUuid,
	}
}

// Execute executes the request
func (a *RbdMirroringPoolPeerAPIService) ApiBlockMirroringPoolPoolNamePeerPeerUuidDeleteExecute(r ApiApiBlockMirroringPoolPoolNamePeerPeerUuidDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbdMirroringPoolPeerAPIService.ApiBlockMirroringPoolPoolNamePeerPeerUuidDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/block/mirroring/pool/{pool_name}/peer/{peer_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"pool_name"+"}", url.PathEscape(parameterValueToString(r.poolName, "poolName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"peer_uuid"+"}", url.PathEscape(parameterValueToString(r.peerUuid, "peerUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiBlockMirroringPoolPoolNamePeerPeerUuidGetRequest struct {
	ctx context.Context
	ApiService *RbdMirroringPoolPeerAPIService
	poolName string
	peerUuid string
}

func (r ApiApiBlockMirroringPoolPoolNamePeerPeerUuidGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiBlockMirroringPoolPoolNamePeerPeerUuidGetExecute(r)
}

/*
ApiBlockMirroringPoolPoolNamePeerPeerUuidGet Method for ApiBlockMirroringPoolPoolNamePeerPeerUuidGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param poolName
 @param peerUuid
 @return ApiApiBlockMirroringPoolPoolNamePeerPeerUuidGetRequest
*/
func (a *RbdMirroringPoolPeerAPIService) ApiBlockMirroringPoolPoolNamePeerPeerUuidGet(ctx context.Context, poolName string, peerUuid string) ApiApiBlockMirroringPoolPoolNamePeerPeerUuidGetRequest {
	return ApiApiBlockMirroringPoolPoolNamePeerPeerUuidGetRequest{
		ApiService: a,
		ctx: ctx,
		poolName: poolName,
		peerUuid: peerUuid,
	}
}

// Execute executes the request
func (a *RbdMirroringPoolPeerAPIService) ApiBlockMirroringPoolPoolNamePeerPeerUuidGetExecute(r ApiApiBlockMirroringPoolPoolNamePeerPeerUuidGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbdMirroringPoolPeerAPIService.ApiBlockMirroringPoolPoolNamePeerPeerUuidGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/block/mirroring/pool/{pool_name}/peer/{peer_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"pool_name"+"}", url.PathEscape(parameterValueToString(r.poolName, "poolName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"peer_uuid"+"}", url.PathEscape(parameterValueToString(r.peerUuid, "peerUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiBlockMirroringPoolPoolNamePeerPeerUuidPutRequest struct {
	ctx context.Context
	ApiService *RbdMirroringPoolPeerAPIService
	poolName string
	peerUuid string
	apiBlockMirroringPoolPoolNamePeerPeerUuidPutRequest *ApiBlockMirroringPoolPoolNamePeerPeerUuidPutRequest
}

func (r ApiApiBlockMirroringPoolPoolNamePeerPeerUuidPutRequest) ApiBlockMirroringPoolPoolNamePeerPeerUuidPutRequest(apiBlockMirroringPoolPoolNamePeerPeerUuidPutRequest ApiBlockMirroringPoolPoolNamePeerPeerUuidPutRequest) ApiApiBlockMirroringPoolPoolNamePeerPeerUuidPutRequest {
	r.apiBlockMirroringPoolPoolNamePeerPeerUuidPutRequest = &apiBlockMirroringPoolPoolNamePeerPeerUuidPutRequest
	return r
}

func (r ApiApiBlockMirroringPoolPoolNamePeerPeerUuidPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiBlockMirroringPoolPoolNamePeerPeerUuidPutExecute(r)
}

/*
ApiBlockMirroringPoolPoolNamePeerPeerUuidPut Method for ApiBlockMirroringPoolPoolNamePeerPeerUuidPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param poolName
 @param peerUuid
 @return ApiApiBlockMirroringPoolPoolNamePeerPeerUuidPutRequest
*/
func (a *RbdMirroringPoolPeerAPIService) ApiBlockMirroringPoolPoolNamePeerPeerUuidPut(ctx context.Context, poolName string, peerUuid string) ApiApiBlockMirroringPoolPoolNamePeerPeerUuidPutRequest {
	return ApiApiBlockMirroringPoolPoolNamePeerPeerUuidPutRequest{
		ApiService: a,
		ctx: ctx,
		poolName: poolName,
		peerUuid: peerUuid,
	}
}

// Execute executes the request
func (a *RbdMirroringPoolPeerAPIService) ApiBlockMirroringPoolPoolNamePeerPeerUuidPutExecute(r ApiApiBlockMirroringPoolPoolNamePeerPeerUuidPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbdMirroringPoolPeerAPIService.ApiBlockMirroringPoolPoolNamePeerPeerUuidPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/block/mirroring/pool/{pool_name}/peer/{peer_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"pool_name"+"}", url.PathEscape(parameterValueToString(r.poolName, "poolName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"peer_uuid"+"}", url.PathEscape(parameterValueToString(r.peerUuid, "peerUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiBlockMirroringPoolPoolNamePeerPeerUuidPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiBlockMirroringPoolPoolNamePeerPostRequest struct {
	ctx context.Context
	ApiService *RbdMirroringPoolPeerAPIService
	poolName string
	apiBlockMirroringPoolPoolNamePeerPostRequest *ApiBlockMirroringPoolPoolNamePeerPostRequest
}

func (r ApiApiBlockMirroringPoolPoolNamePeerPostRequest) ApiBlockMirroringPoolPoolNamePeerPostRequest(apiBlockMirroringPoolPoolNamePeerPostRequest ApiBlockMirroringPoolPoolNamePeerPostRequest) ApiApiBlockMirroringPoolPoolNamePeerPostRequest {
	r.apiBlockMirroringPoolPoolNamePeerPostRequest = &apiBlockMirroringPoolPoolNamePeerPostRequest
	return r
}

func (r ApiApiBlockMirroringPoolPoolNamePeerPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiBlockMirroringPoolPoolNamePeerPostExecute(r)
}

/*
ApiBlockMirroringPoolPoolNamePeerPost Method for ApiBlockMirroringPoolPoolNamePeerPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param poolName
 @return ApiApiBlockMirroringPoolPoolNamePeerPostRequest
*/
func (a *RbdMirroringPoolPeerAPIService) ApiBlockMirroringPoolPoolNamePeerPost(ctx context.Context, poolName string) ApiApiBlockMirroringPoolPoolNamePeerPostRequest {
	return ApiApiBlockMirroringPoolPoolNamePeerPostRequest{
		ApiService: a,
		ctx: ctx,
		poolName: poolName,
	}
}

// Execute executes the request
func (a *RbdMirroringPoolPeerAPIService) ApiBlockMirroringPoolPoolNamePeerPostExecute(r ApiApiBlockMirroringPoolPoolNamePeerPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbdMirroringPoolPeerAPIService.ApiBlockMirroringPoolPoolNamePeerPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/block/mirroring/pool/{pool_name}/peer"
	localVarPath = strings.Replace(localVarPath, "{"+"pool_name"+"}", url.PathEscape(parameterValueToString(r.poolName, "poolName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiBlockMirroringPoolPoolNamePeerPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
