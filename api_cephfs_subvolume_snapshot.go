/*
Ceph REST API

This is the official Ceph REST API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ceph

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// CephfsSubvolumeSnapshotAPIService CephfsSubvolumeSnapshotAPI service
type CephfsSubvolumeSnapshotAPIService service

type ApiApiCephfsSubvolumeSnapshotPostRequest struct {
	ctx context.Context
	ApiService *CephfsSubvolumeSnapshotAPIService
	apiCephfsSubvolumeSnapshotPostRequest *ApiCephfsSubvolumeSnapshotPostRequest
}

func (r ApiApiCephfsSubvolumeSnapshotPostRequest) ApiCephfsSubvolumeSnapshotPostRequest(apiCephfsSubvolumeSnapshotPostRequest ApiCephfsSubvolumeSnapshotPostRequest) ApiApiCephfsSubvolumeSnapshotPostRequest {
	r.apiCephfsSubvolumeSnapshotPostRequest = &apiCephfsSubvolumeSnapshotPostRequest
	return r
}

func (r ApiApiCephfsSubvolumeSnapshotPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiCephfsSubvolumeSnapshotPostExecute(r)
}

/*
ApiCephfsSubvolumeSnapshotPost Method for ApiCephfsSubvolumeSnapshotPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiCephfsSubvolumeSnapshotPostRequest
*/
func (a *CephfsSubvolumeSnapshotAPIService) ApiCephfsSubvolumeSnapshotPost(ctx context.Context) ApiApiCephfsSubvolumeSnapshotPostRequest {
	return ApiApiCephfsSubvolumeSnapshotPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CephfsSubvolumeSnapshotAPIService) ApiCephfsSubvolumeSnapshotPostExecute(r ApiApiCephfsSubvolumeSnapshotPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CephfsSubvolumeSnapshotAPIService.ApiCephfsSubvolumeSnapshotPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/cephfs/subvolume/snapshot"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiCephfsSubvolumeSnapshotPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiCephfsSubvolumeSnapshotVolNameSubvolNameDeleteRequest struct {
	ctx context.Context
	ApiService *CephfsSubvolumeSnapshotAPIService
	volName string
	subvolName string
	snapName *string
	groupName *string
	force *bool
}

func (r ApiApiCephfsSubvolumeSnapshotVolNameSubvolNameDeleteRequest) SnapName(snapName string) ApiApiCephfsSubvolumeSnapshotVolNameSubvolNameDeleteRequest {
	r.snapName = &snapName
	return r
}

func (r ApiApiCephfsSubvolumeSnapshotVolNameSubvolNameDeleteRequest) GroupName(groupName string) ApiApiCephfsSubvolumeSnapshotVolNameSubvolNameDeleteRequest {
	r.groupName = &groupName
	return r
}

func (r ApiApiCephfsSubvolumeSnapshotVolNameSubvolNameDeleteRequest) Force(force bool) ApiApiCephfsSubvolumeSnapshotVolNameSubvolNameDeleteRequest {
	r.force = &force
	return r
}

func (r ApiApiCephfsSubvolumeSnapshotVolNameSubvolNameDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiCephfsSubvolumeSnapshotVolNameSubvolNameDeleteExecute(r)
}

/*
ApiCephfsSubvolumeSnapshotVolNameSubvolNameDelete Method for ApiCephfsSubvolumeSnapshotVolNameSubvolNameDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param volName
 @param subvolName
 @return ApiApiCephfsSubvolumeSnapshotVolNameSubvolNameDeleteRequest
*/
func (a *CephfsSubvolumeSnapshotAPIService) ApiCephfsSubvolumeSnapshotVolNameSubvolNameDelete(ctx context.Context, volName string, subvolName string) ApiApiCephfsSubvolumeSnapshotVolNameSubvolNameDeleteRequest {
	return ApiApiCephfsSubvolumeSnapshotVolNameSubvolNameDeleteRequest{
		ApiService: a,
		ctx: ctx,
		volName: volName,
		subvolName: subvolName,
	}
}

// Execute executes the request
func (a *CephfsSubvolumeSnapshotAPIService) ApiCephfsSubvolumeSnapshotVolNameSubvolNameDeleteExecute(r ApiApiCephfsSubvolumeSnapshotVolNameSubvolNameDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CephfsSubvolumeSnapshotAPIService.ApiCephfsSubvolumeSnapshotVolNameSubvolNameDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/cephfs/subvolume/snapshot/{vol_name}/{subvol_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"vol_name"+"}", url.PathEscape(parameterValueToString(r.volName, "volName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subvol_name"+"}", url.PathEscape(parameterValueToString(r.subvolName, "subvolName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.snapName == nil {
		return nil, reportError("snapName is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "snap_name", r.snapName, "form", "")
	if r.groupName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "group_name", r.groupName, "form", "")
	}
	if r.force != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "force", r.force, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiCephfsSubvolumeSnapshotVolNameSubvolNameGetRequest struct {
	ctx context.Context
	ApiService *CephfsSubvolumeSnapshotAPIService
	volName string
	subvolName string
	groupName *string
	info *bool
}

func (r ApiApiCephfsSubvolumeSnapshotVolNameSubvolNameGetRequest) GroupName(groupName string) ApiApiCephfsSubvolumeSnapshotVolNameSubvolNameGetRequest {
	r.groupName = &groupName
	return r
}

func (r ApiApiCephfsSubvolumeSnapshotVolNameSubvolNameGetRequest) Info(info bool) ApiApiCephfsSubvolumeSnapshotVolNameSubvolNameGetRequest {
	r.info = &info
	return r
}

func (r ApiApiCephfsSubvolumeSnapshotVolNameSubvolNameGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiCephfsSubvolumeSnapshotVolNameSubvolNameGetExecute(r)
}

/*
ApiCephfsSubvolumeSnapshotVolNameSubvolNameGet Method for ApiCephfsSubvolumeSnapshotVolNameSubvolNameGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param volName
 @param subvolName
 @return ApiApiCephfsSubvolumeSnapshotVolNameSubvolNameGetRequest
*/
func (a *CephfsSubvolumeSnapshotAPIService) ApiCephfsSubvolumeSnapshotVolNameSubvolNameGet(ctx context.Context, volName string, subvolName string) ApiApiCephfsSubvolumeSnapshotVolNameSubvolNameGetRequest {
	return ApiApiCephfsSubvolumeSnapshotVolNameSubvolNameGetRequest{
		ApiService: a,
		ctx: ctx,
		volName: volName,
		subvolName: subvolName,
	}
}

// Execute executes the request
func (a *CephfsSubvolumeSnapshotAPIService) ApiCephfsSubvolumeSnapshotVolNameSubvolNameGetExecute(r ApiApiCephfsSubvolumeSnapshotVolNameSubvolNameGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CephfsSubvolumeSnapshotAPIService.ApiCephfsSubvolumeSnapshotVolNameSubvolNameGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/cephfs/subvolume/snapshot/{vol_name}/{subvol_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"vol_name"+"}", url.PathEscape(parameterValueToString(r.volName, "volName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subvol_name"+"}", url.PathEscape(parameterValueToString(r.subvolName, "subvolName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.groupName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "group_name", r.groupName, "form", "")
	}
	if r.info != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "info", r.info, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiCephfsSubvolumeSnapshotVolNameSubvolNameInfoGetRequest struct {
	ctx context.Context
	ApiService *CephfsSubvolumeSnapshotAPIService
	volName string
	subvolName string
	snapName *string
	groupName *string
}

func (r ApiApiCephfsSubvolumeSnapshotVolNameSubvolNameInfoGetRequest) SnapName(snapName string) ApiApiCephfsSubvolumeSnapshotVolNameSubvolNameInfoGetRequest {
	r.snapName = &snapName
	return r
}

func (r ApiApiCephfsSubvolumeSnapshotVolNameSubvolNameInfoGetRequest) GroupName(groupName string) ApiApiCephfsSubvolumeSnapshotVolNameSubvolNameInfoGetRequest {
	r.groupName = &groupName
	return r
}

func (r ApiApiCephfsSubvolumeSnapshotVolNameSubvolNameInfoGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiCephfsSubvolumeSnapshotVolNameSubvolNameInfoGetExecute(r)
}

/*
ApiCephfsSubvolumeSnapshotVolNameSubvolNameInfoGet Method for ApiCephfsSubvolumeSnapshotVolNameSubvolNameInfoGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param volName
 @param subvolName
 @return ApiApiCephfsSubvolumeSnapshotVolNameSubvolNameInfoGetRequest
*/
func (a *CephfsSubvolumeSnapshotAPIService) ApiCephfsSubvolumeSnapshotVolNameSubvolNameInfoGet(ctx context.Context, volName string, subvolName string) ApiApiCephfsSubvolumeSnapshotVolNameSubvolNameInfoGetRequest {
	return ApiApiCephfsSubvolumeSnapshotVolNameSubvolNameInfoGetRequest{
		ApiService: a,
		ctx: ctx,
		volName: volName,
		subvolName: subvolName,
	}
}

// Execute executes the request
func (a *CephfsSubvolumeSnapshotAPIService) ApiCephfsSubvolumeSnapshotVolNameSubvolNameInfoGetExecute(r ApiApiCephfsSubvolumeSnapshotVolNameSubvolNameInfoGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CephfsSubvolumeSnapshotAPIService.ApiCephfsSubvolumeSnapshotVolNameSubvolNameInfoGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/cephfs/subvolume/snapshot/{vol_name}/{subvol_name}/info"
	localVarPath = strings.Replace(localVarPath, "{"+"vol_name"+"}", url.PathEscape(parameterValueToString(r.volName, "volName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subvol_name"+"}", url.PathEscape(parameterValueToString(r.subvolName, "subvolName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.snapName == nil {
		return nil, reportError("snapName is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "snap_name", r.snapName, "form", "")
	if r.groupName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "group_name", r.groupName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
