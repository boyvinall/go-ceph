/*
Ceph REST API

This is the official Ceph REST API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ceph

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// PoolAPIService PoolAPI service
type PoolAPIService service

type ApiApiPoolGetRequest struct {
	ctx context.Context
	ApiService *PoolAPIService
	attrs *string
	stats *bool
}

// Pool Attributes
func (r ApiApiPoolGetRequest) Attrs(attrs string) ApiApiPoolGetRequest {
	r.attrs = &attrs
	return r
}

// Pool Stats
func (r ApiApiPoolGetRequest) Stats(stats bool) ApiApiPoolGetRequest {
	r.stats = &stats
	return r
}

func (r ApiApiPoolGetRequest) Execute() ([]ApiPoolGet200ResponseInner, *http.Response, error) {
	return r.ApiService.ApiPoolGetExecute(r)
}

/*
ApiPoolGet Display Pool List

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiPoolGetRequest
*/
func (a *PoolAPIService) ApiPoolGet(ctx context.Context) ApiApiPoolGetRequest {
	return ApiApiPoolGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ApiPoolGet200ResponseInner
func (a *PoolAPIService) ApiPoolGetExecute(r ApiApiPoolGetRequest) ([]ApiPoolGet200ResponseInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ApiPoolGet200ResponseInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PoolAPIService.ApiPoolGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/pool"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.attrs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "attrs", r.attrs, "form", "")
	}
	if r.stats != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stats", r.stats, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiPoolPoolNameConfigurationGetRequest struct {
	ctx context.Context
	ApiService *PoolAPIService
	poolName string
}

func (r ApiApiPoolPoolNameConfigurationGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiPoolPoolNameConfigurationGetExecute(r)
}

/*
ApiPoolPoolNameConfigurationGet Method for ApiPoolPoolNameConfigurationGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param poolName
 @return ApiApiPoolPoolNameConfigurationGetRequest
*/
func (a *PoolAPIService) ApiPoolPoolNameConfigurationGet(ctx context.Context, poolName string) ApiApiPoolPoolNameConfigurationGetRequest {
	return ApiApiPoolPoolNameConfigurationGetRequest{
		ApiService: a,
		ctx: ctx,
		poolName: poolName,
	}
}

// Execute executes the request
func (a *PoolAPIService) ApiPoolPoolNameConfigurationGetExecute(r ApiApiPoolPoolNameConfigurationGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PoolAPIService.ApiPoolPoolNameConfigurationGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/pool/{pool_name}/configuration"
	localVarPath = strings.Replace(localVarPath, "{"+"pool_name"+"}", url.PathEscape(parameterValueToString(r.poolName, "poolName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiPoolPoolNameDeleteRequest struct {
	ctx context.Context
	ApiService *PoolAPIService
	poolName string
}

func (r ApiApiPoolPoolNameDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiPoolPoolNameDeleteExecute(r)
}

/*
ApiPoolPoolNameDelete Method for ApiPoolPoolNameDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param poolName
 @return ApiApiPoolPoolNameDeleteRequest
*/
func (a *PoolAPIService) ApiPoolPoolNameDelete(ctx context.Context, poolName string) ApiApiPoolPoolNameDeleteRequest {
	return ApiApiPoolPoolNameDeleteRequest{
		ApiService: a,
		ctx: ctx,
		poolName: poolName,
	}
}

// Execute executes the request
func (a *PoolAPIService) ApiPoolPoolNameDeleteExecute(r ApiApiPoolPoolNameDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PoolAPIService.ApiPoolPoolNameDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/pool/{pool_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"pool_name"+"}", url.PathEscape(parameterValueToString(r.poolName, "poolName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiPoolPoolNameGetRequest struct {
	ctx context.Context
	ApiService *PoolAPIService
	poolName string
	attrs *string
	stats *bool
}

func (r ApiApiPoolPoolNameGetRequest) Attrs(attrs string) ApiApiPoolPoolNameGetRequest {
	r.attrs = &attrs
	return r
}

func (r ApiApiPoolPoolNameGetRequest) Stats(stats bool) ApiApiPoolPoolNameGetRequest {
	r.stats = &stats
	return r
}

func (r ApiApiPoolPoolNameGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiPoolPoolNameGetExecute(r)
}

/*
ApiPoolPoolNameGet Method for ApiPoolPoolNameGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param poolName
 @return ApiApiPoolPoolNameGetRequest
*/
func (a *PoolAPIService) ApiPoolPoolNameGet(ctx context.Context, poolName string) ApiApiPoolPoolNameGetRequest {
	return ApiApiPoolPoolNameGetRequest{
		ApiService: a,
		ctx: ctx,
		poolName: poolName,
	}
}

// Execute executes the request
func (a *PoolAPIService) ApiPoolPoolNameGetExecute(r ApiApiPoolPoolNameGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PoolAPIService.ApiPoolPoolNameGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/pool/{pool_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"pool_name"+"}", url.PathEscape(parameterValueToString(r.poolName, "poolName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.attrs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "attrs", r.attrs, "form", "")
	}
	if r.stats != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stats", r.stats, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiPoolPoolNamePutRequest struct {
	ctx context.Context
	ApiService *PoolAPIService
	poolName string
	apiPoolPoolNamePutRequest *ApiPoolPoolNamePutRequest
}

func (r ApiApiPoolPoolNamePutRequest) ApiPoolPoolNamePutRequest(apiPoolPoolNamePutRequest ApiPoolPoolNamePutRequest) ApiApiPoolPoolNamePutRequest {
	r.apiPoolPoolNamePutRequest = &apiPoolPoolNamePutRequest
	return r
}

func (r ApiApiPoolPoolNamePutRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiPoolPoolNamePutExecute(r)
}

/*
ApiPoolPoolNamePut Method for ApiPoolPoolNamePut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param poolName
 @return ApiApiPoolPoolNamePutRequest
*/
func (a *PoolAPIService) ApiPoolPoolNamePut(ctx context.Context, poolName string) ApiApiPoolPoolNamePutRequest {
	return ApiApiPoolPoolNamePutRequest{
		ApiService: a,
		ctx: ctx,
		poolName: poolName,
	}
}

// Execute executes the request
func (a *PoolAPIService) ApiPoolPoolNamePutExecute(r ApiApiPoolPoolNamePutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PoolAPIService.ApiPoolPoolNamePut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/pool/{pool_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"pool_name"+"}", url.PathEscape(parameterValueToString(r.poolName, "poolName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiPoolPoolNamePutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiPoolPostRequest struct {
	ctx context.Context
	ApiService *PoolAPIService
	apiPoolPostRequest *ApiPoolPostRequest
}

func (r ApiApiPoolPostRequest) ApiPoolPostRequest(apiPoolPostRequest ApiPoolPostRequest) ApiApiPoolPostRequest {
	r.apiPoolPostRequest = &apiPoolPostRequest
	return r
}

func (r ApiApiPoolPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiPoolPostExecute(r)
}

/*
ApiPoolPost Method for ApiPoolPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiPoolPostRequest
*/
func (a *PoolAPIService) ApiPoolPost(ctx context.Context) ApiApiPoolPostRequest {
	return ApiApiPoolPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *PoolAPIService) ApiPoolPostExecute(r ApiApiPoolPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PoolAPIService.ApiPoolPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/pool"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiPoolPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
