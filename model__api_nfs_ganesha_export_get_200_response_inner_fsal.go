/*
Ceph REST API

This is the official Ceph REST API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ceph

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApiNfsGaneshaExportGet200ResponseInnerFsal type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiNfsGaneshaExportGet200ResponseInnerFsal{}

// ApiNfsGaneshaExportGet200ResponseInnerFsal FSAL configuration
type ApiNfsGaneshaExportGet200ResponseInnerFsal struct {
	// CephFS filesystem name
	FsName *string `json:"fs_name,omitempty"`
	// name of FSAL
	Name string `json:"name"`
	// Name of xattr for security label
	SecLabelXattr *string `json:"sec_label_xattr,omitempty"`
	// User id
	UserId *string `json:"user_id,omitempty"`
}

type _ApiNfsGaneshaExportGet200ResponseInnerFsal ApiNfsGaneshaExportGet200ResponseInnerFsal

// NewApiNfsGaneshaExportGet200ResponseInnerFsal instantiates a new ApiNfsGaneshaExportGet200ResponseInnerFsal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiNfsGaneshaExportGet200ResponseInnerFsal(name string) *ApiNfsGaneshaExportGet200ResponseInnerFsal {
	this := ApiNfsGaneshaExportGet200ResponseInnerFsal{}
	this.Name = name
	return &this
}

// NewApiNfsGaneshaExportGet200ResponseInnerFsalWithDefaults instantiates a new ApiNfsGaneshaExportGet200ResponseInnerFsal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiNfsGaneshaExportGet200ResponseInnerFsalWithDefaults() *ApiNfsGaneshaExportGet200ResponseInnerFsal {
	this := ApiNfsGaneshaExportGet200ResponseInnerFsal{}
	return &this
}

// GetFsName returns the FsName field value if set, zero value otherwise.
func (o *ApiNfsGaneshaExportGet200ResponseInnerFsal) GetFsName() string {
	if o == nil || IsNil(o.FsName) {
		var ret string
		return ret
	}
	return *o.FsName
}

// GetFsNameOk returns a tuple with the FsName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiNfsGaneshaExportGet200ResponseInnerFsal) GetFsNameOk() (*string, bool) {
	if o == nil || IsNil(o.FsName) {
		return nil, false
	}
	return o.FsName, true
}

// HasFsName returns a boolean if a field has been set.
func (o *ApiNfsGaneshaExportGet200ResponseInnerFsal) HasFsName() bool {
	if o != nil && !IsNil(o.FsName) {
		return true
	}

	return false
}

// SetFsName gets a reference to the given string and assigns it to the FsName field.
func (o *ApiNfsGaneshaExportGet200ResponseInnerFsal) SetFsName(v string) {
	o.FsName = &v
}

// GetName returns the Name field value
func (o *ApiNfsGaneshaExportGet200ResponseInnerFsal) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ApiNfsGaneshaExportGet200ResponseInnerFsal) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ApiNfsGaneshaExportGet200ResponseInnerFsal) SetName(v string) {
	o.Name = v
}

// GetSecLabelXattr returns the SecLabelXattr field value if set, zero value otherwise.
func (o *ApiNfsGaneshaExportGet200ResponseInnerFsal) GetSecLabelXattr() string {
	if o == nil || IsNil(o.SecLabelXattr) {
		var ret string
		return ret
	}
	return *o.SecLabelXattr
}

// GetSecLabelXattrOk returns a tuple with the SecLabelXattr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiNfsGaneshaExportGet200ResponseInnerFsal) GetSecLabelXattrOk() (*string, bool) {
	if o == nil || IsNil(o.SecLabelXattr) {
		return nil, false
	}
	return o.SecLabelXattr, true
}

// HasSecLabelXattr returns a boolean if a field has been set.
func (o *ApiNfsGaneshaExportGet200ResponseInnerFsal) HasSecLabelXattr() bool {
	if o != nil && !IsNil(o.SecLabelXattr) {
		return true
	}

	return false
}

// SetSecLabelXattr gets a reference to the given string and assigns it to the SecLabelXattr field.
func (o *ApiNfsGaneshaExportGet200ResponseInnerFsal) SetSecLabelXattr(v string) {
	o.SecLabelXattr = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *ApiNfsGaneshaExportGet200ResponseInnerFsal) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiNfsGaneshaExportGet200ResponseInnerFsal) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *ApiNfsGaneshaExportGet200ResponseInnerFsal) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *ApiNfsGaneshaExportGet200ResponseInnerFsal) SetUserId(v string) {
	o.UserId = &v
}

func (o ApiNfsGaneshaExportGet200ResponseInnerFsal) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiNfsGaneshaExportGet200ResponseInnerFsal) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FsName) {
		toSerialize["fs_name"] = o.FsName
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.SecLabelXattr) {
		toSerialize["sec_label_xattr"] = o.SecLabelXattr
	}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	return toSerialize, nil
}

func (o *ApiNfsGaneshaExportGet200ResponseInnerFsal) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiNfsGaneshaExportGet200ResponseInnerFsal := _ApiNfsGaneshaExportGet200ResponseInnerFsal{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiNfsGaneshaExportGet200ResponseInnerFsal)

	if err != nil {
		return err
	}

	*o = ApiNfsGaneshaExportGet200ResponseInnerFsal(varApiNfsGaneshaExportGet200ResponseInnerFsal)

	return err
}

type NullableApiNfsGaneshaExportGet200ResponseInnerFsal struct {
	value *ApiNfsGaneshaExportGet200ResponseInnerFsal
	isSet bool
}

func (v NullableApiNfsGaneshaExportGet200ResponseInnerFsal) Get() *ApiNfsGaneshaExportGet200ResponseInnerFsal {
	return v.value
}

func (v *NullableApiNfsGaneshaExportGet200ResponseInnerFsal) Set(val *ApiNfsGaneshaExportGet200ResponseInnerFsal) {
	v.value = val
	v.isSet = true
}

func (v NullableApiNfsGaneshaExportGet200ResponseInnerFsal) IsSet() bool {
	return v.isSet
}

func (v *NullableApiNfsGaneshaExportGet200ResponseInnerFsal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiNfsGaneshaExportGet200ResponseInnerFsal(val *ApiNfsGaneshaExportGet200ResponseInnerFsal) *NullableApiNfsGaneshaExportGet200ResponseInnerFsal {
	return &NullableApiNfsGaneshaExportGet200ResponseInnerFsal{value: val, isSet: true}
}

func (v NullableApiNfsGaneshaExportGet200ResponseInnerFsal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiNfsGaneshaExportGet200ResponseInnerFsal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


