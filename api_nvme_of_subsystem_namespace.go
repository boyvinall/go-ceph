/*
Ceph REST API

This is the official Ceph REST API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ceph

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// NVMeOFSubsystemNamespaceAPIService NVMeOFSubsystemNamespaceAPI service
type NVMeOFSubsystemNamespaceAPIService service

type ApiApiNvmeofSubsystemNqnNamespaceGetRequest struct {
	ctx context.Context
	ApiService *NVMeOFSubsystemNamespaceAPIService
	nqn string
	gwGroup *string
}

// NVMeoF gateway group
func (r ApiApiNvmeofSubsystemNqnNamespaceGetRequest) GwGroup(gwGroup string) ApiApiNvmeofSubsystemNqnNamespaceGetRequest {
	r.gwGroup = &gwGroup
	return r
}

func (r ApiApiNvmeofSubsystemNqnNamespaceGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiNvmeofSubsystemNqnNamespaceGetExecute(r)
}

/*
ApiNvmeofSubsystemNqnNamespaceGet List all NVMeoF namespaces in a subsystem

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param nqn NVMeoF subsystem NQN
 @return ApiApiNvmeofSubsystemNqnNamespaceGetRequest
*/
func (a *NVMeOFSubsystemNamespaceAPIService) ApiNvmeofSubsystemNqnNamespaceGet(ctx context.Context, nqn string) ApiApiNvmeofSubsystemNqnNamespaceGetRequest {
	return ApiApiNvmeofSubsystemNqnNamespaceGetRequest{
		ApiService: a,
		ctx: ctx,
		nqn: nqn,
	}
}

// Execute executes the request
func (a *NVMeOFSubsystemNamespaceAPIService) ApiNvmeofSubsystemNqnNamespaceGetExecute(r ApiApiNvmeofSubsystemNqnNamespaceGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NVMeOFSubsystemNamespaceAPIService.ApiNvmeofSubsystemNqnNamespaceGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/nvmeof/subsystem/{nqn}/namespace"
	localVarPath = strings.Replace(localVarPath, "{"+"nqn"+"}", url.PathEscape(parameterValueToString(r.nqn, "nqn")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.gwGroup != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gw_group", r.gwGroup, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiNvmeofSubsystemNqnNamespaceNsidDeleteRequest struct {
	ctx context.Context
	ApiService *NVMeOFSubsystemNamespaceAPIService
	nqn string
	nsid string
	gwGroup *string
}

// NVMeoF gateway group
func (r ApiApiNvmeofSubsystemNqnNamespaceNsidDeleteRequest) GwGroup(gwGroup string) ApiApiNvmeofSubsystemNqnNamespaceNsidDeleteRequest {
	r.gwGroup = &gwGroup
	return r
}

func (r ApiApiNvmeofSubsystemNqnNamespaceNsidDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiNvmeofSubsystemNqnNamespaceNsidDeleteExecute(r)
}

/*
ApiNvmeofSubsystemNqnNamespaceNsidDelete Delete an existing NVMeoF namespace

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param nqn NVMeoF subsystem NQN
 @param nsid NVMeoF Namespace ID
 @return ApiApiNvmeofSubsystemNqnNamespaceNsidDeleteRequest
*/
func (a *NVMeOFSubsystemNamespaceAPIService) ApiNvmeofSubsystemNqnNamespaceNsidDelete(ctx context.Context, nqn string, nsid string) ApiApiNvmeofSubsystemNqnNamespaceNsidDeleteRequest {
	return ApiApiNvmeofSubsystemNqnNamespaceNsidDeleteRequest{
		ApiService: a,
		ctx: ctx,
		nqn: nqn,
		nsid: nsid,
	}
}

// Execute executes the request
func (a *NVMeOFSubsystemNamespaceAPIService) ApiNvmeofSubsystemNqnNamespaceNsidDeleteExecute(r ApiApiNvmeofSubsystemNqnNamespaceNsidDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NVMeOFSubsystemNamespaceAPIService.ApiNvmeofSubsystemNqnNamespaceNsidDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/nvmeof/subsystem/{nqn}/namespace/{nsid}"
	localVarPath = strings.Replace(localVarPath, "{"+"nqn"+"}", url.PathEscape(parameterValueToString(r.nqn, "nqn")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"nsid"+"}", url.PathEscape(parameterValueToString(r.nsid, "nsid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.gwGroup != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gw_group", r.gwGroup, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiNvmeofSubsystemNqnNamespaceNsidGetRequest struct {
	ctx context.Context
	ApiService *NVMeOFSubsystemNamespaceAPIService
	nqn string
	nsid string
	gwGroup *string
}

// NVMeoF gateway group
func (r ApiApiNvmeofSubsystemNqnNamespaceNsidGetRequest) GwGroup(gwGroup string) ApiApiNvmeofSubsystemNqnNamespaceNsidGetRequest {
	r.gwGroup = &gwGroup
	return r
}

func (r ApiApiNvmeofSubsystemNqnNamespaceNsidGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiNvmeofSubsystemNqnNamespaceNsidGetExecute(r)
}

/*
ApiNvmeofSubsystemNqnNamespaceNsidGet Get info from specified NVMeoF namespace

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param nqn NVMeoF subsystem NQN
 @param nsid NVMeoF Namespace ID
 @return ApiApiNvmeofSubsystemNqnNamespaceNsidGetRequest
*/
func (a *NVMeOFSubsystemNamespaceAPIService) ApiNvmeofSubsystemNqnNamespaceNsidGet(ctx context.Context, nqn string, nsid string) ApiApiNvmeofSubsystemNqnNamespaceNsidGetRequest {
	return ApiApiNvmeofSubsystemNqnNamespaceNsidGetRequest{
		ApiService: a,
		ctx: ctx,
		nqn: nqn,
		nsid: nsid,
	}
}

// Execute executes the request
func (a *NVMeOFSubsystemNamespaceAPIService) ApiNvmeofSubsystemNqnNamespaceNsidGetExecute(r ApiApiNvmeofSubsystemNqnNamespaceNsidGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NVMeOFSubsystemNamespaceAPIService.ApiNvmeofSubsystemNqnNamespaceNsidGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/nvmeof/subsystem/{nqn}/namespace/{nsid}"
	localVarPath = strings.Replace(localVarPath, "{"+"nqn"+"}", url.PathEscape(parameterValueToString(r.nqn, "nqn")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"nsid"+"}", url.PathEscape(parameterValueToString(r.nsid, "nsid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.gwGroup != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gw_group", r.gwGroup, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiNvmeofSubsystemNqnNamespaceNsidIoStatsGetRequest struct {
	ctx context.Context
	ApiService *NVMeOFSubsystemNamespaceAPIService
	nqn string
	nsid string
	gwGroup *string
}

// NVMeoF gateway group
func (r ApiApiNvmeofSubsystemNqnNamespaceNsidIoStatsGetRequest) GwGroup(gwGroup string) ApiApiNvmeofSubsystemNqnNamespaceNsidIoStatsGetRequest {
	r.gwGroup = &gwGroup
	return r
}

func (r ApiApiNvmeofSubsystemNqnNamespaceNsidIoStatsGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiNvmeofSubsystemNqnNamespaceNsidIoStatsGetExecute(r)
}

/*
ApiNvmeofSubsystemNqnNamespaceNsidIoStatsGet Get IO stats from specified NVMeoF namespace

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param nqn NVMeoF subsystem NQN
 @param nsid NVMeoF Namespace ID
 @return ApiApiNvmeofSubsystemNqnNamespaceNsidIoStatsGetRequest
*/
func (a *NVMeOFSubsystemNamespaceAPIService) ApiNvmeofSubsystemNqnNamespaceNsidIoStatsGet(ctx context.Context, nqn string, nsid string) ApiApiNvmeofSubsystemNqnNamespaceNsidIoStatsGetRequest {
	return ApiApiNvmeofSubsystemNqnNamespaceNsidIoStatsGetRequest{
		ApiService: a,
		ctx: ctx,
		nqn: nqn,
		nsid: nsid,
	}
}

// Execute executes the request
func (a *NVMeOFSubsystemNamespaceAPIService) ApiNvmeofSubsystemNqnNamespaceNsidIoStatsGetExecute(r ApiApiNvmeofSubsystemNqnNamespaceNsidIoStatsGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NVMeOFSubsystemNamespaceAPIService.ApiNvmeofSubsystemNqnNamespaceNsidIoStatsGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/nvmeof/subsystem/{nqn}/namespace/{nsid}/io_stats"
	localVarPath = strings.Replace(localVarPath, "{"+"nqn"+"}", url.PathEscape(parameterValueToString(r.nqn, "nqn")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"nsid"+"}", url.PathEscape(parameterValueToString(r.nsid, "nsid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.gwGroup != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gw_group", r.gwGroup, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiNvmeofSubsystemNqnNamespaceNsidPatchRequest struct {
	ctx context.Context
	ApiService *NVMeOFSubsystemNamespaceAPIService
	nqn string
	nsid string
	apiNvmeofSubsystemNqnNamespaceNsidPatchRequest *ApiNvmeofSubsystemNqnNamespaceNsidPatchRequest
}

func (r ApiApiNvmeofSubsystemNqnNamespaceNsidPatchRequest) ApiNvmeofSubsystemNqnNamespaceNsidPatchRequest(apiNvmeofSubsystemNqnNamespaceNsidPatchRequest ApiNvmeofSubsystemNqnNamespaceNsidPatchRequest) ApiApiNvmeofSubsystemNqnNamespaceNsidPatchRequest {
	r.apiNvmeofSubsystemNqnNamespaceNsidPatchRequest = &apiNvmeofSubsystemNqnNamespaceNsidPatchRequest
	return r
}

func (r ApiApiNvmeofSubsystemNqnNamespaceNsidPatchRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiNvmeofSubsystemNqnNamespaceNsidPatchExecute(r)
}

/*
ApiNvmeofSubsystemNqnNamespaceNsidPatch Update an existing NVMeoF namespace

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param nqn NVMeoF subsystem NQN
 @param nsid NVMeoF Namespace ID
 @return ApiApiNvmeofSubsystemNqnNamespaceNsidPatchRequest
*/
func (a *NVMeOFSubsystemNamespaceAPIService) ApiNvmeofSubsystemNqnNamespaceNsidPatch(ctx context.Context, nqn string, nsid string) ApiApiNvmeofSubsystemNqnNamespaceNsidPatchRequest {
	return ApiApiNvmeofSubsystemNqnNamespaceNsidPatchRequest{
		ApiService: a,
		ctx: ctx,
		nqn: nqn,
		nsid: nsid,
	}
}

// Execute executes the request
func (a *NVMeOFSubsystemNamespaceAPIService) ApiNvmeofSubsystemNqnNamespaceNsidPatchExecute(r ApiApiNvmeofSubsystemNqnNamespaceNsidPatchRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NVMeOFSubsystemNamespaceAPIService.ApiNvmeofSubsystemNqnNamespaceNsidPatch")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/nvmeof/subsystem/{nqn}/namespace/{nsid}"
	localVarPath = strings.Replace(localVarPath, "{"+"nqn"+"}", url.PathEscape(parameterValueToString(r.nqn, "nqn")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"nsid"+"}", url.PathEscape(parameterValueToString(r.nsid, "nsid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiNvmeofSubsystemNqnNamespaceNsidPatchRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiNvmeofSubsystemNqnNamespacePostRequest struct {
	ctx context.Context
	ApiService *NVMeOFSubsystemNamespaceAPIService
	nqn string
	apiNvmeofSubsystemNqnNamespacePostRequest *ApiNvmeofSubsystemNqnNamespacePostRequest
}

func (r ApiApiNvmeofSubsystemNqnNamespacePostRequest) ApiNvmeofSubsystemNqnNamespacePostRequest(apiNvmeofSubsystemNqnNamespacePostRequest ApiNvmeofSubsystemNqnNamespacePostRequest) ApiApiNvmeofSubsystemNqnNamespacePostRequest {
	r.apiNvmeofSubsystemNqnNamespacePostRequest = &apiNvmeofSubsystemNqnNamespacePostRequest
	return r
}

func (r ApiApiNvmeofSubsystemNqnNamespacePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiNvmeofSubsystemNqnNamespacePostExecute(r)
}

/*
ApiNvmeofSubsystemNqnNamespacePost Create a new NVMeoF namespace

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param nqn NVMeoF subsystem NQN
 @return ApiApiNvmeofSubsystemNqnNamespacePostRequest
*/
func (a *NVMeOFSubsystemNamespaceAPIService) ApiNvmeofSubsystemNqnNamespacePost(ctx context.Context, nqn string) ApiApiNvmeofSubsystemNqnNamespacePostRequest {
	return ApiApiNvmeofSubsystemNqnNamespacePostRequest{
		ApiService: a,
		ctx: ctx,
		nqn: nqn,
	}
}

// Execute executes the request
func (a *NVMeOFSubsystemNamespaceAPIService) ApiNvmeofSubsystemNqnNamespacePostExecute(r ApiApiNvmeofSubsystemNqnNamespacePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NVMeOFSubsystemNamespaceAPIService.ApiNvmeofSubsystemNqnNamespacePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/nvmeof/subsystem/{nqn}/namespace"
	localVarPath = strings.Replace(localVarPath, "{"+"nqn"+"}", url.PathEscape(parameterValueToString(r.nqn, "nqn")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiNvmeofSubsystemNqnNamespacePostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
