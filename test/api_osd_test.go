/*
Ceph REST API

Testing OSDAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package ceph

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/boyvinall/go-ceph"
)

func Test_ceph_OSDAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test OSDAPIService ApiOsdFlagsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OSDAPI.ApiOsdFlagsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OSDAPIService ApiOsdFlagsIndividualGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OSDAPI.ApiOsdFlagsIndividualGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OSDAPIService ApiOsdFlagsIndividualPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OSDAPI.ApiOsdFlagsIndividualPut(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OSDAPIService ApiOsdFlagsPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OSDAPI.ApiOsdFlagsPut(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OSDAPIService ApiOsdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.OSDAPI.ApiOsdGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OSDAPIService ApiOsdPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.OSDAPI.ApiOsdPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OSDAPIService ApiOsdSafeToDeleteGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.OSDAPI.ApiOsdSafeToDeleteGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OSDAPIService ApiOsdSafeToDestroyGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OSDAPI.ApiOsdSafeToDestroyGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OSDAPIService ApiOsdSettingsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.OSDAPI.ApiOsdSettingsGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OSDAPIService ApiOsdSvcIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var svcId string

		httpRes, err := apiClient.OSDAPI.ApiOsdSvcIdDelete(context.Background(), svcId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OSDAPIService ApiOsdSvcIdDestroyPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var svcId string

		httpRes, err := apiClient.OSDAPI.ApiOsdSvcIdDestroyPost(context.Background(), svcId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OSDAPIService ApiOsdSvcIdDevicesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var svcId string

		httpRes, err := apiClient.OSDAPI.ApiOsdSvcIdDevicesGet(context.Background(), svcId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OSDAPIService ApiOsdSvcIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var svcId string

		httpRes, err := apiClient.OSDAPI.ApiOsdSvcIdGet(context.Background(), svcId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OSDAPIService ApiOsdSvcIdHistogramGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var svcId string

		httpRes, err := apiClient.OSDAPI.ApiOsdSvcIdHistogramGet(context.Background(), svcId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OSDAPIService ApiOsdSvcIdMarkPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var svcId string

		httpRes, err := apiClient.OSDAPI.ApiOsdSvcIdMarkPut(context.Background(), svcId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OSDAPIService ApiOsdSvcIdPurgePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var svcId string

		httpRes, err := apiClient.OSDAPI.ApiOsdSvcIdPurgePost(context.Background(), svcId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OSDAPIService ApiOsdSvcIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var svcId string

		httpRes, err := apiClient.OSDAPI.ApiOsdSvcIdPut(context.Background(), svcId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OSDAPIService ApiOsdSvcIdReweightPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var svcId string

		httpRes, err := apiClient.OSDAPI.ApiOsdSvcIdReweightPost(context.Background(), svcId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OSDAPIService ApiOsdSvcIdScrubPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var svcId string

		httpRes, err := apiClient.OSDAPI.ApiOsdSvcIdScrubPost(context.Background(), svcId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OSDAPIService ApiOsdSvcIdSmartGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var svcId string

		httpRes, err := apiClient.OSDAPI.ApiOsdSvcIdSmartGet(context.Background(), svcId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
