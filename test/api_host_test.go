/*
Ceph REST API

Testing HostAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package ceph

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/boyvinall/go-ceph"
)

func Test_ceph_HostAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test HostAPIService ApiHostGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HostAPI.ApiHostGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HostAPIService ApiHostHostnameDaemonsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hostname string

		httpRes, err := apiClient.HostAPI.ApiHostHostnameDaemonsGet(context.Background(), hostname).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HostAPIService ApiHostHostnameDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hostname string

		httpRes, err := apiClient.HostAPI.ApiHostHostnameDelete(context.Background(), hostname).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HostAPIService ApiHostHostnameDevicesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hostname string

		httpRes, err := apiClient.HostAPI.ApiHostHostnameDevicesGet(context.Background(), hostname).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HostAPIService ApiHostHostnameGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hostname string

		httpRes, err := apiClient.HostAPI.ApiHostHostnameGet(context.Background(), hostname).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HostAPIService ApiHostHostnameIdentifyDevicePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hostname string

		httpRes, err := apiClient.HostAPI.ApiHostHostnameIdentifyDevicePost(context.Background(), hostname).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HostAPIService ApiHostHostnameInventoryGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hostname string

		resp, httpRes, err := apiClient.HostAPI.ApiHostHostnameInventoryGet(context.Background(), hostname).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HostAPIService ApiHostHostnamePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hostname string

		resp, httpRes, err := apiClient.HostAPI.ApiHostHostnamePut(context.Background(), hostname).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HostAPIService ApiHostHostnameSmartGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hostname string

		httpRes, err := apiClient.HostAPI.ApiHostHostnameSmartGet(context.Background(), hostname).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HostAPIService ApiHostPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.HostAPI.ApiHostPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
