/*
Ceph REST API

This is the official Ceph REST API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ceph

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApiNvmeofSubsystemPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiNvmeofSubsystemPostRequest{}

// ApiNvmeofSubsystemPostRequest struct for ApiNvmeofSubsystemPostRequest
type ApiNvmeofSubsystemPostRequest struct {
	// Enable high availability
	EnableHa bool `json:"enable_ha"`
	// NVMeoF gateway group
	GwGroup *string `json:"gw_group,omitempty"`
	// Maximum number of namespaces
	MaxNamespaces *int32 `json:"max_namespaces,omitempty"`
	// NVMeoF subsystem NQN
	Nqn string `json:"nqn"`
}

type _ApiNvmeofSubsystemPostRequest ApiNvmeofSubsystemPostRequest

// NewApiNvmeofSubsystemPostRequest instantiates a new ApiNvmeofSubsystemPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiNvmeofSubsystemPostRequest(enableHa bool, nqn string) *ApiNvmeofSubsystemPostRequest {
	this := ApiNvmeofSubsystemPostRequest{}
	this.EnableHa = enableHa
	var maxNamespaces int32 = 1024
	this.MaxNamespaces = &maxNamespaces
	this.Nqn = nqn
	return &this
}

// NewApiNvmeofSubsystemPostRequestWithDefaults instantiates a new ApiNvmeofSubsystemPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiNvmeofSubsystemPostRequestWithDefaults() *ApiNvmeofSubsystemPostRequest {
	this := ApiNvmeofSubsystemPostRequest{}
	var maxNamespaces int32 = 1024
	this.MaxNamespaces = &maxNamespaces
	return &this
}

// GetEnableHa returns the EnableHa field value
func (o *ApiNvmeofSubsystemPostRequest) GetEnableHa() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.EnableHa
}

// GetEnableHaOk returns a tuple with the EnableHa field value
// and a boolean to check if the value has been set.
func (o *ApiNvmeofSubsystemPostRequest) GetEnableHaOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnableHa, true
}

// SetEnableHa sets field value
func (o *ApiNvmeofSubsystemPostRequest) SetEnableHa(v bool) {
	o.EnableHa = v
}

// GetGwGroup returns the GwGroup field value if set, zero value otherwise.
func (o *ApiNvmeofSubsystemPostRequest) GetGwGroup() string {
	if o == nil || IsNil(o.GwGroup) {
		var ret string
		return ret
	}
	return *o.GwGroup
}

// GetGwGroupOk returns a tuple with the GwGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiNvmeofSubsystemPostRequest) GetGwGroupOk() (*string, bool) {
	if o == nil || IsNil(o.GwGroup) {
		return nil, false
	}
	return o.GwGroup, true
}

// HasGwGroup returns a boolean if a field has been set.
func (o *ApiNvmeofSubsystemPostRequest) HasGwGroup() bool {
	if o != nil && !IsNil(o.GwGroup) {
		return true
	}

	return false
}

// SetGwGroup gets a reference to the given string and assigns it to the GwGroup field.
func (o *ApiNvmeofSubsystemPostRequest) SetGwGroup(v string) {
	o.GwGroup = &v
}

// GetMaxNamespaces returns the MaxNamespaces field value if set, zero value otherwise.
func (o *ApiNvmeofSubsystemPostRequest) GetMaxNamespaces() int32 {
	if o == nil || IsNil(o.MaxNamespaces) {
		var ret int32
		return ret
	}
	return *o.MaxNamespaces
}

// GetMaxNamespacesOk returns a tuple with the MaxNamespaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiNvmeofSubsystemPostRequest) GetMaxNamespacesOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxNamespaces) {
		return nil, false
	}
	return o.MaxNamespaces, true
}

// HasMaxNamespaces returns a boolean if a field has been set.
func (o *ApiNvmeofSubsystemPostRequest) HasMaxNamespaces() bool {
	if o != nil && !IsNil(o.MaxNamespaces) {
		return true
	}

	return false
}

// SetMaxNamespaces gets a reference to the given int32 and assigns it to the MaxNamespaces field.
func (o *ApiNvmeofSubsystemPostRequest) SetMaxNamespaces(v int32) {
	o.MaxNamespaces = &v
}

// GetNqn returns the Nqn field value
func (o *ApiNvmeofSubsystemPostRequest) GetNqn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Nqn
}

// GetNqnOk returns a tuple with the Nqn field value
// and a boolean to check if the value has been set.
func (o *ApiNvmeofSubsystemPostRequest) GetNqnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Nqn, true
}

// SetNqn sets field value
func (o *ApiNvmeofSubsystemPostRequest) SetNqn(v string) {
	o.Nqn = v
}

func (o ApiNvmeofSubsystemPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiNvmeofSubsystemPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enable_ha"] = o.EnableHa
	if !IsNil(o.GwGroup) {
		toSerialize["gw_group"] = o.GwGroup
	}
	if !IsNil(o.MaxNamespaces) {
		toSerialize["max_namespaces"] = o.MaxNamespaces
	}
	toSerialize["nqn"] = o.Nqn
	return toSerialize, nil
}

func (o *ApiNvmeofSubsystemPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enable_ha",
		"nqn",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiNvmeofSubsystemPostRequest := _ApiNvmeofSubsystemPostRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiNvmeofSubsystemPostRequest)

	if err != nil {
		return err
	}

	*o = ApiNvmeofSubsystemPostRequest(varApiNvmeofSubsystemPostRequest)

	return err
}

type NullableApiNvmeofSubsystemPostRequest struct {
	value *ApiNvmeofSubsystemPostRequest
	isSet bool
}

func (v NullableApiNvmeofSubsystemPostRequest) Get() *ApiNvmeofSubsystemPostRequest {
	return v.value
}

func (v *NullableApiNvmeofSubsystemPostRequest) Set(val *ApiNvmeofSubsystemPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableApiNvmeofSubsystemPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableApiNvmeofSubsystemPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiNvmeofSubsystemPostRequest(val *ApiNvmeofSubsystemPostRequest) *NullableApiNvmeofSubsystemPostRequest {
	return &NullableApiNvmeofSubsystemPostRequest{value: val, isSet: true}
}

func (v NullableApiNvmeofSubsystemPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiNvmeofSubsystemPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


