/*
Ceph REST API

This is the official Ceph REST API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ceph

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// HostAPIService HostAPI service
type HostAPIService service

type ApiApiHostGetRequest struct {
	ctx context.Context
	ApiService *HostAPIService
	sources *string
	facts *bool
	offset *int32
	limit *int32
	search *string
	sort *string
}

// Host Sources
func (r ApiApiHostGetRequest) Sources(sources string) ApiApiHostGetRequest {
	r.sources = &sources
	return r
}

// Host Facts
func (r ApiApiHostGetRequest) Facts(facts bool) ApiApiHostGetRequest {
	r.facts = &facts
	return r
}

func (r ApiApiHostGetRequest) Offset(offset int32) ApiApiHostGetRequest {
	r.offset = &offset
	return r
}

func (r ApiApiHostGetRequest) Limit(limit int32) ApiApiHostGetRequest {
	r.limit = &limit
	return r
}

func (r ApiApiHostGetRequest) Search(search string) ApiApiHostGetRequest {
	r.search = &search
	return r
}

func (r ApiApiHostGetRequest) Sort(sort string) ApiApiHostGetRequest {
	r.sort = &sort
	return r
}

func (r ApiApiHostGetRequest) Execute() (*ApiHostGet200Response, *http.Response, error) {
	return r.ApiService.ApiHostGetExecute(r)
}

/*
ApiHostGet List Host Specifications

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiHostGetRequest
*/
func (a *HostAPIService) ApiHostGet(ctx context.Context) ApiApiHostGetRequest {
	return ApiApiHostGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiHostGet200Response
func (a *HostAPIService) ApiHostGetExecute(r ApiApiHostGetRequest) (*ApiHostGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiHostGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HostAPIService.ApiHostGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/host"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.sources != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sources", r.sources, "form", "")
	}
	if r.facts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "facts", r.facts, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.3+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiHostHostnameDaemonsGetRequest struct {
	ctx context.Context
	ApiService *HostAPIService
	hostname string
}

func (r ApiApiHostHostnameDaemonsGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiHostHostnameDaemonsGetExecute(r)
}

/*
ApiHostHostnameDaemonsGet Method for ApiHostHostnameDaemonsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hostname
 @return ApiApiHostHostnameDaemonsGetRequest
*/
func (a *HostAPIService) ApiHostHostnameDaemonsGet(ctx context.Context, hostname string) ApiApiHostHostnameDaemonsGetRequest {
	return ApiApiHostHostnameDaemonsGetRequest{
		ApiService: a,
		ctx: ctx,
		hostname: hostname,
	}
}

// Execute executes the request
func (a *HostAPIService) ApiHostHostnameDaemonsGetExecute(r ApiApiHostHostnameDaemonsGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HostAPIService.ApiHostHostnameDaemonsGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/host/{hostname}/daemons"
	localVarPath = strings.Replace(localVarPath, "{"+"hostname"+"}", url.PathEscape(parameterValueToString(r.hostname, "hostname")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiHostHostnameDeleteRequest struct {
	ctx context.Context
	ApiService *HostAPIService
	hostname string
}

func (r ApiApiHostHostnameDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiHostHostnameDeleteExecute(r)
}

/*
ApiHostHostnameDelete Method for ApiHostHostnameDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hostname
 @return ApiApiHostHostnameDeleteRequest
*/
func (a *HostAPIService) ApiHostHostnameDelete(ctx context.Context, hostname string) ApiApiHostHostnameDeleteRequest {
	return ApiApiHostHostnameDeleteRequest{
		ApiService: a,
		ctx: ctx,
		hostname: hostname,
	}
}

// Execute executes the request
func (a *HostAPIService) ApiHostHostnameDeleteExecute(r ApiApiHostHostnameDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HostAPIService.ApiHostHostnameDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/host/{hostname}"
	localVarPath = strings.Replace(localVarPath, "{"+"hostname"+"}", url.PathEscape(parameterValueToString(r.hostname, "hostname")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiHostHostnameDevicesGetRequest struct {
	ctx context.Context
	ApiService *HostAPIService
	hostname string
}

func (r ApiApiHostHostnameDevicesGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiHostHostnameDevicesGetExecute(r)
}

/*
ApiHostHostnameDevicesGet Method for ApiHostHostnameDevicesGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hostname
 @return ApiApiHostHostnameDevicesGetRequest
*/
func (a *HostAPIService) ApiHostHostnameDevicesGet(ctx context.Context, hostname string) ApiApiHostHostnameDevicesGetRequest {
	return ApiApiHostHostnameDevicesGetRequest{
		ApiService: a,
		ctx: ctx,
		hostname: hostname,
	}
}

// Execute executes the request
func (a *HostAPIService) ApiHostHostnameDevicesGetExecute(r ApiApiHostHostnameDevicesGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HostAPIService.ApiHostHostnameDevicesGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/host/{hostname}/devices"
	localVarPath = strings.Replace(localVarPath, "{"+"hostname"+"}", url.PathEscape(parameterValueToString(r.hostname, "hostname")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiHostHostnameGetRequest struct {
	ctx context.Context
	ApiService *HostAPIService
	hostname string
}

func (r ApiApiHostHostnameGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiHostHostnameGetExecute(r)
}

/*
ApiHostHostnameGet Method for ApiHostHostnameGet


        Get the specified host.
        :raises: cherrypy.HTTPError: If host not found.
        

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hostname
 @return ApiApiHostHostnameGetRequest
*/
func (a *HostAPIService) ApiHostHostnameGet(ctx context.Context, hostname string) ApiApiHostHostnameGetRequest {
	return ApiApiHostHostnameGetRequest{
		ApiService: a,
		ctx: ctx,
		hostname: hostname,
	}
}

// Execute executes the request
func (a *HostAPIService) ApiHostHostnameGetExecute(r ApiApiHostHostnameGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HostAPIService.ApiHostHostnameGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/host/{hostname}"
	localVarPath = strings.Replace(localVarPath, "{"+"hostname"+"}", url.PathEscape(parameterValueToString(r.hostname, "hostname")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.2+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiHostHostnameIdentifyDevicePostRequest struct {
	ctx context.Context
	ApiService *HostAPIService
	hostname string
	apiHostHostnameIdentifyDevicePostRequest *ApiHostHostnameIdentifyDevicePostRequest
}

func (r ApiApiHostHostnameIdentifyDevicePostRequest) ApiHostHostnameIdentifyDevicePostRequest(apiHostHostnameIdentifyDevicePostRequest ApiHostHostnameIdentifyDevicePostRequest) ApiApiHostHostnameIdentifyDevicePostRequest {
	r.apiHostHostnameIdentifyDevicePostRequest = &apiHostHostnameIdentifyDevicePostRequest
	return r
}

func (r ApiApiHostHostnameIdentifyDevicePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiHostHostnameIdentifyDevicePostExecute(r)
}

/*
ApiHostHostnameIdentifyDevicePost Method for ApiHostHostnameIdentifyDevicePost


        Identify a device by switching on the device light for N seconds.
        :param hostname: The hostname of the device to process.
        :param device: The device identifier to process, e.g. ``/dev/dm-0`` or
        ``ABC1234DEF567-1R1234_ABC8DE0Q``.
        :param duration: The duration in seconds how long the LED should flash.
        

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hostname
 @return ApiApiHostHostnameIdentifyDevicePostRequest
*/
func (a *HostAPIService) ApiHostHostnameIdentifyDevicePost(ctx context.Context, hostname string) ApiApiHostHostnameIdentifyDevicePostRequest {
	return ApiApiHostHostnameIdentifyDevicePostRequest{
		ApiService: a,
		ctx: ctx,
		hostname: hostname,
	}
}

// Execute executes the request
func (a *HostAPIService) ApiHostHostnameIdentifyDevicePostExecute(r ApiApiHostHostnameIdentifyDevicePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HostAPIService.ApiHostHostnameIdentifyDevicePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/host/{hostname}/identify_device"
	localVarPath = strings.Replace(localVarPath, "{"+"hostname"+"}", url.PathEscape(parameterValueToString(r.hostname, "hostname")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiHostHostnameIdentifyDevicePostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiHostHostnameInventoryGetRequest struct {
	ctx context.Context
	ApiService *HostAPIService
	hostname string
	refresh *string
}

// Trigger asynchronous refresh
func (r ApiApiHostHostnameInventoryGetRequest) Refresh(refresh string) ApiApiHostHostnameInventoryGetRequest {
	r.refresh = &refresh
	return r
}

func (r ApiApiHostHostnameInventoryGetRequest) Execute() (*ApiHostHostnameInventoryGet200Response, *http.Response, error) {
	return r.ApiService.ApiHostHostnameInventoryGetExecute(r)
}

/*
ApiHostHostnameInventoryGet Get inventory of a host

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hostname Hostname
 @return ApiApiHostHostnameInventoryGetRequest
*/
func (a *HostAPIService) ApiHostHostnameInventoryGet(ctx context.Context, hostname string) ApiApiHostHostnameInventoryGetRequest {
	return ApiApiHostHostnameInventoryGetRequest{
		ApiService: a,
		ctx: ctx,
		hostname: hostname,
	}
}

// Execute executes the request
//  @return ApiHostHostnameInventoryGet200Response
func (a *HostAPIService) ApiHostHostnameInventoryGetExecute(r ApiApiHostHostnameInventoryGetRequest) (*ApiHostHostnameInventoryGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiHostHostnameInventoryGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HostAPIService.ApiHostHostnameInventoryGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/host/{hostname}/inventory"
	localVarPath = strings.Replace(localVarPath, "{"+"hostname"+"}", url.PathEscape(parameterValueToString(r.hostname, "hostname")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.refresh != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "refresh", r.refresh, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiHostHostnamePutRequest struct {
	ctx context.Context
	ApiService *HostAPIService
	hostname string
	apiHostHostnamePutRequest *ApiHostHostnamePutRequest
}

func (r ApiApiHostHostnamePutRequest) ApiHostHostnamePutRequest(apiHostHostnamePutRequest ApiHostHostnamePutRequest) ApiApiHostHostnamePutRequest {
	r.apiHostHostnamePutRequest = &apiHostHostnamePutRequest
	return r
}

func (r ApiApiHostHostnamePutRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.ApiHostHostnamePutExecute(r)
}

/*
ApiHostHostnamePut Method for ApiHostHostnamePut


        Update the specified host.
        Note, this is only supported when Ceph Orchestrator is enabled.
        :param hostname: The name of the host to be processed.
        :param update_labels: To update the labels.
        :param labels: List of labels.
        :param maintenance: Enter/Exit maintenance mode.
        :param force: Force enter maintenance mode.
        :param drain: Drain host
        

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hostname Hostname
 @return ApiApiHostHostnamePutRequest
*/
func (a *HostAPIService) ApiHostHostnamePut(ctx context.Context, hostname string) ApiApiHostHostnamePutRequest {
	return ApiApiHostHostnamePutRequest{
		ApiService: a,
		ctx: ctx,
		hostname: hostname,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *HostAPIService) ApiHostHostnamePutExecute(r ApiApiHostHostnamePutRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HostAPIService.ApiHostHostnamePut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/host/{hostname}"
	localVarPath = strings.Replace(localVarPath, "{"+"hostname"+"}", url.PathEscape(parameterValueToString(r.hostname, "hostname")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v0.1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiHostHostnamePutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiHostHostnameSmartGetRequest struct {
	ctx context.Context
	ApiService *HostAPIService
	hostname string
}

func (r ApiApiHostHostnameSmartGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiHostHostnameSmartGetExecute(r)
}

/*
ApiHostHostnameSmartGet Method for ApiHostHostnameSmartGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hostname
 @return ApiApiHostHostnameSmartGetRequest
*/
func (a *HostAPIService) ApiHostHostnameSmartGet(ctx context.Context, hostname string) ApiApiHostHostnameSmartGetRequest {
	return ApiApiHostHostnameSmartGetRequest{
		ApiService: a,
		ctx: ctx,
		hostname: hostname,
	}
}

// Execute executes the request
func (a *HostAPIService) ApiHostHostnameSmartGetExecute(r ApiApiHostHostnameSmartGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HostAPIService.ApiHostHostnameSmartGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/host/{hostname}/smart"
	localVarPath = strings.Replace(localVarPath, "{"+"hostname"+"}", url.PathEscape(parameterValueToString(r.hostname, "hostname")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiHostPostRequest struct {
	ctx context.Context
	ApiService *HostAPIService
	apiHostPostRequest *ApiHostPostRequest
}

func (r ApiApiHostPostRequest) ApiHostPostRequest(apiHostPostRequest ApiHostPostRequest) ApiApiHostPostRequest {
	r.apiHostPostRequest = &apiHostPostRequest
	return r
}

func (r ApiApiHostPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiHostPostExecute(r)
}

/*
ApiHostPost Method for ApiHostPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiHostPostRequest
*/
func (a *HostAPIService) ApiHostPost(ctx context.Context) ApiApiHostPostRequest {
	return ApiApiHostPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *HostAPIService) ApiHostPostExecute(r ApiApiHostPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HostAPIService.ApiHostPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/host"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v0.1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiHostPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
