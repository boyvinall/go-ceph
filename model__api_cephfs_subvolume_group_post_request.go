/*
Ceph REST API

This is the official Ceph REST API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ceph

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApiCephfsSubvolumeGroupPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiCephfsSubvolumeGroupPostRequest{}

// ApiCephfsSubvolumeGroupPostRequest struct for ApiCephfsSubvolumeGroupPostRequest
type ApiCephfsSubvolumeGroupPostRequest struct {
	GroupName string `json:"group_name"`
	VolName string `json:"vol_name"`
}

type _ApiCephfsSubvolumeGroupPostRequest ApiCephfsSubvolumeGroupPostRequest

// NewApiCephfsSubvolumeGroupPostRequest instantiates a new ApiCephfsSubvolumeGroupPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiCephfsSubvolumeGroupPostRequest(groupName string, volName string) *ApiCephfsSubvolumeGroupPostRequest {
	this := ApiCephfsSubvolumeGroupPostRequest{}
	this.GroupName = groupName
	this.VolName = volName
	return &this
}

// NewApiCephfsSubvolumeGroupPostRequestWithDefaults instantiates a new ApiCephfsSubvolumeGroupPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiCephfsSubvolumeGroupPostRequestWithDefaults() *ApiCephfsSubvolumeGroupPostRequest {
	this := ApiCephfsSubvolumeGroupPostRequest{}
	return &this
}

// GetGroupName returns the GroupName field value
func (o *ApiCephfsSubvolumeGroupPostRequest) GetGroupName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupName
}

// GetGroupNameOk returns a tuple with the GroupName field value
// and a boolean to check if the value has been set.
func (o *ApiCephfsSubvolumeGroupPostRequest) GetGroupNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupName, true
}

// SetGroupName sets field value
func (o *ApiCephfsSubvolumeGroupPostRequest) SetGroupName(v string) {
	o.GroupName = v
}

// GetVolName returns the VolName field value
func (o *ApiCephfsSubvolumeGroupPostRequest) GetVolName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VolName
}

// GetVolNameOk returns a tuple with the VolName field value
// and a boolean to check if the value has been set.
func (o *ApiCephfsSubvolumeGroupPostRequest) GetVolNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VolName, true
}

// SetVolName sets field value
func (o *ApiCephfsSubvolumeGroupPostRequest) SetVolName(v string) {
	o.VolName = v
}

func (o ApiCephfsSubvolumeGroupPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiCephfsSubvolumeGroupPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["group_name"] = o.GroupName
	toSerialize["vol_name"] = o.VolName
	return toSerialize, nil
}

func (o *ApiCephfsSubvolumeGroupPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"group_name",
		"vol_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiCephfsSubvolumeGroupPostRequest := _ApiCephfsSubvolumeGroupPostRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiCephfsSubvolumeGroupPostRequest)

	if err != nil {
		return err
	}

	*o = ApiCephfsSubvolumeGroupPostRequest(varApiCephfsSubvolumeGroupPostRequest)

	return err
}

type NullableApiCephfsSubvolumeGroupPostRequest struct {
	value *ApiCephfsSubvolumeGroupPostRequest
	isSet bool
}

func (v NullableApiCephfsSubvolumeGroupPostRequest) Get() *ApiCephfsSubvolumeGroupPostRequest {
	return v.value
}

func (v *NullableApiCephfsSubvolumeGroupPostRequest) Set(val *ApiCephfsSubvolumeGroupPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableApiCephfsSubvolumeGroupPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableApiCephfsSubvolumeGroupPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiCephfsSubvolumeGroupPostRequest(val *ApiCephfsSubvolumeGroupPostRequest) *NullableApiCephfsSubvolumeGroupPostRequest {
	return &NullableApiCephfsSubvolumeGroupPostRequest{value: val, isSet: true}
}

func (v NullableApiCephfsSubvolumeGroupPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiCephfsSubvolumeGroupPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


