/*
Ceph REST API

This is the official Ceph REST API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ceph

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// RbdMirroringAPIService RbdMirroringAPI service
type RbdMirroringAPIService service

type ApiApiBlockMirroringSiteNameGetRequest struct {
	ctx context.Context
	ApiService *RbdMirroringAPIService
}

func (r ApiApiBlockMirroringSiteNameGetRequest) Execute() (*ApiBlockMirroringSiteNameGet200Response, *http.Response, error) {
	return r.ApiService.ApiBlockMirroringSiteNameGetExecute(r)
}

/*
ApiBlockMirroringSiteNameGet Display Rbd Mirroring sitename

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiBlockMirroringSiteNameGetRequest
*/
func (a *RbdMirroringAPIService) ApiBlockMirroringSiteNameGet(ctx context.Context) ApiApiBlockMirroringSiteNameGetRequest {
	return ApiApiBlockMirroringSiteNameGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiBlockMirroringSiteNameGet200Response
func (a *RbdMirroringAPIService) ApiBlockMirroringSiteNameGetExecute(r ApiApiBlockMirroringSiteNameGetRequest) (*ApiBlockMirroringSiteNameGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiBlockMirroringSiteNameGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbdMirroringAPIService.ApiBlockMirroringSiteNameGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/block/mirroring/site_name"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiBlockMirroringSiteNamePutRequest struct {
	ctx context.Context
	ApiService *RbdMirroringAPIService
	apiBlockMirroringSiteNamePutRequest *ApiBlockMirroringSiteNamePutRequest
}

func (r ApiApiBlockMirroringSiteNamePutRequest) ApiBlockMirroringSiteNamePutRequest(apiBlockMirroringSiteNamePutRequest ApiBlockMirroringSiteNamePutRequest) ApiApiBlockMirroringSiteNamePutRequest {
	r.apiBlockMirroringSiteNamePutRequest = &apiBlockMirroringSiteNamePutRequest
	return r
}

func (r ApiApiBlockMirroringSiteNamePutRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiBlockMirroringSiteNamePutExecute(r)
}

/*
ApiBlockMirroringSiteNamePut Method for ApiBlockMirroringSiteNamePut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiBlockMirroringSiteNamePutRequest
*/
func (a *RbdMirroringAPIService) ApiBlockMirroringSiteNamePut(ctx context.Context) ApiApiBlockMirroringSiteNamePutRequest {
	return ApiApiBlockMirroringSiteNamePutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *RbdMirroringAPIService) ApiBlockMirroringSiteNamePutExecute(r ApiApiBlockMirroringSiteNamePutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbdMirroringAPIService.ApiBlockMirroringSiteNamePut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/block/mirroring/site_name"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiBlockMirroringSiteNamePutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
