/*
Ceph REST API

This is the official Ceph REST API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ceph

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApiHealthMinimalGet200ResponseMgrMap type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiHealthMinimalGet200ResponseMgrMap{}

// ApiHealthMinimalGet200ResponseMgrMap 
type ApiHealthMinimalGet200ResponseMgrMap struct {
	// 
	ActiveName string `json:"active_name"`
	// 
	Standbys string `json:"standbys"`
}

type _ApiHealthMinimalGet200ResponseMgrMap ApiHealthMinimalGet200ResponseMgrMap

// NewApiHealthMinimalGet200ResponseMgrMap instantiates a new ApiHealthMinimalGet200ResponseMgrMap object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiHealthMinimalGet200ResponseMgrMap(activeName string, standbys string) *ApiHealthMinimalGet200ResponseMgrMap {
	this := ApiHealthMinimalGet200ResponseMgrMap{}
	this.ActiveName = activeName
	this.Standbys = standbys
	return &this
}

// NewApiHealthMinimalGet200ResponseMgrMapWithDefaults instantiates a new ApiHealthMinimalGet200ResponseMgrMap object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiHealthMinimalGet200ResponseMgrMapWithDefaults() *ApiHealthMinimalGet200ResponseMgrMap {
	this := ApiHealthMinimalGet200ResponseMgrMap{}
	return &this
}

// GetActiveName returns the ActiveName field value
func (o *ApiHealthMinimalGet200ResponseMgrMap) GetActiveName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ActiveName
}

// GetActiveNameOk returns a tuple with the ActiveName field value
// and a boolean to check if the value has been set.
func (o *ApiHealthMinimalGet200ResponseMgrMap) GetActiveNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActiveName, true
}

// SetActiveName sets field value
func (o *ApiHealthMinimalGet200ResponseMgrMap) SetActiveName(v string) {
	o.ActiveName = v
}

// GetStandbys returns the Standbys field value
func (o *ApiHealthMinimalGet200ResponseMgrMap) GetStandbys() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Standbys
}

// GetStandbysOk returns a tuple with the Standbys field value
// and a boolean to check if the value has been set.
func (o *ApiHealthMinimalGet200ResponseMgrMap) GetStandbysOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Standbys, true
}

// SetStandbys sets field value
func (o *ApiHealthMinimalGet200ResponseMgrMap) SetStandbys(v string) {
	o.Standbys = v
}

func (o ApiHealthMinimalGet200ResponseMgrMap) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiHealthMinimalGet200ResponseMgrMap) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["active_name"] = o.ActiveName
	toSerialize["standbys"] = o.Standbys
	return toSerialize, nil
}

func (o *ApiHealthMinimalGet200ResponseMgrMap) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"active_name",
		"standbys",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiHealthMinimalGet200ResponseMgrMap := _ApiHealthMinimalGet200ResponseMgrMap{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiHealthMinimalGet200ResponseMgrMap)

	if err != nil {
		return err
	}

	*o = ApiHealthMinimalGet200ResponseMgrMap(varApiHealthMinimalGet200ResponseMgrMap)

	return err
}

type NullableApiHealthMinimalGet200ResponseMgrMap struct {
	value *ApiHealthMinimalGet200ResponseMgrMap
	isSet bool
}

func (v NullableApiHealthMinimalGet200ResponseMgrMap) Get() *ApiHealthMinimalGet200ResponseMgrMap {
	return v.value
}

func (v *NullableApiHealthMinimalGet200ResponseMgrMap) Set(val *ApiHealthMinimalGet200ResponseMgrMap) {
	v.value = val
	v.isSet = true
}

func (v NullableApiHealthMinimalGet200ResponseMgrMap) IsSet() bool {
	return v.isSet
}

func (v *NullableApiHealthMinimalGet200ResponseMgrMap) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiHealthMinimalGet200ResponseMgrMap(val *ApiHealthMinimalGet200ResponseMgrMap) *NullableApiHealthMinimalGet200ResponseMgrMap {
	return &NullableApiHealthMinimalGet200ResponseMgrMap{value: val, isSet: true}
}

func (v NullableApiHealthMinimalGet200ResponseMgrMap) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiHealthMinimalGet200ResponseMgrMap) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


