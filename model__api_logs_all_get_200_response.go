/*
Ceph REST API

This is the official Ceph REST API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ceph

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApiLogsAllGet200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiLogsAllGet200Response{}

// ApiLogsAllGet200Response struct for ApiLogsAllGet200Response
type ApiLogsAllGet200Response struct {
	// Audit log
	AuditLog []ApiLogsAllGet200ResponseAuditLogInner `json:"audit_log"`
	// 
	Clog []string `json:"clog"`
}

type _ApiLogsAllGet200Response ApiLogsAllGet200Response

// NewApiLogsAllGet200Response instantiates a new ApiLogsAllGet200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiLogsAllGet200Response(auditLog []ApiLogsAllGet200ResponseAuditLogInner, clog []string) *ApiLogsAllGet200Response {
	this := ApiLogsAllGet200Response{}
	this.AuditLog = auditLog
	this.Clog = clog
	return &this
}

// NewApiLogsAllGet200ResponseWithDefaults instantiates a new ApiLogsAllGet200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiLogsAllGet200ResponseWithDefaults() *ApiLogsAllGet200Response {
	this := ApiLogsAllGet200Response{}
	return &this
}

// GetAuditLog returns the AuditLog field value
func (o *ApiLogsAllGet200Response) GetAuditLog() []ApiLogsAllGet200ResponseAuditLogInner {
	if o == nil {
		var ret []ApiLogsAllGet200ResponseAuditLogInner
		return ret
	}

	return o.AuditLog
}

// GetAuditLogOk returns a tuple with the AuditLog field value
// and a boolean to check if the value has been set.
func (o *ApiLogsAllGet200Response) GetAuditLogOk() ([]ApiLogsAllGet200ResponseAuditLogInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.AuditLog, true
}

// SetAuditLog sets field value
func (o *ApiLogsAllGet200Response) SetAuditLog(v []ApiLogsAllGet200ResponseAuditLogInner) {
	o.AuditLog = v
}

// GetClog returns the Clog field value
func (o *ApiLogsAllGet200Response) GetClog() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Clog
}

// GetClogOk returns a tuple with the Clog field value
// and a boolean to check if the value has been set.
func (o *ApiLogsAllGet200Response) GetClogOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Clog, true
}

// SetClog sets field value
func (o *ApiLogsAllGet200Response) SetClog(v []string) {
	o.Clog = v
}

func (o ApiLogsAllGet200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiLogsAllGet200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["audit_log"] = o.AuditLog
	toSerialize["clog"] = o.Clog
	return toSerialize, nil
}

func (o *ApiLogsAllGet200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"audit_log",
		"clog",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiLogsAllGet200Response := _ApiLogsAllGet200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiLogsAllGet200Response)

	if err != nil {
		return err
	}

	*o = ApiLogsAllGet200Response(varApiLogsAllGet200Response)

	return err
}

type NullableApiLogsAllGet200Response struct {
	value *ApiLogsAllGet200Response
	isSet bool
}

func (v NullableApiLogsAllGet200Response) Get() *ApiLogsAllGet200Response {
	return v.value
}

func (v *NullableApiLogsAllGet200Response) Set(val *ApiLogsAllGet200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableApiLogsAllGet200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableApiLogsAllGet200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiLogsAllGet200Response(val *ApiLogsAllGet200Response) *NullableApiLogsAllGet200Response {
	return &NullableApiLogsAllGet200Response{value: val, isSet: true}
}

func (v NullableApiLogsAllGet200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiLogsAllGet200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


