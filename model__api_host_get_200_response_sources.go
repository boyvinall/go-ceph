/*
Ceph REST API

This is the official Ceph REST API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ceph

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApiHostGet200ResponseSources type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiHostGet200ResponseSources{}

// ApiHostGet200ResponseSources Host Sources
type ApiHostGet200ResponseSources struct {
	// 
	Ceph bool `json:"ceph"`
	// 
	Orchestrator bool `json:"orchestrator"`
}

type _ApiHostGet200ResponseSources ApiHostGet200ResponseSources

// NewApiHostGet200ResponseSources instantiates a new ApiHostGet200ResponseSources object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiHostGet200ResponseSources(ceph bool, orchestrator bool) *ApiHostGet200ResponseSources {
	this := ApiHostGet200ResponseSources{}
	this.Ceph = ceph
	this.Orchestrator = orchestrator
	return &this
}

// NewApiHostGet200ResponseSourcesWithDefaults instantiates a new ApiHostGet200ResponseSources object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiHostGet200ResponseSourcesWithDefaults() *ApiHostGet200ResponseSources {
	this := ApiHostGet200ResponseSources{}
	return &this
}

// GetCeph returns the Ceph field value
func (o *ApiHostGet200ResponseSources) GetCeph() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Ceph
}

// GetCephOk returns a tuple with the Ceph field value
// and a boolean to check if the value has been set.
func (o *ApiHostGet200ResponseSources) GetCephOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ceph, true
}

// SetCeph sets field value
func (o *ApiHostGet200ResponseSources) SetCeph(v bool) {
	o.Ceph = v
}

// GetOrchestrator returns the Orchestrator field value
func (o *ApiHostGet200ResponseSources) GetOrchestrator() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Orchestrator
}

// GetOrchestratorOk returns a tuple with the Orchestrator field value
// and a boolean to check if the value has been set.
func (o *ApiHostGet200ResponseSources) GetOrchestratorOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Orchestrator, true
}

// SetOrchestrator sets field value
func (o *ApiHostGet200ResponseSources) SetOrchestrator(v bool) {
	o.Orchestrator = v
}

func (o ApiHostGet200ResponseSources) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiHostGet200ResponseSources) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ceph"] = o.Ceph
	toSerialize["orchestrator"] = o.Orchestrator
	return toSerialize, nil
}

func (o *ApiHostGet200ResponseSources) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ceph",
		"orchestrator",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiHostGet200ResponseSources := _ApiHostGet200ResponseSources{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiHostGet200ResponseSources)

	if err != nil {
		return err
	}

	*o = ApiHostGet200ResponseSources(varApiHostGet200ResponseSources)

	return err
}

type NullableApiHostGet200ResponseSources struct {
	value *ApiHostGet200ResponseSources
	isSet bool
}

func (v NullableApiHostGet200ResponseSources) Get() *ApiHostGet200ResponseSources {
	return v.value
}

func (v *NullableApiHostGet200ResponseSources) Set(val *ApiHostGet200ResponseSources) {
	v.value = val
	v.isSet = true
}

func (v NullableApiHostGet200ResponseSources) IsSet() bool {
	return v.isSet
}

func (v *NullableApiHostGet200ResponseSources) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiHostGet200ResponseSources(val *ApiHostGet200ResponseSources) *NullableApiHostGet200ResponseSources {
	return &NullableApiHostGet200ResponseSources{value: val, isSet: true}
}

func (v NullableApiHostGet200ResponseSources) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiHostGet200ResponseSources) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


