/*
Ceph REST API

This is the official Ceph REST API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ceph

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// RbdMirroringPoolModeAPIService RbdMirroringPoolModeAPI service
type RbdMirroringPoolModeAPIService service

type ApiApiBlockMirroringPoolPoolNameGetRequest struct {
	ctx context.Context
	ApiService *RbdMirroringPoolModeAPIService
	poolName string
}

func (r ApiApiBlockMirroringPoolPoolNameGetRequest) Execute() (*ApiBlockMirroringPoolPoolNameGet200Response, *http.Response, error) {
	return r.ApiService.ApiBlockMirroringPoolPoolNameGetExecute(r)
}

/*
ApiBlockMirroringPoolPoolNameGet Display Rbd Mirroring Summary

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param poolName Pool Name
 @return ApiApiBlockMirroringPoolPoolNameGetRequest
*/
func (a *RbdMirroringPoolModeAPIService) ApiBlockMirroringPoolPoolNameGet(ctx context.Context, poolName string) ApiApiBlockMirroringPoolPoolNameGetRequest {
	return ApiApiBlockMirroringPoolPoolNameGetRequest{
		ApiService: a,
		ctx: ctx,
		poolName: poolName,
	}
}

// Execute executes the request
//  @return ApiBlockMirroringPoolPoolNameGet200Response
func (a *RbdMirroringPoolModeAPIService) ApiBlockMirroringPoolPoolNameGetExecute(r ApiApiBlockMirroringPoolPoolNameGetRequest) (*ApiBlockMirroringPoolPoolNameGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiBlockMirroringPoolPoolNameGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbdMirroringPoolModeAPIService.ApiBlockMirroringPoolPoolNameGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/block/mirroring/pool/{pool_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"pool_name"+"}", url.PathEscape(parameterValueToString(r.poolName, "poolName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiBlockMirroringPoolPoolNamePutRequest struct {
	ctx context.Context
	ApiService *RbdMirroringPoolModeAPIService
	poolName string
	apiBlockMirroringPoolPoolNamePutRequest *ApiBlockMirroringPoolPoolNamePutRequest
}

func (r ApiApiBlockMirroringPoolPoolNamePutRequest) ApiBlockMirroringPoolPoolNamePutRequest(apiBlockMirroringPoolPoolNamePutRequest ApiBlockMirroringPoolPoolNamePutRequest) ApiApiBlockMirroringPoolPoolNamePutRequest {
	r.apiBlockMirroringPoolPoolNamePutRequest = &apiBlockMirroringPoolPoolNamePutRequest
	return r
}

func (r ApiApiBlockMirroringPoolPoolNamePutRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiBlockMirroringPoolPoolNamePutExecute(r)
}

/*
ApiBlockMirroringPoolPoolNamePut Method for ApiBlockMirroringPoolPoolNamePut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param poolName
 @return ApiApiBlockMirroringPoolPoolNamePutRequest
*/
func (a *RbdMirroringPoolModeAPIService) ApiBlockMirroringPoolPoolNamePut(ctx context.Context, poolName string) ApiApiBlockMirroringPoolPoolNamePutRequest {
	return ApiApiBlockMirroringPoolPoolNamePutRequest{
		ApiService: a,
		ctx: ctx,
		poolName: poolName,
	}
}

// Execute executes the request
func (a *RbdMirroringPoolModeAPIService) ApiBlockMirroringPoolPoolNamePutExecute(r ApiApiBlockMirroringPoolPoolNamePutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbdMirroringPoolModeAPIService.ApiBlockMirroringPoolPoolNamePut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/block/mirroring/pool/{pool_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"pool_name"+"}", url.PathEscape(parameterValueToString(r.poolName, "poolName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiBlockMirroringPoolPoolNamePutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
