/*
Ceph REST API

This is the official Ceph REST API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ceph

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DaemonAPIService DaemonAPI service
type DaemonAPIService service

type ApiApiDaemonDaemonNamePutRequest struct {
	ctx context.Context
	ApiService *DaemonAPIService
	daemonName string
	apiDaemonDaemonNamePutRequest *ApiDaemonDaemonNamePutRequest
}

func (r ApiApiDaemonDaemonNamePutRequest) ApiDaemonDaemonNamePutRequest(apiDaemonDaemonNamePutRequest ApiDaemonDaemonNamePutRequest) ApiApiDaemonDaemonNamePutRequest {
	r.apiDaemonDaemonNamePutRequest = &apiDaemonDaemonNamePutRequest
	return r
}

func (r ApiApiDaemonDaemonNamePutRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiDaemonDaemonNamePutExecute(r)
}

/*
ApiDaemonDaemonNamePut Method for ApiDaemonDaemonNamePut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param daemonName
 @return ApiApiDaemonDaemonNamePutRequest
*/
func (a *DaemonAPIService) ApiDaemonDaemonNamePut(ctx context.Context, daemonName string) ApiApiDaemonDaemonNamePutRequest {
	return ApiApiDaemonDaemonNamePutRequest{
		ApiService: a,
		ctx: ctx,
		daemonName: daemonName,
	}
}

// Execute executes the request
func (a *DaemonAPIService) ApiDaemonDaemonNamePutExecute(r ApiApiDaemonDaemonNamePutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DaemonAPIService.ApiDaemonDaemonNamePut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/daemon/{daemon_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"daemon_name"+"}", url.PathEscape(parameterValueToString(r.daemonName, "daemonName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v0.1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiDaemonDaemonNamePutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiDaemonGetRequest struct {
	ctx context.Context
	ApiService *DaemonAPIService
	daemonTypes *string
}

func (r ApiApiDaemonGetRequest) DaemonTypes(daemonTypes string) ApiApiDaemonGetRequest {
	r.daemonTypes = &daemonTypes
	return r
}

func (r ApiApiDaemonGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiDaemonGetExecute(r)
}

/*
ApiDaemonGet Method for ApiDaemonGet

List all daemons in the cluster. Also filter by the daemon types specified

        :param daemon_types: List of daemon types to filter by.
        :return: Returns list of daemons.
        :rtype: list
        

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiDaemonGetRequest
*/
func (a *DaemonAPIService) ApiDaemonGet(ctx context.Context) ApiApiDaemonGetRequest {
	return ApiApiDaemonGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DaemonAPIService) ApiDaemonGetExecute(r ApiApiDaemonGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DaemonAPIService.ApiDaemonGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/daemon"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.daemonTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "daemon_types", r.daemonTypes, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
