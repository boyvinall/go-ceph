/*
Ceph REST API

This is the official Ceph REST API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ceph

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApiCephfsSubvolumePostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiCephfsSubvolumePostRequest{}

// ApiCephfsSubvolumePostRequest struct for ApiCephfsSubvolumePostRequest
type ApiCephfsSubvolumePostRequest struct {
	SubvolName string `json:"subvol_name"`
	VolName string `json:"vol_name"`
}

type _ApiCephfsSubvolumePostRequest ApiCephfsSubvolumePostRequest

// NewApiCephfsSubvolumePostRequest instantiates a new ApiCephfsSubvolumePostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiCephfsSubvolumePostRequest(subvolName string, volName string) *ApiCephfsSubvolumePostRequest {
	this := ApiCephfsSubvolumePostRequest{}
	this.SubvolName = subvolName
	this.VolName = volName
	return &this
}

// NewApiCephfsSubvolumePostRequestWithDefaults instantiates a new ApiCephfsSubvolumePostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiCephfsSubvolumePostRequestWithDefaults() *ApiCephfsSubvolumePostRequest {
	this := ApiCephfsSubvolumePostRequest{}
	return &this
}

// GetSubvolName returns the SubvolName field value
func (o *ApiCephfsSubvolumePostRequest) GetSubvolName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubvolName
}

// GetSubvolNameOk returns a tuple with the SubvolName field value
// and a boolean to check if the value has been set.
func (o *ApiCephfsSubvolumePostRequest) GetSubvolNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubvolName, true
}

// SetSubvolName sets field value
func (o *ApiCephfsSubvolumePostRequest) SetSubvolName(v string) {
	o.SubvolName = v
}

// GetVolName returns the VolName field value
func (o *ApiCephfsSubvolumePostRequest) GetVolName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VolName
}

// GetVolNameOk returns a tuple with the VolName field value
// and a boolean to check if the value has been set.
func (o *ApiCephfsSubvolumePostRequest) GetVolNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VolName, true
}

// SetVolName sets field value
func (o *ApiCephfsSubvolumePostRequest) SetVolName(v string) {
	o.VolName = v
}

func (o ApiCephfsSubvolumePostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiCephfsSubvolumePostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["subvol_name"] = o.SubvolName
	toSerialize["vol_name"] = o.VolName
	return toSerialize, nil
}

func (o *ApiCephfsSubvolumePostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"subvol_name",
		"vol_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiCephfsSubvolumePostRequest := _ApiCephfsSubvolumePostRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiCephfsSubvolumePostRequest)

	if err != nil {
		return err
	}

	*o = ApiCephfsSubvolumePostRequest(varApiCephfsSubvolumePostRequest)

	return err
}

type NullableApiCephfsSubvolumePostRequest struct {
	value *ApiCephfsSubvolumePostRequest
	isSet bool
}

func (v NullableApiCephfsSubvolumePostRequest) Get() *ApiCephfsSubvolumePostRequest {
	return v.value
}

func (v *NullableApiCephfsSubvolumePostRequest) Set(val *ApiCephfsSubvolumePostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableApiCephfsSubvolumePostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableApiCephfsSubvolumePostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiCephfsSubvolumePostRequest(val *ApiCephfsSubvolumePostRequest) *NullableApiCephfsSubvolumePostRequest {
	return &NullableApiCephfsSubvolumePostRequest{value: val, isSet: true}
}

func (v NullableApiCephfsSubvolumePostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiCephfsSubvolumePostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


