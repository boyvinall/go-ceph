/*
Ceph REST API

This is the official Ceph REST API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ceph

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApiCephfsAuthPutRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiCephfsAuthPutRequest{}

// ApiCephfsAuthPutRequest struct for ApiCephfsAuthPutRequest
type ApiCephfsAuthPutRequest struct {
	// Path and given capabilities
	Caps string `json:"caps"`
	// Cephx user ID
	ClientId string `json:"client_id"`
	// File system name
	FsName string `json:"fs_name"`
	// File System Identifier
	RootSquash string `json:"root_squash"`
}

type _ApiCephfsAuthPutRequest ApiCephfsAuthPutRequest

// NewApiCephfsAuthPutRequest instantiates a new ApiCephfsAuthPutRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiCephfsAuthPutRequest(caps string, clientId string, fsName string, rootSquash string) *ApiCephfsAuthPutRequest {
	this := ApiCephfsAuthPutRequest{}
	this.Caps = caps
	this.ClientId = clientId
	this.FsName = fsName
	this.RootSquash = rootSquash
	return &this
}

// NewApiCephfsAuthPutRequestWithDefaults instantiates a new ApiCephfsAuthPutRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiCephfsAuthPutRequestWithDefaults() *ApiCephfsAuthPutRequest {
	this := ApiCephfsAuthPutRequest{}
	return &this
}

// GetCaps returns the Caps field value
func (o *ApiCephfsAuthPutRequest) GetCaps() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Caps
}

// GetCapsOk returns a tuple with the Caps field value
// and a boolean to check if the value has been set.
func (o *ApiCephfsAuthPutRequest) GetCapsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Caps, true
}

// SetCaps sets field value
func (o *ApiCephfsAuthPutRequest) SetCaps(v string) {
	o.Caps = v
}

// GetClientId returns the ClientId field value
func (o *ApiCephfsAuthPutRequest) GetClientId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value
// and a boolean to check if the value has been set.
func (o *ApiCephfsAuthPutRequest) GetClientIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientId, true
}

// SetClientId sets field value
func (o *ApiCephfsAuthPutRequest) SetClientId(v string) {
	o.ClientId = v
}

// GetFsName returns the FsName field value
func (o *ApiCephfsAuthPutRequest) GetFsName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FsName
}

// GetFsNameOk returns a tuple with the FsName field value
// and a boolean to check if the value has been set.
func (o *ApiCephfsAuthPutRequest) GetFsNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FsName, true
}

// SetFsName sets field value
func (o *ApiCephfsAuthPutRequest) SetFsName(v string) {
	o.FsName = v
}

// GetRootSquash returns the RootSquash field value
func (o *ApiCephfsAuthPutRequest) GetRootSquash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RootSquash
}

// GetRootSquashOk returns a tuple with the RootSquash field value
// and a boolean to check if the value has been set.
func (o *ApiCephfsAuthPutRequest) GetRootSquashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RootSquash, true
}

// SetRootSquash sets field value
func (o *ApiCephfsAuthPutRequest) SetRootSquash(v string) {
	o.RootSquash = v
}

func (o ApiCephfsAuthPutRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiCephfsAuthPutRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["caps"] = o.Caps
	toSerialize["client_id"] = o.ClientId
	toSerialize["fs_name"] = o.FsName
	toSerialize["root_squash"] = o.RootSquash
	return toSerialize, nil
}

func (o *ApiCephfsAuthPutRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"caps",
		"client_id",
		"fs_name",
		"root_squash",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiCephfsAuthPutRequest := _ApiCephfsAuthPutRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiCephfsAuthPutRequest)

	if err != nil {
		return err
	}

	*o = ApiCephfsAuthPutRequest(varApiCephfsAuthPutRequest)

	return err
}

type NullableApiCephfsAuthPutRequest struct {
	value *ApiCephfsAuthPutRequest
	isSet bool
}

func (v NullableApiCephfsAuthPutRequest) Get() *ApiCephfsAuthPutRequest {
	return v.value
}

func (v *NullableApiCephfsAuthPutRequest) Set(val *ApiCephfsAuthPutRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableApiCephfsAuthPutRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableApiCephfsAuthPutRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiCephfsAuthPutRequest(val *ApiCephfsAuthPutRequest) *NullableApiCephfsAuthPutRequest {
	return &NullableApiCephfsAuthPutRequest{value: val, isSet: true}
}

func (v NullableApiCephfsAuthPutRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiCephfsAuthPutRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


