/*
Ceph REST API

This is the official Ceph REST API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ceph

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApiTelemetryReportGet200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiTelemetryReportGet200Response{}

// ApiTelemetryReportGet200Response struct for ApiTelemetryReportGet200Response
type ApiTelemetryReportGet200Response struct {
	// 
	DeviceReport string `json:"device_report"`
	Report ApiTelemetryReportGet200ResponseReport `json:"report"`
}

type _ApiTelemetryReportGet200Response ApiTelemetryReportGet200Response

// NewApiTelemetryReportGet200Response instantiates a new ApiTelemetryReportGet200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiTelemetryReportGet200Response(deviceReport string, report ApiTelemetryReportGet200ResponseReport) *ApiTelemetryReportGet200Response {
	this := ApiTelemetryReportGet200Response{}
	this.DeviceReport = deviceReport
	this.Report = report
	return &this
}

// NewApiTelemetryReportGet200ResponseWithDefaults instantiates a new ApiTelemetryReportGet200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiTelemetryReportGet200ResponseWithDefaults() *ApiTelemetryReportGet200Response {
	this := ApiTelemetryReportGet200Response{}
	return &this
}

// GetDeviceReport returns the DeviceReport field value
func (o *ApiTelemetryReportGet200Response) GetDeviceReport() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeviceReport
}

// GetDeviceReportOk returns a tuple with the DeviceReport field value
// and a boolean to check if the value has been set.
func (o *ApiTelemetryReportGet200Response) GetDeviceReportOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceReport, true
}

// SetDeviceReport sets field value
func (o *ApiTelemetryReportGet200Response) SetDeviceReport(v string) {
	o.DeviceReport = v
}

// GetReport returns the Report field value
func (o *ApiTelemetryReportGet200Response) GetReport() ApiTelemetryReportGet200ResponseReport {
	if o == nil {
		var ret ApiTelemetryReportGet200ResponseReport
		return ret
	}

	return o.Report
}

// GetReportOk returns a tuple with the Report field value
// and a boolean to check if the value has been set.
func (o *ApiTelemetryReportGet200Response) GetReportOk() (*ApiTelemetryReportGet200ResponseReport, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Report, true
}

// SetReport sets field value
func (o *ApiTelemetryReportGet200Response) SetReport(v ApiTelemetryReportGet200ResponseReport) {
	o.Report = v
}

func (o ApiTelemetryReportGet200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiTelemetryReportGet200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["device_report"] = o.DeviceReport
	toSerialize["report"] = o.Report
	return toSerialize, nil
}

func (o *ApiTelemetryReportGet200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"device_report",
		"report",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiTelemetryReportGet200Response := _ApiTelemetryReportGet200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiTelemetryReportGet200Response)

	if err != nil {
		return err
	}

	*o = ApiTelemetryReportGet200Response(varApiTelemetryReportGet200Response)

	return err
}

type NullableApiTelemetryReportGet200Response struct {
	value *ApiTelemetryReportGet200Response
	isSet bool
}

func (v NullableApiTelemetryReportGet200Response) Get() *ApiTelemetryReportGet200Response {
	return v.value
}

func (v *NullableApiTelemetryReportGet200Response) Set(val *ApiTelemetryReportGet200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableApiTelemetryReportGet200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableApiTelemetryReportGet200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiTelemetryReportGet200Response(val *ApiTelemetryReportGet200Response) *NullableApiTelemetryReportGet200Response {
	return &NullableApiTelemetryReportGet200Response{value: val, isSet: true}
}

func (v NullableApiTelemetryReportGet200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiTelemetryReportGet200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


