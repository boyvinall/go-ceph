/*
Ceph REST API

This is the official Ceph REST API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ceph

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// RgwUserAPIService RgwUserAPI service
type RgwUserAPIService service

type ApiApiRgwUserGetRequest struct {
	ctx context.Context
	ApiService *RgwUserAPIService
	daemonName *string
}

func (r ApiApiRgwUserGetRequest) DaemonName(daemonName string) ApiApiRgwUserGetRequest {
	r.daemonName = &daemonName
	return r
}

func (r ApiApiRgwUserGetRequest) Execute() (*ApiRgwUserGet200Response, *http.Response, error) {
	return r.ApiService.ApiRgwUserGetExecute(r)
}

/*
ApiRgwUserGet Display RGW Users

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiRgwUserGetRequest
*/
func (a *RgwUserAPIService) ApiRgwUserGet(ctx context.Context) ApiApiRgwUserGetRequest {
	return ApiApiRgwUserGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiRgwUserGet200Response
func (a *RgwUserAPIService) ApiRgwUserGetExecute(r ApiApiRgwUserGetRequest) (*ApiRgwUserGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiRgwUserGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RgwUserAPIService.ApiRgwUserGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/rgw/user"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.daemonName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "daemon_name", r.daemonName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiRgwUserGetEmailsGetRequest struct {
	ctx context.Context
	ApiService *RgwUserAPIService
	daemonName *string
}

func (r ApiApiRgwUserGetEmailsGetRequest) DaemonName(daemonName string) ApiApiRgwUserGetEmailsGetRequest {
	r.daemonName = &daemonName
	return r
}

func (r ApiApiRgwUserGetEmailsGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiRgwUserGetEmailsGetExecute(r)
}

/*
ApiRgwUserGetEmailsGet Method for ApiRgwUserGetEmailsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiRgwUserGetEmailsGetRequest
*/
func (a *RgwUserAPIService) ApiRgwUserGetEmailsGet(ctx context.Context) ApiApiRgwUserGetEmailsGetRequest {
	return ApiApiRgwUserGetEmailsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *RgwUserAPIService) ApiRgwUserGetEmailsGetExecute(r ApiApiRgwUserGetEmailsGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RgwUserAPIService.ApiRgwUserGetEmailsGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/rgw/user/get_emails"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.daemonName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "daemon_name", r.daemonName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiRgwUserPostRequest struct {
	ctx context.Context
	ApiService *RgwUserAPIService
	apiRgwUserPostRequest *ApiRgwUserPostRequest
}

func (r ApiApiRgwUserPostRequest) ApiRgwUserPostRequest(apiRgwUserPostRequest ApiRgwUserPostRequest) ApiApiRgwUserPostRequest {
	r.apiRgwUserPostRequest = &apiRgwUserPostRequest
	return r
}

func (r ApiApiRgwUserPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiRgwUserPostExecute(r)
}

/*
ApiRgwUserPost Method for ApiRgwUserPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiRgwUserPostRequest
*/
func (a *RgwUserAPIService) ApiRgwUserPost(ctx context.Context) ApiApiRgwUserPostRequest {
	return ApiApiRgwUserPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *RgwUserAPIService) ApiRgwUserPostExecute(r ApiApiRgwUserPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RgwUserAPIService.ApiRgwUserPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/rgw/user"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiRgwUserPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiRgwUserUidCapabilityDeleteRequest struct {
	ctx context.Context
	ApiService *RgwUserAPIService
	uid string
	type_ *string
	perm *string
	daemonName *string
}

func (r ApiApiRgwUserUidCapabilityDeleteRequest) Type_(type_ string) ApiApiRgwUserUidCapabilityDeleteRequest {
	r.type_ = &type_
	return r
}

func (r ApiApiRgwUserUidCapabilityDeleteRequest) Perm(perm string) ApiApiRgwUserUidCapabilityDeleteRequest {
	r.perm = &perm
	return r
}

func (r ApiApiRgwUserUidCapabilityDeleteRequest) DaemonName(daemonName string) ApiApiRgwUserUidCapabilityDeleteRequest {
	r.daemonName = &daemonName
	return r
}

func (r ApiApiRgwUserUidCapabilityDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiRgwUserUidCapabilityDeleteExecute(r)
}

/*
ApiRgwUserUidCapabilityDelete Method for ApiRgwUserUidCapabilityDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uid
 @return ApiApiRgwUserUidCapabilityDeleteRequest
*/
func (a *RgwUserAPIService) ApiRgwUserUidCapabilityDelete(ctx context.Context, uid string) ApiApiRgwUserUidCapabilityDeleteRequest {
	return ApiApiRgwUserUidCapabilityDeleteRequest{
		ApiService: a,
		ctx: ctx,
		uid: uid,
	}
}

// Execute executes the request
func (a *RgwUserAPIService) ApiRgwUserUidCapabilityDeleteExecute(r ApiApiRgwUserUidCapabilityDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RgwUserAPIService.ApiRgwUserUidCapabilityDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/rgw/user/{uid}/capability"
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.type_ == nil {
		return nil, reportError("type_ is required and must be specified")
	}
	if r.perm == nil {
		return nil, reportError("perm is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "perm", r.perm, "form", "")
	if r.daemonName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "daemon_name", r.daemonName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiRgwUserUidCapabilityPostRequest struct {
	ctx context.Context
	ApiService *RgwUserAPIService
	uid string
	apiRgwUserUidCapabilityPostRequest *ApiRgwUserUidCapabilityPostRequest
}

func (r ApiApiRgwUserUidCapabilityPostRequest) ApiRgwUserUidCapabilityPostRequest(apiRgwUserUidCapabilityPostRequest ApiRgwUserUidCapabilityPostRequest) ApiApiRgwUserUidCapabilityPostRequest {
	r.apiRgwUserUidCapabilityPostRequest = &apiRgwUserUidCapabilityPostRequest
	return r
}

func (r ApiApiRgwUserUidCapabilityPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiRgwUserUidCapabilityPostExecute(r)
}

/*
ApiRgwUserUidCapabilityPost Method for ApiRgwUserUidCapabilityPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uid
 @return ApiApiRgwUserUidCapabilityPostRequest
*/
func (a *RgwUserAPIService) ApiRgwUserUidCapabilityPost(ctx context.Context, uid string) ApiApiRgwUserUidCapabilityPostRequest {
	return ApiApiRgwUserUidCapabilityPostRequest{
		ApiService: a,
		ctx: ctx,
		uid: uid,
	}
}

// Execute executes the request
func (a *RgwUserAPIService) ApiRgwUserUidCapabilityPostExecute(r ApiApiRgwUserUidCapabilityPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RgwUserAPIService.ApiRgwUserUidCapabilityPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/rgw/user/{uid}/capability"
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiRgwUserUidCapabilityPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiRgwUserUidDeleteRequest struct {
	ctx context.Context
	ApiService *RgwUserAPIService
	uid string
	daemonName *string
}

func (r ApiApiRgwUserUidDeleteRequest) DaemonName(daemonName string) ApiApiRgwUserUidDeleteRequest {
	r.daemonName = &daemonName
	return r
}

func (r ApiApiRgwUserUidDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiRgwUserUidDeleteExecute(r)
}

/*
ApiRgwUserUidDelete Method for ApiRgwUserUidDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uid
 @return ApiApiRgwUserUidDeleteRequest
*/
func (a *RgwUserAPIService) ApiRgwUserUidDelete(ctx context.Context, uid string) ApiApiRgwUserUidDeleteRequest {
	return ApiApiRgwUserUidDeleteRequest{
		ApiService: a,
		ctx: ctx,
		uid: uid,
	}
}

// Execute executes the request
func (a *RgwUserAPIService) ApiRgwUserUidDeleteExecute(r ApiApiRgwUserUidDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RgwUserAPIService.ApiRgwUserUidDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/rgw/user/{uid}"
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.daemonName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "daemon_name", r.daemonName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiRgwUserUidGetRequest struct {
	ctx context.Context
	ApiService *RgwUserAPIService
	uid string
	daemonName *string
	stats *bool
}

func (r ApiApiRgwUserUidGetRequest) DaemonName(daemonName string) ApiApiRgwUserUidGetRequest {
	r.daemonName = &daemonName
	return r
}

func (r ApiApiRgwUserUidGetRequest) Stats(stats bool) ApiApiRgwUserUidGetRequest {
	r.stats = &stats
	return r
}

func (r ApiApiRgwUserUidGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiRgwUserUidGetExecute(r)
}

/*
ApiRgwUserUidGet Method for ApiRgwUserUidGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uid
 @return ApiApiRgwUserUidGetRequest
*/
func (a *RgwUserAPIService) ApiRgwUserUidGet(ctx context.Context, uid string) ApiApiRgwUserUidGetRequest {
	return ApiApiRgwUserUidGetRequest{
		ApiService: a,
		ctx: ctx,
		uid: uid,
	}
}

// Execute executes the request
func (a *RgwUserAPIService) ApiRgwUserUidGetExecute(r ApiApiRgwUserUidGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RgwUserAPIService.ApiRgwUserUidGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/rgw/user/{uid}"
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.daemonName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "daemon_name", r.daemonName, "form", "")
	}
	if r.stats != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stats", r.stats, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiRgwUserUidKeyDeleteRequest struct {
	ctx context.Context
	ApiService *RgwUserAPIService
	uid string
	keyType *string
	subuser *string
	accessKey *string
	daemonName *string
}

func (r ApiApiRgwUserUidKeyDeleteRequest) KeyType(keyType string) ApiApiRgwUserUidKeyDeleteRequest {
	r.keyType = &keyType
	return r
}

func (r ApiApiRgwUserUidKeyDeleteRequest) Subuser(subuser string) ApiApiRgwUserUidKeyDeleteRequest {
	r.subuser = &subuser
	return r
}

func (r ApiApiRgwUserUidKeyDeleteRequest) AccessKey(accessKey string) ApiApiRgwUserUidKeyDeleteRequest {
	r.accessKey = &accessKey
	return r
}

func (r ApiApiRgwUserUidKeyDeleteRequest) DaemonName(daemonName string) ApiApiRgwUserUidKeyDeleteRequest {
	r.daemonName = &daemonName
	return r
}

func (r ApiApiRgwUserUidKeyDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiRgwUserUidKeyDeleteExecute(r)
}

/*
ApiRgwUserUidKeyDelete Method for ApiRgwUserUidKeyDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uid
 @return ApiApiRgwUserUidKeyDeleteRequest
*/
func (a *RgwUserAPIService) ApiRgwUserUidKeyDelete(ctx context.Context, uid string) ApiApiRgwUserUidKeyDeleteRequest {
	return ApiApiRgwUserUidKeyDeleteRequest{
		ApiService: a,
		ctx: ctx,
		uid: uid,
	}
}

// Execute executes the request
func (a *RgwUserAPIService) ApiRgwUserUidKeyDeleteExecute(r ApiApiRgwUserUidKeyDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RgwUserAPIService.ApiRgwUserUidKeyDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/rgw/user/{uid}/key"
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.keyType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "key_type", r.keyType, "form", "")
	}
	if r.subuser != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subuser", r.subuser, "form", "")
	}
	if r.accessKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "access_key", r.accessKey, "form", "")
	}
	if r.daemonName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "daemon_name", r.daemonName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiRgwUserUidKeyPostRequest struct {
	ctx context.Context
	ApiService *RgwUserAPIService
	uid string
	apiRgwUserUidKeyPostRequest *ApiRgwUserUidKeyPostRequest
}

func (r ApiApiRgwUserUidKeyPostRequest) ApiRgwUserUidKeyPostRequest(apiRgwUserUidKeyPostRequest ApiRgwUserUidKeyPostRequest) ApiApiRgwUserUidKeyPostRequest {
	r.apiRgwUserUidKeyPostRequest = &apiRgwUserUidKeyPostRequest
	return r
}

func (r ApiApiRgwUserUidKeyPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiRgwUserUidKeyPostExecute(r)
}

/*
ApiRgwUserUidKeyPost Method for ApiRgwUserUidKeyPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uid
 @return ApiApiRgwUserUidKeyPostRequest
*/
func (a *RgwUserAPIService) ApiRgwUserUidKeyPost(ctx context.Context, uid string) ApiApiRgwUserUidKeyPostRequest {
	return ApiApiRgwUserUidKeyPostRequest{
		ApiService: a,
		ctx: ctx,
		uid: uid,
	}
}

// Execute executes the request
func (a *RgwUserAPIService) ApiRgwUserUidKeyPostExecute(r ApiApiRgwUserUidKeyPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RgwUserAPIService.ApiRgwUserUidKeyPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/rgw/user/{uid}/key"
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiRgwUserUidKeyPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiRgwUserUidPutRequest struct {
	ctx context.Context
	ApiService *RgwUserAPIService
	uid string
	apiRgwUserUidPutRequest *ApiRgwUserUidPutRequest
}

func (r ApiApiRgwUserUidPutRequest) ApiRgwUserUidPutRequest(apiRgwUserUidPutRequest ApiRgwUserUidPutRequest) ApiApiRgwUserUidPutRequest {
	r.apiRgwUserUidPutRequest = &apiRgwUserUidPutRequest
	return r
}

func (r ApiApiRgwUserUidPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiRgwUserUidPutExecute(r)
}

/*
ApiRgwUserUidPut Method for ApiRgwUserUidPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uid
 @return ApiApiRgwUserUidPutRequest
*/
func (a *RgwUserAPIService) ApiRgwUserUidPut(ctx context.Context, uid string) ApiApiRgwUserUidPutRequest {
	return ApiApiRgwUserUidPutRequest{
		ApiService: a,
		ctx: ctx,
		uid: uid,
	}
}

// Execute executes the request
func (a *RgwUserAPIService) ApiRgwUserUidPutExecute(r ApiApiRgwUserUidPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RgwUserAPIService.ApiRgwUserUidPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/rgw/user/{uid}"
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiRgwUserUidPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiRgwUserUidQuotaGetRequest struct {
	ctx context.Context
	ApiService *RgwUserAPIService
	uid string
	daemonName *string
}

func (r ApiApiRgwUserUidQuotaGetRequest) DaemonName(daemonName string) ApiApiRgwUserUidQuotaGetRequest {
	r.daemonName = &daemonName
	return r
}

func (r ApiApiRgwUserUidQuotaGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiRgwUserUidQuotaGetExecute(r)
}

/*
ApiRgwUserUidQuotaGet Method for ApiRgwUserUidQuotaGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uid
 @return ApiApiRgwUserUidQuotaGetRequest
*/
func (a *RgwUserAPIService) ApiRgwUserUidQuotaGet(ctx context.Context, uid string) ApiApiRgwUserUidQuotaGetRequest {
	return ApiApiRgwUserUidQuotaGetRequest{
		ApiService: a,
		ctx: ctx,
		uid: uid,
	}
}

// Execute executes the request
func (a *RgwUserAPIService) ApiRgwUserUidQuotaGetExecute(r ApiApiRgwUserUidQuotaGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RgwUserAPIService.ApiRgwUserUidQuotaGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/rgw/user/{uid}/quota"
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.daemonName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "daemon_name", r.daemonName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiRgwUserUidQuotaPutRequest struct {
	ctx context.Context
	ApiService *RgwUserAPIService
	uid string
	apiRgwUserUidQuotaPutRequest *ApiRgwUserUidQuotaPutRequest
}

func (r ApiApiRgwUserUidQuotaPutRequest) ApiRgwUserUidQuotaPutRequest(apiRgwUserUidQuotaPutRequest ApiRgwUserUidQuotaPutRequest) ApiApiRgwUserUidQuotaPutRequest {
	r.apiRgwUserUidQuotaPutRequest = &apiRgwUserUidQuotaPutRequest
	return r
}

func (r ApiApiRgwUserUidQuotaPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiRgwUserUidQuotaPutExecute(r)
}

/*
ApiRgwUserUidQuotaPut Method for ApiRgwUserUidQuotaPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uid
 @return ApiApiRgwUserUidQuotaPutRequest
*/
func (a *RgwUserAPIService) ApiRgwUserUidQuotaPut(ctx context.Context, uid string) ApiApiRgwUserUidQuotaPutRequest {
	return ApiApiRgwUserUidQuotaPutRequest{
		ApiService: a,
		ctx: ctx,
		uid: uid,
	}
}

// Execute executes the request
func (a *RgwUserAPIService) ApiRgwUserUidQuotaPutExecute(r ApiApiRgwUserUidQuotaPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RgwUserAPIService.ApiRgwUserUidQuotaPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/rgw/user/{uid}/quota"
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiRgwUserUidQuotaPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiRgwUserUidSubuserPostRequest struct {
	ctx context.Context
	ApiService *RgwUserAPIService
	uid string
	apiRgwUserUidSubuserPostRequest *ApiRgwUserUidSubuserPostRequest
}

func (r ApiApiRgwUserUidSubuserPostRequest) ApiRgwUserUidSubuserPostRequest(apiRgwUserUidSubuserPostRequest ApiRgwUserUidSubuserPostRequest) ApiApiRgwUserUidSubuserPostRequest {
	r.apiRgwUserUidSubuserPostRequest = &apiRgwUserUidSubuserPostRequest
	return r
}

func (r ApiApiRgwUserUidSubuserPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiRgwUserUidSubuserPostExecute(r)
}

/*
ApiRgwUserUidSubuserPost Method for ApiRgwUserUidSubuserPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uid
 @return ApiApiRgwUserUidSubuserPostRequest
*/
func (a *RgwUserAPIService) ApiRgwUserUidSubuserPost(ctx context.Context, uid string) ApiApiRgwUserUidSubuserPostRequest {
	return ApiApiRgwUserUidSubuserPostRequest{
		ApiService: a,
		ctx: ctx,
		uid: uid,
	}
}

// Execute executes the request
func (a *RgwUserAPIService) ApiRgwUserUidSubuserPostExecute(r ApiApiRgwUserUidSubuserPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RgwUserAPIService.ApiRgwUserUidSubuserPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/rgw/user/{uid}/subuser"
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiRgwUserUidSubuserPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiRgwUserUidSubuserSubuserDeleteRequest struct {
	ctx context.Context
	ApiService *RgwUserAPIService
	uid string
	subuser string
	purgeKeys *string
	daemonName *string
}

func (r ApiApiRgwUserUidSubuserSubuserDeleteRequest) PurgeKeys(purgeKeys string) ApiApiRgwUserUidSubuserSubuserDeleteRequest {
	r.purgeKeys = &purgeKeys
	return r
}

func (r ApiApiRgwUserUidSubuserSubuserDeleteRequest) DaemonName(daemonName string) ApiApiRgwUserUidSubuserSubuserDeleteRequest {
	r.daemonName = &daemonName
	return r
}

func (r ApiApiRgwUserUidSubuserSubuserDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiRgwUserUidSubuserSubuserDeleteExecute(r)
}

/*
ApiRgwUserUidSubuserSubuserDelete Method for ApiRgwUserUidSubuserSubuserDelete


        :param purge_keys: Set to False to do not purge the keys.
                           Note, this only works for s3 subusers.
        

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uid
 @param subuser
 @return ApiApiRgwUserUidSubuserSubuserDeleteRequest
*/
func (a *RgwUserAPIService) ApiRgwUserUidSubuserSubuserDelete(ctx context.Context, uid string, subuser string) ApiApiRgwUserUidSubuserSubuserDeleteRequest {
	return ApiApiRgwUserUidSubuserSubuserDeleteRequest{
		ApiService: a,
		ctx: ctx,
		uid: uid,
		subuser: subuser,
	}
}

// Execute executes the request
func (a *RgwUserAPIService) ApiRgwUserUidSubuserSubuserDeleteExecute(r ApiApiRgwUserUidSubuserSubuserDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RgwUserAPIService.ApiRgwUserUidSubuserSubuserDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/rgw/user/{uid}/subuser/{subuser}"
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterValueToString(r.uid, "uid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subuser"+"}", url.PathEscape(parameterValueToString(r.subuser, "subuser")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.purgeKeys != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "purge_keys", r.purgeKeys, "form", "")
	}
	if r.daemonName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "daemon_name", r.daemonName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
