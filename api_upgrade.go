/*
Ceph REST API

This is the official Ceph REST API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ceph

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// UpgradeAPIService UpgradeAPI service
type UpgradeAPIService service

type ApiApiClusterUpgradeGetRequest struct {
	ctx context.Context
	ApiService *UpgradeAPIService
	tags *bool
	image *string
	showAllVersions *bool
}

// Show all image tags
func (r ApiApiClusterUpgradeGetRequest) Tags(tags bool) ApiApiClusterUpgradeGetRequest {
	r.tags = &tags
	return r
}

// Ceph Image
func (r ApiApiClusterUpgradeGetRequest) Image(image string) ApiApiClusterUpgradeGetRequest {
	r.image = &image
	return r
}

// Show all available versions
func (r ApiApiClusterUpgradeGetRequest) ShowAllVersions(showAllVersions bool) ApiApiClusterUpgradeGetRequest {
	r.showAllVersions = &showAllVersions
	return r
}

func (r ApiApiClusterUpgradeGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiClusterUpgradeGetExecute(r)
}

/*
ApiClusterUpgradeGet Get the available versions to upgrade

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiClusterUpgradeGetRequest
*/
func (a *UpgradeAPIService) ApiClusterUpgradeGet(ctx context.Context) ApiApiClusterUpgradeGetRequest {
	return ApiApiClusterUpgradeGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *UpgradeAPIService) ApiClusterUpgradeGetExecute(r ApiApiClusterUpgradeGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UpgradeAPIService.ApiClusterUpgradeGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/cluster/upgrade"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.tags != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tags", r.tags, "form", "")
	}
	if r.image != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "image", r.image, "form", "")
	}
	if r.showAllVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "show_all_versions", r.showAllVersions, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiClusterUpgradePausePutRequest struct {
	ctx context.Context
	ApiService *UpgradeAPIService
}

func (r ApiApiClusterUpgradePausePutRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiClusterUpgradePausePutExecute(r)
}

/*
ApiClusterUpgradePausePut Pause the cluster upgrade

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiClusterUpgradePausePutRequest
*/
func (a *UpgradeAPIService) ApiClusterUpgradePausePut(ctx context.Context) ApiApiClusterUpgradePausePutRequest {
	return ApiApiClusterUpgradePausePutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *UpgradeAPIService) ApiClusterUpgradePausePutExecute(r ApiApiClusterUpgradePausePutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UpgradeAPIService.ApiClusterUpgradePausePut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/cluster/upgrade/pause"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiClusterUpgradeResumePutRequest struct {
	ctx context.Context
	ApiService *UpgradeAPIService
}

func (r ApiApiClusterUpgradeResumePutRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiClusterUpgradeResumePutExecute(r)
}

/*
ApiClusterUpgradeResumePut Resume the cluster upgrade

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiClusterUpgradeResumePutRequest
*/
func (a *UpgradeAPIService) ApiClusterUpgradeResumePut(ctx context.Context) ApiApiClusterUpgradeResumePutRequest {
	return ApiApiClusterUpgradeResumePutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *UpgradeAPIService) ApiClusterUpgradeResumePutExecute(r ApiApiClusterUpgradeResumePutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UpgradeAPIService.ApiClusterUpgradeResumePut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/cluster/upgrade/resume"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiClusterUpgradeStartPostRequest struct {
	ctx context.Context
	ApiService *UpgradeAPIService
	apiClusterUpgradeStartPostRequest *ApiClusterUpgradeStartPostRequest
}

func (r ApiApiClusterUpgradeStartPostRequest) ApiClusterUpgradeStartPostRequest(apiClusterUpgradeStartPostRequest ApiClusterUpgradeStartPostRequest) ApiApiClusterUpgradeStartPostRequest {
	r.apiClusterUpgradeStartPostRequest = &apiClusterUpgradeStartPostRequest
	return r
}

func (r ApiApiClusterUpgradeStartPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiClusterUpgradeStartPostExecute(r)
}

/*
ApiClusterUpgradeStartPost Start the cluster upgrade

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiClusterUpgradeStartPostRequest
*/
func (a *UpgradeAPIService) ApiClusterUpgradeStartPost(ctx context.Context) ApiApiClusterUpgradeStartPostRequest {
	return ApiApiClusterUpgradeStartPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *UpgradeAPIService) ApiClusterUpgradeStartPostExecute(r ApiApiClusterUpgradeStartPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UpgradeAPIService.ApiClusterUpgradeStartPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/cluster/upgrade/start"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiClusterUpgradeStartPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiClusterUpgradeStatusGetRequest struct {
	ctx context.Context
	ApiService *UpgradeAPIService
}

func (r ApiApiClusterUpgradeStatusGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiClusterUpgradeStatusGetExecute(r)
}

/*
ApiClusterUpgradeStatusGet Get the cluster upgrade status

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiClusterUpgradeStatusGetRequest
*/
func (a *UpgradeAPIService) ApiClusterUpgradeStatusGet(ctx context.Context) ApiApiClusterUpgradeStatusGetRequest {
	return ApiApiClusterUpgradeStatusGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *UpgradeAPIService) ApiClusterUpgradeStatusGetExecute(r ApiApiClusterUpgradeStatusGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UpgradeAPIService.ApiClusterUpgradeStatusGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/cluster/upgrade/status"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiClusterUpgradeStopPutRequest struct {
	ctx context.Context
	ApiService *UpgradeAPIService
}

func (r ApiApiClusterUpgradeStopPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiClusterUpgradeStopPutExecute(r)
}

/*
ApiClusterUpgradeStopPut Stop the cluster upgrade

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiClusterUpgradeStopPutRequest
*/
func (a *UpgradeAPIService) ApiClusterUpgradeStopPut(ctx context.Context) ApiApiClusterUpgradeStopPutRequest {
	return ApiApiClusterUpgradeStopPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *UpgradeAPIService) ApiClusterUpgradeStopPutExecute(r ApiApiClusterUpgradeStopPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UpgradeAPIService.ApiClusterUpgradeStopPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/cluster/upgrade/stop"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
