/*
Ceph REST API

This is the official Ceph REST API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ceph

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// NVMeOFSubsystemListenerAPIService NVMeOFSubsystemListenerAPI service
type NVMeOFSubsystemListenerAPIService service

type ApiApiNvmeofSubsystemNqnListenerGetRequest struct {
	ctx context.Context
	ApiService *NVMeOFSubsystemListenerAPIService
	nqn string
	gwGroup *string
}

// NVMeoF gateway group
func (r ApiApiNvmeofSubsystemNqnListenerGetRequest) GwGroup(gwGroup string) ApiApiNvmeofSubsystemNqnListenerGetRequest {
	r.gwGroup = &gwGroup
	return r
}

func (r ApiApiNvmeofSubsystemNqnListenerGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiNvmeofSubsystemNqnListenerGetExecute(r)
}

/*
ApiNvmeofSubsystemNqnListenerGet List all NVMeoF listeners

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param nqn NVMeoF subsystem NQN
 @return ApiApiNvmeofSubsystemNqnListenerGetRequest
*/
func (a *NVMeOFSubsystemListenerAPIService) ApiNvmeofSubsystemNqnListenerGet(ctx context.Context, nqn string) ApiApiNvmeofSubsystemNqnListenerGetRequest {
	return ApiApiNvmeofSubsystemNqnListenerGetRequest{
		ApiService: a,
		ctx: ctx,
		nqn: nqn,
	}
}

// Execute executes the request
func (a *NVMeOFSubsystemListenerAPIService) ApiNvmeofSubsystemNqnListenerGetExecute(r ApiApiNvmeofSubsystemNqnListenerGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NVMeOFSubsystemListenerAPIService.ApiNvmeofSubsystemNqnListenerGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/nvmeof/subsystem/{nqn}/listener"
	localVarPath = strings.Replace(localVarPath, "{"+"nqn"+"}", url.PathEscape(parameterValueToString(r.nqn, "nqn")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.gwGroup != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gw_group", r.gwGroup, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiNvmeofSubsystemNqnListenerHostNameTraddrDeleteRequest struct {
	ctx context.Context
	ApiService *NVMeOFSubsystemListenerAPIService
	nqn string
	hostName string
	traddr string
	trsvcid *int32
	adrfam *int32
	force *bool
	gwGroup *string
}

// NVMeoF transport service port
func (r ApiApiNvmeofSubsystemNqnListenerHostNameTraddrDeleteRequest) Trsvcid(trsvcid int32) ApiApiNvmeofSubsystemNqnListenerHostNameTraddrDeleteRequest {
	r.trsvcid = &trsvcid
	return r
}

// NVMeoF address family (0 - IPv4, 1 - IPv6)
func (r ApiApiNvmeofSubsystemNqnListenerHostNameTraddrDeleteRequest) Adrfam(adrfam int32) ApiApiNvmeofSubsystemNqnListenerHostNameTraddrDeleteRequest {
	r.adrfam = &adrfam
	return r
}

func (r ApiApiNvmeofSubsystemNqnListenerHostNameTraddrDeleteRequest) Force(force bool) ApiApiNvmeofSubsystemNqnListenerHostNameTraddrDeleteRequest {
	r.force = &force
	return r
}

// NVMeoF gateway group
func (r ApiApiNvmeofSubsystemNqnListenerHostNameTraddrDeleteRequest) GwGroup(gwGroup string) ApiApiNvmeofSubsystemNqnListenerHostNameTraddrDeleteRequest {
	r.gwGroup = &gwGroup
	return r
}

func (r ApiApiNvmeofSubsystemNqnListenerHostNameTraddrDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiNvmeofSubsystemNqnListenerHostNameTraddrDeleteExecute(r)
}

/*
ApiNvmeofSubsystemNqnListenerHostNameTraddrDelete Delete an existing NVMeoF listener

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param nqn NVMeoF subsystem NQN
 @param hostName NVMeoF hostname
 @param traddr NVMeoF transport address
 @return ApiApiNvmeofSubsystemNqnListenerHostNameTraddrDeleteRequest
*/
func (a *NVMeOFSubsystemListenerAPIService) ApiNvmeofSubsystemNqnListenerHostNameTraddrDelete(ctx context.Context, nqn string, hostName string, traddr string) ApiApiNvmeofSubsystemNqnListenerHostNameTraddrDeleteRequest {
	return ApiApiNvmeofSubsystemNqnListenerHostNameTraddrDeleteRequest{
		ApiService: a,
		ctx: ctx,
		nqn: nqn,
		hostName: hostName,
		traddr: traddr,
	}
}

// Execute executes the request
func (a *NVMeOFSubsystemListenerAPIService) ApiNvmeofSubsystemNqnListenerHostNameTraddrDeleteExecute(r ApiApiNvmeofSubsystemNqnListenerHostNameTraddrDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NVMeOFSubsystemListenerAPIService.ApiNvmeofSubsystemNqnListenerHostNameTraddrDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/nvmeof/subsystem/{nqn}/listener/{host_name}/{traddr}"
	localVarPath = strings.Replace(localVarPath, "{"+"nqn"+"}", url.PathEscape(parameterValueToString(r.nqn, "nqn")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"host_name"+"}", url.PathEscape(parameterValueToString(r.hostName, "hostName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"traddr"+"}", url.PathEscape(parameterValueToString(r.traddr, "traddr")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.trsvcid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trsvcid", r.trsvcid, "form", "")
	}
	if r.adrfam != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "adrfam", r.adrfam, "form", "")
	}
	if r.force != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "force", r.force, "form", "")
	}
	if r.gwGroup != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gw_group", r.gwGroup, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiNvmeofSubsystemNqnListenerPostRequest struct {
	ctx context.Context
	ApiService *NVMeOFSubsystemListenerAPIService
	nqn string
	apiNvmeofSubsystemNqnListenerPostRequest *ApiNvmeofSubsystemNqnListenerPostRequest
}

func (r ApiApiNvmeofSubsystemNqnListenerPostRequest) ApiNvmeofSubsystemNqnListenerPostRequest(apiNvmeofSubsystemNqnListenerPostRequest ApiNvmeofSubsystemNqnListenerPostRequest) ApiApiNvmeofSubsystemNqnListenerPostRequest {
	r.apiNvmeofSubsystemNqnListenerPostRequest = &apiNvmeofSubsystemNqnListenerPostRequest
	return r
}

func (r ApiApiNvmeofSubsystemNqnListenerPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiNvmeofSubsystemNqnListenerPostExecute(r)
}

/*
ApiNvmeofSubsystemNqnListenerPost Create a new NVMeoF listener

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param nqn NVMeoF subsystem NQN
 @return ApiApiNvmeofSubsystemNqnListenerPostRequest
*/
func (a *NVMeOFSubsystemListenerAPIService) ApiNvmeofSubsystemNqnListenerPost(ctx context.Context, nqn string) ApiApiNvmeofSubsystemNqnListenerPostRequest {
	return ApiApiNvmeofSubsystemNqnListenerPostRequest{
		ApiService: a,
		ctx: ctx,
		nqn: nqn,
	}
}

// Execute executes the request
func (a *NVMeOFSubsystemListenerAPIService) ApiNvmeofSubsystemNqnListenerPostExecute(r ApiApiNvmeofSubsystemNqnListenerPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NVMeOFSubsystemListenerAPIService.ApiNvmeofSubsystemNqnListenerPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/nvmeof/subsystem/{nqn}/listener"
	localVarPath = strings.Replace(localVarPath, "{"+"nqn"+"}", url.PathEscape(parameterValueToString(r.nqn, "nqn")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiNvmeofSubsystemNqnListenerPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
