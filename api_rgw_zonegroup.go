/*
Ceph REST API

This is the official Ceph REST API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ceph

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// RgwZonegroupAPIService RgwZonegroupAPI service
type RgwZonegroupAPIService service

type ApiApiRgwZonegroupGetRequest struct {
	ctx context.Context
	ApiService *RgwZonegroupAPIService
}

func (r ApiApiRgwZonegroupGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiRgwZonegroupGetExecute(r)
}

/*
ApiRgwZonegroupGet Method for ApiRgwZonegroupGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiRgwZonegroupGetRequest
*/
func (a *RgwZonegroupAPIService) ApiRgwZonegroupGet(ctx context.Context) ApiApiRgwZonegroupGetRequest {
	return ApiApiRgwZonegroupGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *RgwZonegroupAPIService) ApiRgwZonegroupGetExecute(r ApiApiRgwZonegroupGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RgwZonegroupAPIService.ApiRgwZonegroupGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/rgw/zonegroup"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiRgwZonegroupGetAllZonegroupsInfoGetRequest struct {
	ctx context.Context
	ApiService *RgwZonegroupAPIService
}

func (r ApiApiRgwZonegroupGetAllZonegroupsInfoGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiRgwZonegroupGetAllZonegroupsInfoGetExecute(r)
}

/*
ApiRgwZonegroupGetAllZonegroupsInfoGet Method for ApiRgwZonegroupGetAllZonegroupsInfoGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiRgwZonegroupGetAllZonegroupsInfoGetRequest
*/
func (a *RgwZonegroupAPIService) ApiRgwZonegroupGetAllZonegroupsInfoGet(ctx context.Context) ApiApiRgwZonegroupGetAllZonegroupsInfoGetRequest {
	return ApiApiRgwZonegroupGetAllZonegroupsInfoGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *RgwZonegroupAPIService) ApiRgwZonegroupGetAllZonegroupsInfoGetExecute(r ApiApiRgwZonegroupGetAllZonegroupsInfoGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RgwZonegroupAPIService.ApiRgwZonegroupGetAllZonegroupsInfoGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/rgw/zonegroup/get_all_zonegroups_info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiRgwZonegroupPostRequest struct {
	ctx context.Context
	ApiService *RgwZonegroupAPIService
	apiRgwZonegroupPostRequest *ApiRgwZonegroupPostRequest
}

func (r ApiApiRgwZonegroupPostRequest) ApiRgwZonegroupPostRequest(apiRgwZonegroupPostRequest ApiRgwZonegroupPostRequest) ApiApiRgwZonegroupPostRequest {
	r.apiRgwZonegroupPostRequest = &apiRgwZonegroupPostRequest
	return r
}

func (r ApiApiRgwZonegroupPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiRgwZonegroupPostExecute(r)
}

/*
ApiRgwZonegroupPost Method for ApiRgwZonegroupPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiRgwZonegroupPostRequest
*/
func (a *RgwZonegroupAPIService) ApiRgwZonegroupPost(ctx context.Context) ApiApiRgwZonegroupPostRequest {
	return ApiApiRgwZonegroupPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *RgwZonegroupAPIService) ApiRgwZonegroupPostExecute(r ApiApiRgwZonegroupPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RgwZonegroupAPIService.ApiRgwZonegroupPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/rgw/zonegroup"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiRgwZonegroupPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiRgwZonegroupZonegroupNameDeleteRequest struct {
	ctx context.Context
	ApiService *RgwZonegroupAPIService
	zonegroupName string
	deletePools *string
	pools *string
}

func (r ApiApiRgwZonegroupZonegroupNameDeleteRequest) DeletePools(deletePools string) ApiApiRgwZonegroupZonegroupNameDeleteRequest {
	r.deletePools = &deletePools
	return r
}

func (r ApiApiRgwZonegroupZonegroupNameDeleteRequest) Pools(pools string) ApiApiRgwZonegroupZonegroupNameDeleteRequest {
	r.pools = &pools
	return r
}

func (r ApiApiRgwZonegroupZonegroupNameDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiRgwZonegroupZonegroupNameDeleteExecute(r)
}

/*
ApiRgwZonegroupZonegroupNameDelete Method for ApiRgwZonegroupZonegroupNameDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param zonegroupName
 @return ApiApiRgwZonegroupZonegroupNameDeleteRequest
*/
func (a *RgwZonegroupAPIService) ApiRgwZonegroupZonegroupNameDelete(ctx context.Context, zonegroupName string) ApiApiRgwZonegroupZonegroupNameDeleteRequest {
	return ApiApiRgwZonegroupZonegroupNameDeleteRequest{
		ApiService: a,
		ctx: ctx,
		zonegroupName: zonegroupName,
	}
}

// Execute executes the request
func (a *RgwZonegroupAPIService) ApiRgwZonegroupZonegroupNameDeleteExecute(r ApiApiRgwZonegroupZonegroupNameDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RgwZonegroupAPIService.ApiRgwZonegroupZonegroupNameDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/rgw/zonegroup/{zonegroup_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"zonegroup_name"+"}", url.PathEscape(parameterValueToString(r.zonegroupName, "zonegroupName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deletePools == nil {
		return nil, reportError("deletePools is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "delete_pools", r.deletePools, "form", "")
	if r.pools != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pools", r.pools, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiRgwZonegroupZonegroupNameGetRequest struct {
	ctx context.Context
	ApiService *RgwZonegroupAPIService
	zonegroupName string
}

func (r ApiApiRgwZonegroupZonegroupNameGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiRgwZonegroupZonegroupNameGetExecute(r)
}

/*
ApiRgwZonegroupZonegroupNameGet Method for ApiRgwZonegroupZonegroupNameGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param zonegroupName
 @return ApiApiRgwZonegroupZonegroupNameGetRequest
*/
func (a *RgwZonegroupAPIService) ApiRgwZonegroupZonegroupNameGet(ctx context.Context, zonegroupName string) ApiApiRgwZonegroupZonegroupNameGetRequest {
	return ApiApiRgwZonegroupZonegroupNameGetRequest{
		ApiService: a,
		ctx: ctx,
		zonegroupName: zonegroupName,
	}
}

// Execute executes the request
func (a *RgwZonegroupAPIService) ApiRgwZonegroupZonegroupNameGetExecute(r ApiApiRgwZonegroupZonegroupNameGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RgwZonegroupAPIService.ApiRgwZonegroupZonegroupNameGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/rgw/zonegroup/{zonegroup_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"zonegroup_name"+"}", url.PathEscape(parameterValueToString(r.zonegroupName, "zonegroupName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiRgwZonegroupZonegroupNamePutRequest struct {
	ctx context.Context
	ApiService *RgwZonegroupAPIService
	zonegroupName string
	apiRgwZonegroupZonegroupNamePutRequest *ApiRgwZonegroupZonegroupNamePutRequest
}

func (r ApiApiRgwZonegroupZonegroupNamePutRequest) ApiRgwZonegroupZonegroupNamePutRequest(apiRgwZonegroupZonegroupNamePutRequest ApiRgwZonegroupZonegroupNamePutRequest) ApiApiRgwZonegroupZonegroupNamePutRequest {
	r.apiRgwZonegroupZonegroupNamePutRequest = &apiRgwZonegroupZonegroupNamePutRequest
	return r
}

func (r ApiApiRgwZonegroupZonegroupNamePutRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiRgwZonegroupZonegroupNamePutExecute(r)
}

/*
ApiRgwZonegroupZonegroupNamePut Method for ApiRgwZonegroupZonegroupNamePut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param zonegroupName
 @return ApiApiRgwZonegroupZonegroupNamePutRequest
*/
func (a *RgwZonegroupAPIService) ApiRgwZonegroupZonegroupNamePut(ctx context.Context, zonegroupName string) ApiApiRgwZonegroupZonegroupNamePutRequest {
	return ApiApiRgwZonegroupZonegroupNamePutRequest{
		ApiService: a,
		ctx: ctx,
		zonegroupName: zonegroupName,
	}
}

// Execute executes the request
func (a *RgwZonegroupAPIService) ApiRgwZonegroupZonegroupNamePutExecute(r ApiApiRgwZonegroupZonegroupNamePutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RgwZonegroupAPIService.ApiRgwZonegroupZonegroupNamePut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/rgw/zonegroup/{zonegroup_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"zonegroup_name"+"}", url.PathEscape(parameterValueToString(r.zonegroupName, "zonegroupName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiRgwZonegroupZonegroupNamePutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
