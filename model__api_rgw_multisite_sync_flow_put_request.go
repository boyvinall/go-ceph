/*
Ceph REST API

This is the official Ceph REST API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ceph

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApiRgwMultisiteSyncFlowPutRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiRgwMultisiteSyncFlowPutRequest{}

// ApiRgwMultisiteSyncFlowPutRequest struct for ApiRgwMultisiteSyncFlowPutRequest
type ApiRgwMultisiteSyncFlowPutRequest struct {
	BucketName *string `json:"bucket_name,omitempty"`
	DestinationZone *string `json:"destination_zone,omitempty"`
	FlowId string `json:"flow_id"`
	FlowType string `json:"flow_type"`
	GroupId string `json:"group_id"`
	SourceZone *string `json:"source_zone,omitempty"`
	Zones *string `json:"zones,omitempty"`
}

type _ApiRgwMultisiteSyncFlowPutRequest ApiRgwMultisiteSyncFlowPutRequest

// NewApiRgwMultisiteSyncFlowPutRequest instantiates a new ApiRgwMultisiteSyncFlowPutRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiRgwMultisiteSyncFlowPutRequest(flowId string, flowType string, groupId string) *ApiRgwMultisiteSyncFlowPutRequest {
	this := ApiRgwMultisiteSyncFlowPutRequest{}
	var bucketName string = ""
	this.BucketName = &bucketName
	this.FlowId = flowId
	this.FlowType = flowType
	this.GroupId = groupId
	return &this
}

// NewApiRgwMultisiteSyncFlowPutRequestWithDefaults instantiates a new ApiRgwMultisiteSyncFlowPutRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiRgwMultisiteSyncFlowPutRequestWithDefaults() *ApiRgwMultisiteSyncFlowPutRequest {
	this := ApiRgwMultisiteSyncFlowPutRequest{}
	var bucketName string = ""
	this.BucketName = &bucketName
	return &this
}

// GetBucketName returns the BucketName field value if set, zero value otherwise.
func (o *ApiRgwMultisiteSyncFlowPutRequest) GetBucketName() string {
	if o == nil || IsNil(o.BucketName) {
		var ret string
		return ret
	}
	return *o.BucketName
}

// GetBucketNameOk returns a tuple with the BucketName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiRgwMultisiteSyncFlowPutRequest) GetBucketNameOk() (*string, bool) {
	if o == nil || IsNil(o.BucketName) {
		return nil, false
	}
	return o.BucketName, true
}

// HasBucketName returns a boolean if a field has been set.
func (o *ApiRgwMultisiteSyncFlowPutRequest) HasBucketName() bool {
	if o != nil && !IsNil(o.BucketName) {
		return true
	}

	return false
}

// SetBucketName gets a reference to the given string and assigns it to the BucketName field.
func (o *ApiRgwMultisiteSyncFlowPutRequest) SetBucketName(v string) {
	o.BucketName = &v
}

// GetDestinationZone returns the DestinationZone field value if set, zero value otherwise.
func (o *ApiRgwMultisiteSyncFlowPutRequest) GetDestinationZone() string {
	if o == nil || IsNil(o.DestinationZone) {
		var ret string
		return ret
	}
	return *o.DestinationZone
}

// GetDestinationZoneOk returns a tuple with the DestinationZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiRgwMultisiteSyncFlowPutRequest) GetDestinationZoneOk() (*string, bool) {
	if o == nil || IsNil(o.DestinationZone) {
		return nil, false
	}
	return o.DestinationZone, true
}

// HasDestinationZone returns a boolean if a field has been set.
func (o *ApiRgwMultisiteSyncFlowPutRequest) HasDestinationZone() bool {
	if o != nil && !IsNil(o.DestinationZone) {
		return true
	}

	return false
}

// SetDestinationZone gets a reference to the given string and assigns it to the DestinationZone field.
func (o *ApiRgwMultisiteSyncFlowPutRequest) SetDestinationZone(v string) {
	o.DestinationZone = &v
}

// GetFlowId returns the FlowId field value
func (o *ApiRgwMultisiteSyncFlowPutRequest) GetFlowId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FlowId
}

// GetFlowIdOk returns a tuple with the FlowId field value
// and a boolean to check if the value has been set.
func (o *ApiRgwMultisiteSyncFlowPutRequest) GetFlowIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FlowId, true
}

// SetFlowId sets field value
func (o *ApiRgwMultisiteSyncFlowPutRequest) SetFlowId(v string) {
	o.FlowId = v
}

// GetFlowType returns the FlowType field value
func (o *ApiRgwMultisiteSyncFlowPutRequest) GetFlowType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FlowType
}

// GetFlowTypeOk returns a tuple with the FlowType field value
// and a boolean to check if the value has been set.
func (o *ApiRgwMultisiteSyncFlowPutRequest) GetFlowTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FlowType, true
}

// SetFlowType sets field value
func (o *ApiRgwMultisiteSyncFlowPutRequest) SetFlowType(v string) {
	o.FlowType = v
}

// GetGroupId returns the GroupId field value
func (o *ApiRgwMultisiteSyncFlowPutRequest) GetGroupId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value
// and a boolean to check if the value has been set.
func (o *ApiRgwMultisiteSyncFlowPutRequest) GetGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupId, true
}

// SetGroupId sets field value
func (o *ApiRgwMultisiteSyncFlowPutRequest) SetGroupId(v string) {
	o.GroupId = v
}

// GetSourceZone returns the SourceZone field value if set, zero value otherwise.
func (o *ApiRgwMultisiteSyncFlowPutRequest) GetSourceZone() string {
	if o == nil || IsNil(o.SourceZone) {
		var ret string
		return ret
	}
	return *o.SourceZone
}

// GetSourceZoneOk returns a tuple with the SourceZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiRgwMultisiteSyncFlowPutRequest) GetSourceZoneOk() (*string, bool) {
	if o == nil || IsNil(o.SourceZone) {
		return nil, false
	}
	return o.SourceZone, true
}

// HasSourceZone returns a boolean if a field has been set.
func (o *ApiRgwMultisiteSyncFlowPutRequest) HasSourceZone() bool {
	if o != nil && !IsNil(o.SourceZone) {
		return true
	}

	return false
}

// SetSourceZone gets a reference to the given string and assigns it to the SourceZone field.
func (o *ApiRgwMultisiteSyncFlowPutRequest) SetSourceZone(v string) {
	o.SourceZone = &v
}

// GetZones returns the Zones field value if set, zero value otherwise.
func (o *ApiRgwMultisiteSyncFlowPutRequest) GetZones() string {
	if o == nil || IsNil(o.Zones) {
		var ret string
		return ret
	}
	return *o.Zones
}

// GetZonesOk returns a tuple with the Zones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiRgwMultisiteSyncFlowPutRequest) GetZonesOk() (*string, bool) {
	if o == nil || IsNil(o.Zones) {
		return nil, false
	}
	return o.Zones, true
}

// HasZones returns a boolean if a field has been set.
func (o *ApiRgwMultisiteSyncFlowPutRequest) HasZones() bool {
	if o != nil && !IsNil(o.Zones) {
		return true
	}

	return false
}

// SetZones gets a reference to the given string and assigns it to the Zones field.
func (o *ApiRgwMultisiteSyncFlowPutRequest) SetZones(v string) {
	o.Zones = &v
}

func (o ApiRgwMultisiteSyncFlowPutRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiRgwMultisiteSyncFlowPutRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BucketName) {
		toSerialize["bucket_name"] = o.BucketName
	}
	if !IsNil(o.DestinationZone) {
		toSerialize["destination_zone"] = o.DestinationZone
	}
	toSerialize["flow_id"] = o.FlowId
	toSerialize["flow_type"] = o.FlowType
	toSerialize["group_id"] = o.GroupId
	if !IsNil(o.SourceZone) {
		toSerialize["source_zone"] = o.SourceZone
	}
	if !IsNil(o.Zones) {
		toSerialize["zones"] = o.Zones
	}
	return toSerialize, nil
}

func (o *ApiRgwMultisiteSyncFlowPutRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"flow_id",
		"flow_type",
		"group_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiRgwMultisiteSyncFlowPutRequest := _ApiRgwMultisiteSyncFlowPutRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiRgwMultisiteSyncFlowPutRequest)

	if err != nil {
		return err
	}

	*o = ApiRgwMultisiteSyncFlowPutRequest(varApiRgwMultisiteSyncFlowPutRequest)

	return err
}

type NullableApiRgwMultisiteSyncFlowPutRequest struct {
	value *ApiRgwMultisiteSyncFlowPutRequest
	isSet bool
}

func (v NullableApiRgwMultisiteSyncFlowPutRequest) Get() *ApiRgwMultisiteSyncFlowPutRequest {
	return v.value
}

func (v *NullableApiRgwMultisiteSyncFlowPutRequest) Set(val *ApiRgwMultisiteSyncFlowPutRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableApiRgwMultisiteSyncFlowPutRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableApiRgwMultisiteSyncFlowPutRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiRgwMultisiteSyncFlowPutRequest(val *ApiRgwMultisiteSyncFlowPutRequest) *NullableApiRgwMultisiteSyncFlowPutRequest {
	return &NullableApiRgwMultisiteSyncFlowPutRequest{value: val, isSet: true}
}

func (v NullableApiRgwMultisiteSyncFlowPutRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiRgwMultisiteSyncFlowPutRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


