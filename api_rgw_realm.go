/*
Ceph REST API

This is the official Ceph REST API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ceph

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// RgwRealmAPIService RgwRealmAPI service
type RgwRealmAPIService service

type ApiApiRgwRealmGetRequest struct {
	ctx context.Context
	ApiService *RgwRealmAPIService
}

func (r ApiApiRgwRealmGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiRgwRealmGetExecute(r)
}

/*
ApiRgwRealmGet Method for ApiRgwRealmGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiRgwRealmGetRequest
*/
func (a *RgwRealmAPIService) ApiRgwRealmGet(ctx context.Context) ApiApiRgwRealmGetRequest {
	return ApiApiRgwRealmGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *RgwRealmAPIService) ApiRgwRealmGetExecute(r ApiApiRgwRealmGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RgwRealmAPIService.ApiRgwRealmGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/rgw/realm"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiRgwRealmGetAllRealmsInfoGetRequest struct {
	ctx context.Context
	ApiService *RgwRealmAPIService
}

func (r ApiApiRgwRealmGetAllRealmsInfoGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiRgwRealmGetAllRealmsInfoGetExecute(r)
}

/*
ApiRgwRealmGetAllRealmsInfoGet Method for ApiRgwRealmGetAllRealmsInfoGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiRgwRealmGetAllRealmsInfoGetRequest
*/
func (a *RgwRealmAPIService) ApiRgwRealmGetAllRealmsInfoGet(ctx context.Context) ApiApiRgwRealmGetAllRealmsInfoGetRequest {
	return ApiApiRgwRealmGetAllRealmsInfoGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *RgwRealmAPIService) ApiRgwRealmGetAllRealmsInfoGetExecute(r ApiApiRgwRealmGetAllRealmsInfoGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RgwRealmAPIService.ApiRgwRealmGetAllRealmsInfoGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/rgw/realm/get_all_realms_info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiRgwRealmGetRealmTokensGetRequest struct {
	ctx context.Context
	ApiService *RgwRealmAPIService
}

func (r ApiApiRgwRealmGetRealmTokensGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiRgwRealmGetRealmTokensGetExecute(r)
}

/*
ApiRgwRealmGetRealmTokensGet Method for ApiRgwRealmGetRealmTokensGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiRgwRealmGetRealmTokensGetRequest
*/
func (a *RgwRealmAPIService) ApiRgwRealmGetRealmTokensGet(ctx context.Context) ApiApiRgwRealmGetRealmTokensGetRequest {
	return ApiApiRgwRealmGetRealmTokensGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *RgwRealmAPIService) ApiRgwRealmGetRealmTokensGetExecute(r ApiApiRgwRealmGetRealmTokensGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RgwRealmAPIService.ApiRgwRealmGetRealmTokensGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/rgw/realm/get_realm_tokens"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiRgwRealmImportRealmTokenPostRequest struct {
	ctx context.Context
	ApiService *RgwRealmAPIService
	apiRgwRealmImportRealmTokenPostRequest *ApiRgwRealmImportRealmTokenPostRequest
}

func (r ApiApiRgwRealmImportRealmTokenPostRequest) ApiRgwRealmImportRealmTokenPostRequest(apiRgwRealmImportRealmTokenPostRequest ApiRgwRealmImportRealmTokenPostRequest) ApiApiRgwRealmImportRealmTokenPostRequest {
	r.apiRgwRealmImportRealmTokenPostRequest = &apiRgwRealmImportRealmTokenPostRequest
	return r
}

func (r ApiApiRgwRealmImportRealmTokenPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiRgwRealmImportRealmTokenPostExecute(r)
}

/*
ApiRgwRealmImportRealmTokenPost Method for ApiRgwRealmImportRealmTokenPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiRgwRealmImportRealmTokenPostRequest
*/
func (a *RgwRealmAPIService) ApiRgwRealmImportRealmTokenPost(ctx context.Context) ApiApiRgwRealmImportRealmTokenPostRequest {
	return ApiApiRgwRealmImportRealmTokenPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *RgwRealmAPIService) ApiRgwRealmImportRealmTokenPostExecute(r ApiApiRgwRealmImportRealmTokenPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RgwRealmAPIService.ApiRgwRealmImportRealmTokenPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/rgw/realm/import_realm_token"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiRgwRealmImportRealmTokenPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiRgwRealmPostRequest struct {
	ctx context.Context
	ApiService *RgwRealmAPIService
	apiRgwRealmPostRequest *ApiRgwRealmPostRequest
}

func (r ApiApiRgwRealmPostRequest) ApiRgwRealmPostRequest(apiRgwRealmPostRequest ApiRgwRealmPostRequest) ApiApiRgwRealmPostRequest {
	r.apiRgwRealmPostRequest = &apiRgwRealmPostRequest
	return r
}

func (r ApiApiRgwRealmPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiRgwRealmPostExecute(r)
}

/*
ApiRgwRealmPost Method for ApiRgwRealmPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiRgwRealmPostRequest
*/
func (a *RgwRealmAPIService) ApiRgwRealmPost(ctx context.Context) ApiApiRgwRealmPostRequest {
	return ApiApiRgwRealmPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *RgwRealmAPIService) ApiRgwRealmPostExecute(r ApiApiRgwRealmPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RgwRealmAPIService.ApiRgwRealmPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/rgw/realm"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiRgwRealmPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiRgwRealmRealmNameDeleteRequest struct {
	ctx context.Context
	ApiService *RgwRealmAPIService
	realmName string
}

func (r ApiApiRgwRealmRealmNameDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiRgwRealmRealmNameDeleteExecute(r)
}

/*
ApiRgwRealmRealmNameDelete Method for ApiRgwRealmRealmNameDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param realmName
 @return ApiApiRgwRealmRealmNameDeleteRequest
*/
func (a *RgwRealmAPIService) ApiRgwRealmRealmNameDelete(ctx context.Context, realmName string) ApiApiRgwRealmRealmNameDeleteRequest {
	return ApiApiRgwRealmRealmNameDeleteRequest{
		ApiService: a,
		ctx: ctx,
		realmName: realmName,
	}
}

// Execute executes the request
func (a *RgwRealmAPIService) ApiRgwRealmRealmNameDeleteExecute(r ApiApiRgwRealmRealmNameDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RgwRealmAPIService.ApiRgwRealmRealmNameDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/rgw/realm/{realm_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"realm_name"+"}", url.PathEscape(parameterValueToString(r.realmName, "realmName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiRgwRealmRealmNameGetRequest struct {
	ctx context.Context
	ApiService *RgwRealmAPIService
	realmName string
}

func (r ApiApiRgwRealmRealmNameGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiRgwRealmRealmNameGetExecute(r)
}

/*
ApiRgwRealmRealmNameGet Method for ApiRgwRealmRealmNameGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param realmName
 @return ApiApiRgwRealmRealmNameGetRequest
*/
func (a *RgwRealmAPIService) ApiRgwRealmRealmNameGet(ctx context.Context, realmName string) ApiApiRgwRealmRealmNameGetRequest {
	return ApiApiRgwRealmRealmNameGetRequest{
		ApiService: a,
		ctx: ctx,
		realmName: realmName,
	}
}

// Execute executes the request
func (a *RgwRealmAPIService) ApiRgwRealmRealmNameGetExecute(r ApiApiRgwRealmRealmNameGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RgwRealmAPIService.ApiRgwRealmRealmNameGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/rgw/realm/{realm_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"realm_name"+"}", url.PathEscape(parameterValueToString(r.realmName, "realmName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiRgwRealmRealmNamePutRequest struct {
	ctx context.Context
	ApiService *RgwRealmAPIService
	realmName string
	apiRgwRealmRealmNamePutRequest *ApiRgwRealmRealmNamePutRequest
}

func (r ApiApiRgwRealmRealmNamePutRequest) ApiRgwRealmRealmNamePutRequest(apiRgwRealmRealmNamePutRequest ApiRgwRealmRealmNamePutRequest) ApiApiRgwRealmRealmNamePutRequest {
	r.apiRgwRealmRealmNamePutRequest = &apiRgwRealmRealmNamePutRequest
	return r
}

func (r ApiApiRgwRealmRealmNamePutRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiRgwRealmRealmNamePutExecute(r)
}

/*
ApiRgwRealmRealmNamePut Method for ApiRgwRealmRealmNamePut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param realmName
 @return ApiApiRgwRealmRealmNamePutRequest
*/
func (a *RgwRealmAPIService) ApiRgwRealmRealmNamePut(ctx context.Context, realmName string) ApiApiRgwRealmRealmNamePutRequest {
	return ApiApiRgwRealmRealmNamePutRequest{
		ApiService: a,
		ctx: ctx,
		realmName: realmName,
	}
}

// Execute executes the request
func (a *RgwRealmAPIService) ApiRgwRealmRealmNamePutExecute(r ApiApiRgwRealmRealmNamePutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RgwRealmAPIService.ApiRgwRealmRealmNamePut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/rgw/realm/{realm_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"realm_name"+"}", url.PathEscape(parameterValueToString(r.realmName, "realmName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiRgwRealmRealmNamePutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
