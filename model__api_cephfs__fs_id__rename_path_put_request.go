/*
Ceph REST API

This is the official Ceph REST API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ceph

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApiCephfsFsIdRenamePathPutRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiCephfsFsIdRenamePathPutRequest{}

// ApiCephfsFsIdRenamePathPutRequest struct for ApiCephfsFsIdRenamePathPutRequest
type ApiCephfsFsIdRenamePathPutRequest struct {
	DstPath string `json:"dst_path"`
	SrcPath string `json:"src_path"`
}

type _ApiCephfsFsIdRenamePathPutRequest ApiCephfsFsIdRenamePathPutRequest

// NewApiCephfsFsIdRenamePathPutRequest instantiates a new ApiCephfsFsIdRenamePathPutRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiCephfsFsIdRenamePathPutRequest(dstPath string, srcPath string) *ApiCephfsFsIdRenamePathPutRequest {
	this := ApiCephfsFsIdRenamePathPutRequest{}
	this.DstPath = dstPath
	this.SrcPath = srcPath
	return &this
}

// NewApiCephfsFsIdRenamePathPutRequestWithDefaults instantiates a new ApiCephfsFsIdRenamePathPutRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiCephfsFsIdRenamePathPutRequestWithDefaults() *ApiCephfsFsIdRenamePathPutRequest {
	this := ApiCephfsFsIdRenamePathPutRequest{}
	return &this
}

// GetDstPath returns the DstPath field value
func (o *ApiCephfsFsIdRenamePathPutRequest) GetDstPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DstPath
}

// GetDstPathOk returns a tuple with the DstPath field value
// and a boolean to check if the value has been set.
func (o *ApiCephfsFsIdRenamePathPutRequest) GetDstPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DstPath, true
}

// SetDstPath sets field value
func (o *ApiCephfsFsIdRenamePathPutRequest) SetDstPath(v string) {
	o.DstPath = v
}

// GetSrcPath returns the SrcPath field value
func (o *ApiCephfsFsIdRenamePathPutRequest) GetSrcPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SrcPath
}

// GetSrcPathOk returns a tuple with the SrcPath field value
// and a boolean to check if the value has been set.
func (o *ApiCephfsFsIdRenamePathPutRequest) GetSrcPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SrcPath, true
}

// SetSrcPath sets field value
func (o *ApiCephfsFsIdRenamePathPutRequest) SetSrcPath(v string) {
	o.SrcPath = v
}

func (o ApiCephfsFsIdRenamePathPutRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiCephfsFsIdRenamePathPutRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dst_path"] = o.DstPath
	toSerialize["src_path"] = o.SrcPath
	return toSerialize, nil
}

func (o *ApiCephfsFsIdRenamePathPutRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dst_path",
		"src_path",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiCephfsFsIdRenamePathPutRequest := _ApiCephfsFsIdRenamePathPutRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiCephfsFsIdRenamePathPutRequest)

	if err != nil {
		return err
	}

	*o = ApiCephfsFsIdRenamePathPutRequest(varApiCephfsFsIdRenamePathPutRequest)

	return err
}

type NullableApiCephfsFsIdRenamePathPutRequest struct {
	value *ApiCephfsFsIdRenamePathPutRequest
	isSet bool
}

func (v NullableApiCephfsFsIdRenamePathPutRequest) Get() *ApiCephfsFsIdRenamePathPutRequest {
	return v.value
}

func (v *NullableApiCephfsFsIdRenamePathPutRequest) Set(val *ApiCephfsFsIdRenamePathPutRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableApiCephfsFsIdRenamePathPutRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableApiCephfsFsIdRenamePathPutRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiCephfsFsIdRenamePathPutRequest(val *ApiCephfsFsIdRenamePathPutRequest) *NullableApiCephfsFsIdRenamePathPutRequest {
	return &NullableApiCephfsFsIdRenamePathPutRequest{value: val, isSet: true}
}

func (v NullableApiCephfsFsIdRenamePathPutRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiCephfsFsIdRenamePathPutRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


