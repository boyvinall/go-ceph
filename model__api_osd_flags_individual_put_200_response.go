/*
Ceph REST API

This is the official Ceph REST API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ceph

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApiOsdFlagsIndividualPut200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiOsdFlagsIndividualPut200Response{}

// ApiOsdFlagsIndividualPut200Response struct for ApiOsdFlagsIndividualPut200Response
type ApiOsdFlagsIndividualPut200Response struct {
	// List of added flags
	Added []string `json:"added"`
	// List of updated OSDs
	Ids []int32 `json:"ids"`
	// List of removed flags
	Removed []string `json:"removed"`
}

type _ApiOsdFlagsIndividualPut200Response ApiOsdFlagsIndividualPut200Response

// NewApiOsdFlagsIndividualPut200Response instantiates a new ApiOsdFlagsIndividualPut200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiOsdFlagsIndividualPut200Response(added []string, ids []int32, removed []string) *ApiOsdFlagsIndividualPut200Response {
	this := ApiOsdFlagsIndividualPut200Response{}
	this.Added = added
	this.Ids = ids
	this.Removed = removed
	return &this
}

// NewApiOsdFlagsIndividualPut200ResponseWithDefaults instantiates a new ApiOsdFlagsIndividualPut200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiOsdFlagsIndividualPut200ResponseWithDefaults() *ApiOsdFlagsIndividualPut200Response {
	this := ApiOsdFlagsIndividualPut200Response{}
	return &this
}

// GetAdded returns the Added field value
func (o *ApiOsdFlagsIndividualPut200Response) GetAdded() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Added
}

// GetAddedOk returns a tuple with the Added field value
// and a boolean to check if the value has been set.
func (o *ApiOsdFlagsIndividualPut200Response) GetAddedOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Added, true
}

// SetAdded sets field value
func (o *ApiOsdFlagsIndividualPut200Response) SetAdded(v []string) {
	o.Added = v
}

// GetIds returns the Ids field value
func (o *ApiOsdFlagsIndividualPut200Response) GetIds() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.Ids
}

// GetIdsOk returns a tuple with the Ids field value
// and a boolean to check if the value has been set.
func (o *ApiOsdFlagsIndividualPut200Response) GetIdsOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ids, true
}

// SetIds sets field value
func (o *ApiOsdFlagsIndividualPut200Response) SetIds(v []int32) {
	o.Ids = v
}

// GetRemoved returns the Removed field value
func (o *ApiOsdFlagsIndividualPut200Response) GetRemoved() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Removed
}

// GetRemovedOk returns a tuple with the Removed field value
// and a boolean to check if the value has been set.
func (o *ApiOsdFlagsIndividualPut200Response) GetRemovedOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Removed, true
}

// SetRemoved sets field value
func (o *ApiOsdFlagsIndividualPut200Response) SetRemoved(v []string) {
	o.Removed = v
}

func (o ApiOsdFlagsIndividualPut200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiOsdFlagsIndividualPut200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["added"] = o.Added
	toSerialize["ids"] = o.Ids
	toSerialize["removed"] = o.Removed
	return toSerialize, nil
}

func (o *ApiOsdFlagsIndividualPut200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"added",
		"ids",
		"removed",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiOsdFlagsIndividualPut200Response := _ApiOsdFlagsIndividualPut200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiOsdFlagsIndividualPut200Response)

	if err != nil {
		return err
	}

	*o = ApiOsdFlagsIndividualPut200Response(varApiOsdFlagsIndividualPut200Response)

	return err
}

type NullableApiOsdFlagsIndividualPut200Response struct {
	value *ApiOsdFlagsIndividualPut200Response
	isSet bool
}

func (v NullableApiOsdFlagsIndividualPut200Response) Get() *ApiOsdFlagsIndividualPut200Response {
	return v.value
}

func (v *NullableApiOsdFlagsIndividualPut200Response) Set(val *ApiOsdFlagsIndividualPut200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableApiOsdFlagsIndividualPut200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableApiOsdFlagsIndividualPut200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiOsdFlagsIndividualPut200Response(val *ApiOsdFlagsIndividualPut200Response) *NullableApiOsdFlagsIndividualPut200Response {
	return &NullableApiOsdFlagsIndividualPut200Response{value: val, isSet: true}
}

func (v NullableApiOsdFlagsIndividualPut200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiOsdFlagsIndividualPut200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


