/*
Ceph REST API

This is the official Ceph REST API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ceph

import (
	"encoding/json"
)

// checks if the ApiRgwDaemonSetMultisiteConfigPutRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiRgwDaemonSetMultisiteConfigPutRequest{}

// ApiRgwDaemonSetMultisiteConfigPutRequest struct for ApiRgwDaemonSetMultisiteConfigPutRequest
type ApiRgwDaemonSetMultisiteConfigPutRequest struct {
	DaemonName *string `json:"daemon_name,omitempty"`
	RealmName *string `json:"realm_name,omitempty"`
	ZoneName *string `json:"zone_name,omitempty"`
	ZonegroupName *string `json:"zonegroup_name,omitempty"`
}

// NewApiRgwDaemonSetMultisiteConfigPutRequest instantiates a new ApiRgwDaemonSetMultisiteConfigPutRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiRgwDaemonSetMultisiteConfigPutRequest() *ApiRgwDaemonSetMultisiteConfigPutRequest {
	this := ApiRgwDaemonSetMultisiteConfigPutRequest{}
	return &this
}

// NewApiRgwDaemonSetMultisiteConfigPutRequestWithDefaults instantiates a new ApiRgwDaemonSetMultisiteConfigPutRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiRgwDaemonSetMultisiteConfigPutRequestWithDefaults() *ApiRgwDaemonSetMultisiteConfigPutRequest {
	this := ApiRgwDaemonSetMultisiteConfigPutRequest{}
	return &this
}

// GetDaemonName returns the DaemonName field value if set, zero value otherwise.
func (o *ApiRgwDaemonSetMultisiteConfigPutRequest) GetDaemonName() string {
	if o == nil || IsNil(o.DaemonName) {
		var ret string
		return ret
	}
	return *o.DaemonName
}

// GetDaemonNameOk returns a tuple with the DaemonName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiRgwDaemonSetMultisiteConfigPutRequest) GetDaemonNameOk() (*string, bool) {
	if o == nil || IsNil(o.DaemonName) {
		return nil, false
	}
	return o.DaemonName, true
}

// HasDaemonName returns a boolean if a field has been set.
func (o *ApiRgwDaemonSetMultisiteConfigPutRequest) HasDaemonName() bool {
	if o != nil && !IsNil(o.DaemonName) {
		return true
	}

	return false
}

// SetDaemonName gets a reference to the given string and assigns it to the DaemonName field.
func (o *ApiRgwDaemonSetMultisiteConfigPutRequest) SetDaemonName(v string) {
	o.DaemonName = &v
}

// GetRealmName returns the RealmName field value if set, zero value otherwise.
func (o *ApiRgwDaemonSetMultisiteConfigPutRequest) GetRealmName() string {
	if o == nil || IsNil(o.RealmName) {
		var ret string
		return ret
	}
	return *o.RealmName
}

// GetRealmNameOk returns a tuple with the RealmName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiRgwDaemonSetMultisiteConfigPutRequest) GetRealmNameOk() (*string, bool) {
	if o == nil || IsNil(o.RealmName) {
		return nil, false
	}
	return o.RealmName, true
}

// HasRealmName returns a boolean if a field has been set.
func (o *ApiRgwDaemonSetMultisiteConfigPutRequest) HasRealmName() bool {
	if o != nil && !IsNil(o.RealmName) {
		return true
	}

	return false
}

// SetRealmName gets a reference to the given string and assigns it to the RealmName field.
func (o *ApiRgwDaemonSetMultisiteConfigPutRequest) SetRealmName(v string) {
	o.RealmName = &v
}

// GetZoneName returns the ZoneName field value if set, zero value otherwise.
func (o *ApiRgwDaemonSetMultisiteConfigPutRequest) GetZoneName() string {
	if o == nil || IsNil(o.ZoneName) {
		var ret string
		return ret
	}
	return *o.ZoneName
}

// GetZoneNameOk returns a tuple with the ZoneName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiRgwDaemonSetMultisiteConfigPutRequest) GetZoneNameOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneName) {
		return nil, false
	}
	return o.ZoneName, true
}

// HasZoneName returns a boolean if a field has been set.
func (o *ApiRgwDaemonSetMultisiteConfigPutRequest) HasZoneName() bool {
	if o != nil && !IsNil(o.ZoneName) {
		return true
	}

	return false
}

// SetZoneName gets a reference to the given string and assigns it to the ZoneName field.
func (o *ApiRgwDaemonSetMultisiteConfigPutRequest) SetZoneName(v string) {
	o.ZoneName = &v
}

// GetZonegroupName returns the ZonegroupName field value if set, zero value otherwise.
func (o *ApiRgwDaemonSetMultisiteConfigPutRequest) GetZonegroupName() string {
	if o == nil || IsNil(o.ZonegroupName) {
		var ret string
		return ret
	}
	return *o.ZonegroupName
}

// GetZonegroupNameOk returns a tuple with the ZonegroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiRgwDaemonSetMultisiteConfigPutRequest) GetZonegroupNameOk() (*string, bool) {
	if o == nil || IsNil(o.ZonegroupName) {
		return nil, false
	}
	return o.ZonegroupName, true
}

// HasZonegroupName returns a boolean if a field has been set.
func (o *ApiRgwDaemonSetMultisiteConfigPutRequest) HasZonegroupName() bool {
	if o != nil && !IsNil(o.ZonegroupName) {
		return true
	}

	return false
}

// SetZonegroupName gets a reference to the given string and assigns it to the ZonegroupName field.
func (o *ApiRgwDaemonSetMultisiteConfigPutRequest) SetZonegroupName(v string) {
	o.ZonegroupName = &v
}

func (o ApiRgwDaemonSetMultisiteConfigPutRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiRgwDaemonSetMultisiteConfigPutRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DaemonName) {
		toSerialize["daemon_name"] = o.DaemonName
	}
	if !IsNil(o.RealmName) {
		toSerialize["realm_name"] = o.RealmName
	}
	if !IsNil(o.ZoneName) {
		toSerialize["zone_name"] = o.ZoneName
	}
	if !IsNil(o.ZonegroupName) {
		toSerialize["zonegroup_name"] = o.ZonegroupName
	}
	return toSerialize, nil
}

type NullableApiRgwDaemonSetMultisiteConfigPutRequest struct {
	value *ApiRgwDaemonSetMultisiteConfigPutRequest
	isSet bool
}

func (v NullableApiRgwDaemonSetMultisiteConfigPutRequest) Get() *ApiRgwDaemonSetMultisiteConfigPutRequest {
	return v.value
}

func (v *NullableApiRgwDaemonSetMultisiteConfigPutRequest) Set(val *ApiRgwDaemonSetMultisiteConfigPutRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableApiRgwDaemonSetMultisiteConfigPutRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableApiRgwDaemonSetMultisiteConfigPutRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiRgwDaemonSetMultisiteConfigPutRequest(val *ApiRgwDaemonSetMultisiteConfigPutRequest) *NullableApiRgwDaemonSetMultisiteConfigPutRequest {
	return &NullableApiRgwDaemonSetMultisiteConfigPutRequest{value: val, isSet: true}
}

func (v NullableApiRgwDaemonSetMultisiteConfigPutRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiRgwDaemonSetMultisiteConfigPutRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


