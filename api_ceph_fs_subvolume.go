/*
Ceph REST API

This is the official Ceph REST API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ceph

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// CephFSSubvolumeAPIService CephFSSubvolumeAPI service
type CephFSSubvolumeAPIService service

type ApiApiCephfsSubvolumePostRequest struct {
	ctx context.Context
	ApiService *CephFSSubvolumeAPIService
	apiCephfsSubvolumePostRequest *ApiCephfsSubvolumePostRequest
}

func (r ApiApiCephfsSubvolumePostRequest) ApiCephfsSubvolumePostRequest(apiCephfsSubvolumePostRequest ApiCephfsSubvolumePostRequest) ApiApiCephfsSubvolumePostRequest {
	r.apiCephfsSubvolumePostRequest = &apiCephfsSubvolumePostRequest
	return r
}

func (r ApiApiCephfsSubvolumePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiCephfsSubvolumePostExecute(r)
}

/*
ApiCephfsSubvolumePost Method for ApiCephfsSubvolumePost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiCephfsSubvolumePostRequest
*/
func (a *CephFSSubvolumeAPIService) ApiCephfsSubvolumePost(ctx context.Context) ApiApiCephfsSubvolumePostRequest {
	return ApiApiCephfsSubvolumePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CephFSSubvolumeAPIService) ApiCephfsSubvolumePostExecute(r ApiApiCephfsSubvolumePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CephFSSubvolumeAPIService.ApiCephfsSubvolumePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/cephfs/subvolume"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiCephfsSubvolumePostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiCephfsSubvolumeVolNameDeleteRequest struct {
	ctx context.Context
	ApiService *CephFSSubvolumeAPIService
	volName string
	subvolName *string
	groupName *string
	retainSnapshots *bool
}

func (r ApiApiCephfsSubvolumeVolNameDeleteRequest) SubvolName(subvolName string) ApiApiCephfsSubvolumeVolNameDeleteRequest {
	r.subvolName = &subvolName
	return r
}

func (r ApiApiCephfsSubvolumeVolNameDeleteRequest) GroupName(groupName string) ApiApiCephfsSubvolumeVolNameDeleteRequest {
	r.groupName = &groupName
	return r
}

func (r ApiApiCephfsSubvolumeVolNameDeleteRequest) RetainSnapshots(retainSnapshots bool) ApiApiCephfsSubvolumeVolNameDeleteRequest {
	r.retainSnapshots = &retainSnapshots
	return r
}

func (r ApiApiCephfsSubvolumeVolNameDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiCephfsSubvolumeVolNameDeleteExecute(r)
}

/*
ApiCephfsSubvolumeVolNameDelete Method for ApiCephfsSubvolumeVolNameDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param volName
 @return ApiApiCephfsSubvolumeVolNameDeleteRequest
*/
func (a *CephFSSubvolumeAPIService) ApiCephfsSubvolumeVolNameDelete(ctx context.Context, volName string) ApiApiCephfsSubvolumeVolNameDeleteRequest {
	return ApiApiCephfsSubvolumeVolNameDeleteRequest{
		ApiService: a,
		ctx: ctx,
		volName: volName,
	}
}

// Execute executes the request
func (a *CephFSSubvolumeAPIService) ApiCephfsSubvolumeVolNameDeleteExecute(r ApiApiCephfsSubvolumeVolNameDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CephFSSubvolumeAPIService.ApiCephfsSubvolumeVolNameDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/cephfs/subvolume/{vol_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"vol_name"+"}", url.PathEscape(parameterValueToString(r.volName, "volName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.subvolName == nil {
		return nil, reportError("subvolName is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "subvol_name", r.subvolName, "form", "")
	if r.groupName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "group_name", r.groupName, "form", "")
	}
	if r.retainSnapshots != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "retain_snapshots", r.retainSnapshots, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiCephfsSubvolumeVolNameExistsGetRequest struct {
	ctx context.Context
	ApiService *CephFSSubvolumeAPIService
	volName string
	groupName *string
}

func (r ApiApiCephfsSubvolumeVolNameExistsGetRequest) GroupName(groupName string) ApiApiCephfsSubvolumeVolNameExistsGetRequest {
	r.groupName = &groupName
	return r
}

func (r ApiApiCephfsSubvolumeVolNameExistsGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiCephfsSubvolumeVolNameExistsGetExecute(r)
}

/*
ApiCephfsSubvolumeVolNameExistsGet Method for ApiCephfsSubvolumeVolNameExistsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param volName
 @return ApiApiCephfsSubvolumeVolNameExistsGetRequest
*/
func (a *CephFSSubvolumeAPIService) ApiCephfsSubvolumeVolNameExistsGet(ctx context.Context, volName string) ApiApiCephfsSubvolumeVolNameExistsGetRequest {
	return ApiApiCephfsSubvolumeVolNameExistsGetRequest{
		ApiService: a,
		ctx: ctx,
		volName: volName,
	}
}

// Execute executes the request
func (a *CephFSSubvolumeAPIService) ApiCephfsSubvolumeVolNameExistsGetExecute(r ApiApiCephfsSubvolumeVolNameExistsGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CephFSSubvolumeAPIService.ApiCephfsSubvolumeVolNameExistsGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/cephfs/subvolume/{vol_name}/exists"
	localVarPath = strings.Replace(localVarPath, "{"+"vol_name"+"}", url.PathEscape(parameterValueToString(r.volName, "volName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.groupName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "group_name", r.groupName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiCephfsSubvolumeVolNameGetRequest struct {
	ctx context.Context
	ApiService *CephFSSubvolumeAPIService
	volName string
	groupName *string
	info *bool
}

func (r ApiApiCephfsSubvolumeVolNameGetRequest) GroupName(groupName string) ApiApiCephfsSubvolumeVolNameGetRequest {
	r.groupName = &groupName
	return r
}

func (r ApiApiCephfsSubvolumeVolNameGetRequest) Info(info bool) ApiApiCephfsSubvolumeVolNameGetRequest {
	r.info = &info
	return r
}

func (r ApiApiCephfsSubvolumeVolNameGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiCephfsSubvolumeVolNameGetExecute(r)
}

/*
ApiCephfsSubvolumeVolNameGet Method for ApiCephfsSubvolumeVolNameGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param volName
 @return ApiApiCephfsSubvolumeVolNameGetRequest
*/
func (a *CephFSSubvolumeAPIService) ApiCephfsSubvolumeVolNameGet(ctx context.Context, volName string) ApiApiCephfsSubvolumeVolNameGetRequest {
	return ApiApiCephfsSubvolumeVolNameGetRequest{
		ApiService: a,
		ctx: ctx,
		volName: volName,
	}
}

// Execute executes the request
func (a *CephFSSubvolumeAPIService) ApiCephfsSubvolumeVolNameGetExecute(r ApiApiCephfsSubvolumeVolNameGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CephFSSubvolumeAPIService.ApiCephfsSubvolumeVolNameGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/cephfs/subvolume/{vol_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"vol_name"+"}", url.PathEscape(parameterValueToString(r.volName, "volName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.groupName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "group_name", r.groupName, "form", "")
	}
	if r.info != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "info", r.info, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiCephfsSubvolumeVolNameInfoGetRequest struct {
	ctx context.Context
	ApiService *CephFSSubvolumeAPIService
	volName string
	subvolName *string
	groupName *string
}

func (r ApiApiCephfsSubvolumeVolNameInfoGetRequest) SubvolName(subvolName string) ApiApiCephfsSubvolumeVolNameInfoGetRequest {
	r.subvolName = &subvolName
	return r
}

func (r ApiApiCephfsSubvolumeVolNameInfoGetRequest) GroupName(groupName string) ApiApiCephfsSubvolumeVolNameInfoGetRequest {
	r.groupName = &groupName
	return r
}

func (r ApiApiCephfsSubvolumeVolNameInfoGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiCephfsSubvolumeVolNameInfoGetExecute(r)
}

/*
ApiCephfsSubvolumeVolNameInfoGet Method for ApiCephfsSubvolumeVolNameInfoGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param volName
 @return ApiApiCephfsSubvolumeVolNameInfoGetRequest
*/
func (a *CephFSSubvolumeAPIService) ApiCephfsSubvolumeVolNameInfoGet(ctx context.Context, volName string) ApiApiCephfsSubvolumeVolNameInfoGetRequest {
	return ApiApiCephfsSubvolumeVolNameInfoGetRequest{
		ApiService: a,
		ctx: ctx,
		volName: volName,
	}
}

// Execute executes the request
func (a *CephFSSubvolumeAPIService) ApiCephfsSubvolumeVolNameInfoGetExecute(r ApiApiCephfsSubvolumeVolNameInfoGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CephFSSubvolumeAPIService.ApiCephfsSubvolumeVolNameInfoGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/cephfs/subvolume/{vol_name}/info"
	localVarPath = strings.Replace(localVarPath, "{"+"vol_name"+"}", url.PathEscape(parameterValueToString(r.volName, "volName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.subvolName == nil {
		return nil, reportError("subvolName is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "subvol_name", r.subvolName, "form", "")
	if r.groupName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "group_name", r.groupName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiCephfsSubvolumeVolNamePutRequest struct {
	ctx context.Context
	ApiService *CephFSSubvolumeAPIService
	volName string
	apiCephfsSubvolumeVolNamePutRequest *ApiCephfsSubvolumeVolNamePutRequest
}

func (r ApiApiCephfsSubvolumeVolNamePutRequest) ApiCephfsSubvolumeVolNamePutRequest(apiCephfsSubvolumeVolNamePutRequest ApiCephfsSubvolumeVolNamePutRequest) ApiApiCephfsSubvolumeVolNamePutRequest {
	r.apiCephfsSubvolumeVolNamePutRequest = &apiCephfsSubvolumeVolNamePutRequest
	return r
}

func (r ApiApiCephfsSubvolumeVolNamePutRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiCephfsSubvolumeVolNamePutExecute(r)
}

/*
ApiCephfsSubvolumeVolNamePut Method for ApiCephfsSubvolumeVolNamePut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param volName
 @return ApiApiCephfsSubvolumeVolNamePutRequest
*/
func (a *CephFSSubvolumeAPIService) ApiCephfsSubvolumeVolNamePut(ctx context.Context, volName string) ApiApiCephfsSubvolumeVolNamePutRequest {
	return ApiApiCephfsSubvolumeVolNamePutRequest{
		ApiService: a,
		ctx: ctx,
		volName: volName,
	}
}

// Execute executes the request
func (a *CephFSSubvolumeAPIService) ApiCephfsSubvolumeVolNamePutExecute(r ApiApiCephfsSubvolumeVolNamePutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CephFSSubvolumeAPIService.ApiCephfsSubvolumeVolNamePut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/cephfs/subvolume/{vol_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"vol_name"+"}", url.PathEscape(parameterValueToString(r.volName, "volName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiCephfsSubvolumeVolNamePutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
