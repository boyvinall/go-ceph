/*
Ceph REST API

This is the official Ceph REST API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ceph

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApiOsdSvcIdPutRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiOsdSvcIdPutRequest{}

// ApiOsdSvcIdPutRequest struct for ApiOsdSvcIdPutRequest
type ApiOsdSvcIdPutRequest struct {
	DeviceClass string `json:"device_class"`
}

type _ApiOsdSvcIdPutRequest ApiOsdSvcIdPutRequest

// NewApiOsdSvcIdPutRequest instantiates a new ApiOsdSvcIdPutRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiOsdSvcIdPutRequest(deviceClass string) *ApiOsdSvcIdPutRequest {
	this := ApiOsdSvcIdPutRequest{}
	this.DeviceClass = deviceClass
	return &this
}

// NewApiOsdSvcIdPutRequestWithDefaults instantiates a new ApiOsdSvcIdPutRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiOsdSvcIdPutRequestWithDefaults() *ApiOsdSvcIdPutRequest {
	this := ApiOsdSvcIdPutRequest{}
	return &this
}

// GetDeviceClass returns the DeviceClass field value
func (o *ApiOsdSvcIdPutRequest) GetDeviceClass() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeviceClass
}

// GetDeviceClassOk returns a tuple with the DeviceClass field value
// and a boolean to check if the value has been set.
func (o *ApiOsdSvcIdPutRequest) GetDeviceClassOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceClass, true
}

// SetDeviceClass sets field value
func (o *ApiOsdSvcIdPutRequest) SetDeviceClass(v string) {
	o.DeviceClass = v
}

func (o ApiOsdSvcIdPutRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiOsdSvcIdPutRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["device_class"] = o.DeviceClass
	return toSerialize, nil
}

func (o *ApiOsdSvcIdPutRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"device_class",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiOsdSvcIdPutRequest := _ApiOsdSvcIdPutRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiOsdSvcIdPutRequest)

	if err != nil {
		return err
	}

	*o = ApiOsdSvcIdPutRequest(varApiOsdSvcIdPutRequest)

	return err
}

type NullableApiOsdSvcIdPutRequest struct {
	value *ApiOsdSvcIdPutRequest
	isSet bool
}

func (v NullableApiOsdSvcIdPutRequest) Get() *ApiOsdSvcIdPutRequest {
	return v.value
}

func (v *NullableApiOsdSvcIdPutRequest) Set(val *ApiOsdSvcIdPutRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableApiOsdSvcIdPutRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableApiOsdSvcIdPutRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiOsdSvcIdPutRequest(val *ApiOsdSvcIdPutRequest) *NullableApiOsdSvcIdPutRequest {
	return &NullableApiOsdSvcIdPutRequest{value: val, isSet: true}
}

func (v NullableApiOsdSvcIdPutRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiOsdSvcIdPutRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


