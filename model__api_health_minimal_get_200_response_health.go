/*
Ceph REST API

This is the official Ceph REST API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ceph

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApiHealthMinimalGet200ResponseHealth type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiHealthMinimalGet200ResponseHealth{}

// ApiHealthMinimalGet200ResponseHealth 
type ApiHealthMinimalGet200ResponseHealth struct {
	// 
	Checks string `json:"checks"`
	// 
	Mutes string `json:"mutes"`
	// 
	Status string `json:"status"`
}

type _ApiHealthMinimalGet200ResponseHealth ApiHealthMinimalGet200ResponseHealth

// NewApiHealthMinimalGet200ResponseHealth instantiates a new ApiHealthMinimalGet200ResponseHealth object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiHealthMinimalGet200ResponseHealth(checks string, mutes string, status string) *ApiHealthMinimalGet200ResponseHealth {
	this := ApiHealthMinimalGet200ResponseHealth{}
	this.Checks = checks
	this.Mutes = mutes
	this.Status = status
	return &this
}

// NewApiHealthMinimalGet200ResponseHealthWithDefaults instantiates a new ApiHealthMinimalGet200ResponseHealth object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiHealthMinimalGet200ResponseHealthWithDefaults() *ApiHealthMinimalGet200ResponseHealth {
	this := ApiHealthMinimalGet200ResponseHealth{}
	return &this
}

// GetChecks returns the Checks field value
func (o *ApiHealthMinimalGet200ResponseHealth) GetChecks() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Checks
}

// GetChecksOk returns a tuple with the Checks field value
// and a boolean to check if the value has been set.
func (o *ApiHealthMinimalGet200ResponseHealth) GetChecksOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Checks, true
}

// SetChecks sets field value
func (o *ApiHealthMinimalGet200ResponseHealth) SetChecks(v string) {
	o.Checks = v
}

// GetMutes returns the Mutes field value
func (o *ApiHealthMinimalGet200ResponseHealth) GetMutes() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Mutes
}

// GetMutesOk returns a tuple with the Mutes field value
// and a boolean to check if the value has been set.
func (o *ApiHealthMinimalGet200ResponseHealth) GetMutesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mutes, true
}

// SetMutes sets field value
func (o *ApiHealthMinimalGet200ResponseHealth) SetMutes(v string) {
	o.Mutes = v
}

// GetStatus returns the Status field value
func (o *ApiHealthMinimalGet200ResponseHealth) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ApiHealthMinimalGet200ResponseHealth) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ApiHealthMinimalGet200ResponseHealth) SetStatus(v string) {
	o.Status = v
}

func (o ApiHealthMinimalGet200ResponseHealth) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiHealthMinimalGet200ResponseHealth) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["checks"] = o.Checks
	toSerialize["mutes"] = o.Mutes
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *ApiHealthMinimalGet200ResponseHealth) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"checks",
		"mutes",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiHealthMinimalGet200ResponseHealth := _ApiHealthMinimalGet200ResponseHealth{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiHealthMinimalGet200ResponseHealth)

	if err != nil {
		return err
	}

	*o = ApiHealthMinimalGet200ResponseHealth(varApiHealthMinimalGet200ResponseHealth)

	return err
}

type NullableApiHealthMinimalGet200ResponseHealth struct {
	value *ApiHealthMinimalGet200ResponseHealth
	isSet bool
}

func (v NullableApiHealthMinimalGet200ResponseHealth) Get() *ApiHealthMinimalGet200ResponseHealth {
	return v.value
}

func (v *NullableApiHealthMinimalGet200ResponseHealth) Set(val *ApiHealthMinimalGet200ResponseHealth) {
	v.value = val
	v.isSet = true
}

func (v NullableApiHealthMinimalGet200ResponseHealth) IsSet() bool {
	return v.isSet
}

func (v *NullableApiHealthMinimalGet200ResponseHealth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiHealthMinimalGet200ResponseHealth(val *ApiHealthMinimalGet200ResponseHealth) *NullableApiHealthMinimalGet200ResponseHealth {
	return &NullableApiHealthMinimalGet200ResponseHealth{value: val, isSet: true}
}

func (v NullableApiHealthMinimalGet200ResponseHealth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiHealthMinimalGet200ResponseHealth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


