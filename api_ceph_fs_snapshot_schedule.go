/*
Ceph REST API

This is the official Ceph REST API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ceph

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// CephFSSnapshotScheduleAPIService CephFSSnapshotScheduleAPI service
type CephFSSnapshotScheduleAPIService service

type ApiApiCephfsSnapshotScheduleFsGetRequest struct {
	ctx context.Context
	ApiService *CephFSSnapshotScheduleAPIService
	fs string
	path *string
	recursive *bool
}

func (r ApiApiCephfsSnapshotScheduleFsGetRequest) Path(path string) ApiApiCephfsSnapshotScheduleFsGetRequest {
	r.path = &path
	return r
}

func (r ApiApiCephfsSnapshotScheduleFsGetRequest) Recursive(recursive bool) ApiApiCephfsSnapshotScheduleFsGetRequest {
	r.recursive = &recursive
	return r
}

func (r ApiApiCephfsSnapshotScheduleFsGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiCephfsSnapshotScheduleFsGetExecute(r)
}

/*
ApiCephfsSnapshotScheduleFsGet Method for ApiCephfsSnapshotScheduleFsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param fs
 @return ApiApiCephfsSnapshotScheduleFsGetRequest
*/
func (a *CephFSSnapshotScheduleAPIService) ApiCephfsSnapshotScheduleFsGet(ctx context.Context, fs string) ApiApiCephfsSnapshotScheduleFsGetRequest {
	return ApiApiCephfsSnapshotScheduleFsGetRequest{
		ApiService: a,
		ctx: ctx,
		fs: fs,
	}
}

// Execute executes the request
func (a *CephFSSnapshotScheduleAPIService) ApiCephfsSnapshotScheduleFsGetExecute(r ApiApiCephfsSnapshotScheduleFsGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CephFSSnapshotScheduleAPIService.ApiCephfsSnapshotScheduleFsGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/cephfs/snapshot/schedule/{fs}"
	localVarPath = strings.Replace(localVarPath, "{"+"fs"+"}", url.PathEscape(parameterValueToString(r.fs, "fs")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.path != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "path", r.path, "form", "")
	}
	if r.recursive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recursive", r.recursive, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiCephfsSnapshotScheduleFsPathActivatePostRequest struct {
	ctx context.Context
	ApiService *CephFSSnapshotScheduleAPIService
	fs string
	path string
	apiCephfsSnapshotScheduleFsPathActivatePostRequest *ApiCephfsSnapshotScheduleFsPathActivatePostRequest
}

func (r ApiApiCephfsSnapshotScheduleFsPathActivatePostRequest) ApiCephfsSnapshotScheduleFsPathActivatePostRequest(apiCephfsSnapshotScheduleFsPathActivatePostRequest ApiCephfsSnapshotScheduleFsPathActivatePostRequest) ApiApiCephfsSnapshotScheduleFsPathActivatePostRequest {
	r.apiCephfsSnapshotScheduleFsPathActivatePostRequest = &apiCephfsSnapshotScheduleFsPathActivatePostRequest
	return r
}

func (r ApiApiCephfsSnapshotScheduleFsPathActivatePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiCephfsSnapshotScheduleFsPathActivatePostExecute(r)
}

/*
ApiCephfsSnapshotScheduleFsPathActivatePost Method for ApiCephfsSnapshotScheduleFsPathActivatePost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param fs
 @param path
 @return ApiApiCephfsSnapshotScheduleFsPathActivatePostRequest
*/
func (a *CephFSSnapshotScheduleAPIService) ApiCephfsSnapshotScheduleFsPathActivatePost(ctx context.Context, fs string, path string) ApiApiCephfsSnapshotScheduleFsPathActivatePostRequest {
	return ApiApiCephfsSnapshotScheduleFsPathActivatePostRequest{
		ApiService: a,
		ctx: ctx,
		fs: fs,
		path: path,
	}
}

// Execute executes the request
func (a *CephFSSnapshotScheduleAPIService) ApiCephfsSnapshotScheduleFsPathActivatePostExecute(r ApiApiCephfsSnapshotScheduleFsPathActivatePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CephFSSnapshotScheduleAPIService.ApiCephfsSnapshotScheduleFsPathActivatePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/cephfs/snapshot/schedule/{fs}/{path}/activate"
	localVarPath = strings.Replace(localVarPath, "{"+"fs"+"}", url.PathEscape(parameterValueToString(r.fs, "fs")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"path"+"}", url.PathEscape(parameterValueToString(r.path, "path")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiCephfsSnapshotScheduleFsPathActivatePostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiCephfsSnapshotScheduleFsPathDeactivatePostRequest struct {
	ctx context.Context
	ApiService *CephFSSnapshotScheduleAPIService
	fs string
	path string
	apiCephfsSnapshotScheduleFsPathActivatePostRequest *ApiCephfsSnapshotScheduleFsPathActivatePostRequest
}

func (r ApiApiCephfsSnapshotScheduleFsPathDeactivatePostRequest) ApiCephfsSnapshotScheduleFsPathActivatePostRequest(apiCephfsSnapshotScheduleFsPathActivatePostRequest ApiCephfsSnapshotScheduleFsPathActivatePostRequest) ApiApiCephfsSnapshotScheduleFsPathDeactivatePostRequest {
	r.apiCephfsSnapshotScheduleFsPathActivatePostRequest = &apiCephfsSnapshotScheduleFsPathActivatePostRequest
	return r
}

func (r ApiApiCephfsSnapshotScheduleFsPathDeactivatePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiCephfsSnapshotScheduleFsPathDeactivatePostExecute(r)
}

/*
ApiCephfsSnapshotScheduleFsPathDeactivatePost Method for ApiCephfsSnapshotScheduleFsPathDeactivatePost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param fs
 @param path
 @return ApiApiCephfsSnapshotScheduleFsPathDeactivatePostRequest
*/
func (a *CephFSSnapshotScheduleAPIService) ApiCephfsSnapshotScheduleFsPathDeactivatePost(ctx context.Context, fs string, path string) ApiApiCephfsSnapshotScheduleFsPathDeactivatePostRequest {
	return ApiApiCephfsSnapshotScheduleFsPathDeactivatePostRequest{
		ApiService: a,
		ctx: ctx,
		fs: fs,
		path: path,
	}
}

// Execute executes the request
func (a *CephFSSnapshotScheduleAPIService) ApiCephfsSnapshotScheduleFsPathDeactivatePostExecute(r ApiApiCephfsSnapshotScheduleFsPathDeactivatePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CephFSSnapshotScheduleAPIService.ApiCephfsSnapshotScheduleFsPathDeactivatePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/cephfs/snapshot/schedule/{fs}/{path}/deactivate"
	localVarPath = strings.Replace(localVarPath, "{"+"fs"+"}", url.PathEscape(parameterValueToString(r.fs, "fs")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"path"+"}", url.PathEscape(parameterValueToString(r.path, "path")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiCephfsSnapshotScheduleFsPathActivatePostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiCephfsSnapshotScheduleFsPathDeleteSnapshotDeleteRequest struct {
	ctx context.Context
	ApiService *CephFSSnapshotScheduleAPIService
	fs string
	path string
	schedule *string
	start *string
	retentionPolicy *string
	subvol *string
	group *string
}

func (r ApiApiCephfsSnapshotScheduleFsPathDeleteSnapshotDeleteRequest) Schedule(schedule string) ApiApiCephfsSnapshotScheduleFsPathDeleteSnapshotDeleteRequest {
	r.schedule = &schedule
	return r
}

func (r ApiApiCephfsSnapshotScheduleFsPathDeleteSnapshotDeleteRequest) Start(start string) ApiApiCephfsSnapshotScheduleFsPathDeleteSnapshotDeleteRequest {
	r.start = &start
	return r
}

func (r ApiApiCephfsSnapshotScheduleFsPathDeleteSnapshotDeleteRequest) RetentionPolicy(retentionPolicy string) ApiApiCephfsSnapshotScheduleFsPathDeleteSnapshotDeleteRequest {
	r.retentionPolicy = &retentionPolicy
	return r
}

func (r ApiApiCephfsSnapshotScheduleFsPathDeleteSnapshotDeleteRequest) Subvol(subvol string) ApiApiCephfsSnapshotScheduleFsPathDeleteSnapshotDeleteRequest {
	r.subvol = &subvol
	return r
}

func (r ApiApiCephfsSnapshotScheduleFsPathDeleteSnapshotDeleteRequest) Group(group string) ApiApiCephfsSnapshotScheduleFsPathDeleteSnapshotDeleteRequest {
	r.group = &group
	return r
}

func (r ApiApiCephfsSnapshotScheduleFsPathDeleteSnapshotDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiCephfsSnapshotScheduleFsPathDeleteSnapshotDeleteExecute(r)
}

/*
ApiCephfsSnapshotScheduleFsPathDeleteSnapshotDelete Method for ApiCephfsSnapshotScheduleFsPathDeleteSnapshotDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param fs
 @param path
 @return ApiApiCephfsSnapshotScheduleFsPathDeleteSnapshotDeleteRequest
*/
func (a *CephFSSnapshotScheduleAPIService) ApiCephfsSnapshotScheduleFsPathDeleteSnapshotDelete(ctx context.Context, fs string, path string) ApiApiCephfsSnapshotScheduleFsPathDeleteSnapshotDeleteRequest {
	return ApiApiCephfsSnapshotScheduleFsPathDeleteSnapshotDeleteRequest{
		ApiService: a,
		ctx: ctx,
		fs: fs,
		path: path,
	}
}

// Execute executes the request
func (a *CephFSSnapshotScheduleAPIService) ApiCephfsSnapshotScheduleFsPathDeleteSnapshotDeleteExecute(r ApiApiCephfsSnapshotScheduleFsPathDeleteSnapshotDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CephFSSnapshotScheduleAPIService.ApiCephfsSnapshotScheduleFsPathDeleteSnapshotDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/cephfs/snapshot/schedule/{fs}/{path}/delete_snapshot"
	localVarPath = strings.Replace(localVarPath, "{"+"fs"+"}", url.PathEscape(parameterValueToString(r.fs, "fs")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"path"+"}", url.PathEscape(parameterValueToString(r.path, "path")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.schedule == nil {
		return nil, reportError("schedule is required and must be specified")
	}
	if r.start == nil {
		return nil, reportError("start is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "schedule", r.schedule, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "form", "")
	if r.retentionPolicy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "retention_policy", r.retentionPolicy, "form", "")
	}
	if r.subvol != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subvol", r.subvol, "form", "")
	}
	if r.group != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "group", r.group, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiCephfsSnapshotScheduleFsPathPutRequest struct {
	ctx context.Context
	ApiService *CephFSSnapshotScheduleAPIService
	fs string
	path string
	apiCephfsSnapshotScheduleFsPathPutRequest *ApiCephfsSnapshotScheduleFsPathPutRequest
}

func (r ApiApiCephfsSnapshotScheduleFsPathPutRequest) ApiCephfsSnapshotScheduleFsPathPutRequest(apiCephfsSnapshotScheduleFsPathPutRequest ApiCephfsSnapshotScheduleFsPathPutRequest) ApiApiCephfsSnapshotScheduleFsPathPutRequest {
	r.apiCephfsSnapshotScheduleFsPathPutRequest = &apiCephfsSnapshotScheduleFsPathPutRequest
	return r
}

func (r ApiApiCephfsSnapshotScheduleFsPathPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiCephfsSnapshotScheduleFsPathPutExecute(r)
}

/*
ApiCephfsSnapshotScheduleFsPathPut Method for ApiCephfsSnapshotScheduleFsPathPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param fs
 @param path
 @return ApiApiCephfsSnapshotScheduleFsPathPutRequest
*/
func (a *CephFSSnapshotScheduleAPIService) ApiCephfsSnapshotScheduleFsPathPut(ctx context.Context, fs string, path string) ApiApiCephfsSnapshotScheduleFsPathPutRequest {
	return ApiApiCephfsSnapshotScheduleFsPathPutRequest{
		ApiService: a,
		ctx: ctx,
		fs: fs,
		path: path,
	}
}

// Execute executes the request
func (a *CephFSSnapshotScheduleAPIService) ApiCephfsSnapshotScheduleFsPathPutExecute(r ApiApiCephfsSnapshotScheduleFsPathPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CephFSSnapshotScheduleAPIService.ApiCephfsSnapshotScheduleFsPathPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/cephfs/snapshot/schedule/{fs}/{path}"
	localVarPath = strings.Replace(localVarPath, "{"+"fs"+"}", url.PathEscape(parameterValueToString(r.fs, "fs")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"path"+"}", url.PathEscape(parameterValueToString(r.path, "path")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiCephfsSnapshotScheduleFsPathPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiCephfsSnapshotSchedulePostRequest struct {
	ctx context.Context
	ApiService *CephFSSnapshotScheduleAPIService
	apiCephfsSnapshotSchedulePostRequest *ApiCephfsSnapshotSchedulePostRequest
}

func (r ApiApiCephfsSnapshotSchedulePostRequest) ApiCephfsSnapshotSchedulePostRequest(apiCephfsSnapshotSchedulePostRequest ApiCephfsSnapshotSchedulePostRequest) ApiApiCephfsSnapshotSchedulePostRequest {
	r.apiCephfsSnapshotSchedulePostRequest = &apiCephfsSnapshotSchedulePostRequest
	return r
}

func (r ApiApiCephfsSnapshotSchedulePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiCephfsSnapshotSchedulePostExecute(r)
}

/*
ApiCephfsSnapshotSchedulePost Method for ApiCephfsSnapshotSchedulePost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiCephfsSnapshotSchedulePostRequest
*/
func (a *CephFSSnapshotScheduleAPIService) ApiCephfsSnapshotSchedulePost(ctx context.Context) ApiApiCephfsSnapshotSchedulePostRequest {
	return ApiApiCephfsSnapshotSchedulePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CephFSSnapshotScheduleAPIService) ApiCephfsSnapshotSchedulePostExecute(r ApiApiCephfsSnapshotSchedulePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CephFSSnapshotScheduleAPIService.ApiCephfsSnapshotSchedulePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/cephfs/snapshot/schedule"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiCephfsSnapshotSchedulePostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
