/*
Ceph REST API

This is the official Ceph REST API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ceph

import (
	"encoding/json"
)

// checks if the ApiBlockImageImageSpecMoveTrashPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiBlockImageImageSpecMoveTrashPostRequest{}

// ApiBlockImageImageSpecMoveTrashPostRequest struct for ApiBlockImageImageSpecMoveTrashPostRequest
type ApiBlockImageImageSpecMoveTrashPostRequest struct {
	Delay *int32 `json:"delay,omitempty"`
}

// NewApiBlockImageImageSpecMoveTrashPostRequest instantiates a new ApiBlockImageImageSpecMoveTrashPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiBlockImageImageSpecMoveTrashPostRequest() *ApiBlockImageImageSpecMoveTrashPostRequest {
	this := ApiBlockImageImageSpecMoveTrashPostRequest{}
	var delay int32 = 0
	this.Delay = &delay
	return &this
}

// NewApiBlockImageImageSpecMoveTrashPostRequestWithDefaults instantiates a new ApiBlockImageImageSpecMoveTrashPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiBlockImageImageSpecMoveTrashPostRequestWithDefaults() *ApiBlockImageImageSpecMoveTrashPostRequest {
	this := ApiBlockImageImageSpecMoveTrashPostRequest{}
	var delay int32 = 0
	this.Delay = &delay
	return &this
}

// GetDelay returns the Delay field value if set, zero value otherwise.
func (o *ApiBlockImageImageSpecMoveTrashPostRequest) GetDelay() int32 {
	if o == nil || IsNil(o.Delay) {
		var ret int32
		return ret
	}
	return *o.Delay
}

// GetDelayOk returns a tuple with the Delay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiBlockImageImageSpecMoveTrashPostRequest) GetDelayOk() (*int32, bool) {
	if o == nil || IsNil(o.Delay) {
		return nil, false
	}
	return o.Delay, true
}

// HasDelay returns a boolean if a field has been set.
func (o *ApiBlockImageImageSpecMoveTrashPostRequest) HasDelay() bool {
	if o != nil && !IsNil(o.Delay) {
		return true
	}

	return false
}

// SetDelay gets a reference to the given int32 and assigns it to the Delay field.
func (o *ApiBlockImageImageSpecMoveTrashPostRequest) SetDelay(v int32) {
	o.Delay = &v
}

func (o ApiBlockImageImageSpecMoveTrashPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiBlockImageImageSpecMoveTrashPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Delay) {
		toSerialize["delay"] = o.Delay
	}
	return toSerialize, nil
}

type NullableApiBlockImageImageSpecMoveTrashPostRequest struct {
	value *ApiBlockImageImageSpecMoveTrashPostRequest
	isSet bool
}

func (v NullableApiBlockImageImageSpecMoveTrashPostRequest) Get() *ApiBlockImageImageSpecMoveTrashPostRequest {
	return v.value
}

func (v *NullableApiBlockImageImageSpecMoveTrashPostRequest) Set(val *ApiBlockImageImageSpecMoveTrashPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableApiBlockImageImageSpecMoveTrashPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableApiBlockImageImageSpecMoveTrashPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiBlockImageImageSpecMoveTrashPostRequest(val *ApiBlockImageImageSpecMoveTrashPostRequest) *NullableApiBlockImageImageSpecMoveTrashPostRequest {
	return &NullableApiBlockImageImageSpecMoveTrashPostRequest{value: val, isSet: true}
}

func (v NullableApiBlockImageImageSpecMoveTrashPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiBlockImageImageSpecMoveTrashPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


