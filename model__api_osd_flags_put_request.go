/*
Ceph REST API

This is the official Ceph REST API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ceph

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApiOsdFlagsPutRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiOsdFlagsPutRequest{}

// ApiOsdFlagsPutRequest struct for ApiOsdFlagsPutRequest
type ApiOsdFlagsPutRequest struct {
	// List of flags to set. The flags `recovery_deletes`, `sortbitwise` and `pglog_hardlimit` cannot be unset. Additionally `purged_snapshots` cannot even be set.
	Flags []string `json:"flags"`
}

type _ApiOsdFlagsPutRequest ApiOsdFlagsPutRequest

// NewApiOsdFlagsPutRequest instantiates a new ApiOsdFlagsPutRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiOsdFlagsPutRequest(flags []string) *ApiOsdFlagsPutRequest {
	this := ApiOsdFlagsPutRequest{}
	this.Flags = flags
	return &this
}

// NewApiOsdFlagsPutRequestWithDefaults instantiates a new ApiOsdFlagsPutRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiOsdFlagsPutRequestWithDefaults() *ApiOsdFlagsPutRequest {
	this := ApiOsdFlagsPutRequest{}
	return &this
}

// GetFlags returns the Flags field value
func (o *ApiOsdFlagsPutRequest) GetFlags() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Flags
}

// GetFlagsOk returns a tuple with the Flags field value
// and a boolean to check if the value has been set.
func (o *ApiOsdFlagsPutRequest) GetFlagsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Flags, true
}

// SetFlags sets field value
func (o *ApiOsdFlagsPutRequest) SetFlags(v []string) {
	o.Flags = v
}

func (o ApiOsdFlagsPutRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiOsdFlagsPutRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["flags"] = o.Flags
	return toSerialize, nil
}

func (o *ApiOsdFlagsPutRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"flags",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiOsdFlagsPutRequest := _ApiOsdFlagsPutRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiOsdFlagsPutRequest)

	if err != nil {
		return err
	}

	*o = ApiOsdFlagsPutRequest(varApiOsdFlagsPutRequest)

	return err
}

type NullableApiOsdFlagsPutRequest struct {
	value *ApiOsdFlagsPutRequest
	isSet bool
}

func (v NullableApiOsdFlagsPutRequest) Get() *ApiOsdFlagsPutRequest {
	return v.value
}

func (v *NullableApiOsdFlagsPutRequest) Set(val *ApiOsdFlagsPutRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableApiOsdFlagsPutRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableApiOsdFlagsPutRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiOsdFlagsPutRequest(val *ApiOsdFlagsPutRequest) *NullableApiOsdFlagsPutRequest {
	return &NullableApiOsdFlagsPutRequest{value: val, isSet: true}
}

func (v NullableApiOsdFlagsPutRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiOsdFlagsPutRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


