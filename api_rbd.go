/*
Ceph REST API

This is the official Ceph REST API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ceph

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// RbdAPIService RbdAPI service
type RbdAPIService service

type ApiApiBlockImageCloneFormatVersionGetRequest struct {
	ctx context.Context
	ApiService *RbdAPIService
}

func (r ApiApiBlockImageCloneFormatVersionGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiBlockImageCloneFormatVersionGetExecute(r)
}

/*
ApiBlockImageCloneFormatVersionGet Method for ApiBlockImageCloneFormatVersionGet

Return the RBD clone format version.
        

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiBlockImageCloneFormatVersionGetRequest
*/
func (a *RbdAPIService) ApiBlockImageCloneFormatVersionGet(ctx context.Context) ApiApiBlockImageCloneFormatVersionGetRequest {
	return ApiApiBlockImageCloneFormatVersionGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *RbdAPIService) ApiBlockImageCloneFormatVersionGetExecute(r ApiApiBlockImageCloneFormatVersionGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbdAPIService.ApiBlockImageCloneFormatVersionGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/block/image/clone_format_version"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiBlockImageDefaultFeaturesGetRequest struct {
	ctx context.Context
	ApiService *RbdAPIService
}

func (r ApiApiBlockImageDefaultFeaturesGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiBlockImageDefaultFeaturesGetExecute(r)
}

/*
ApiBlockImageDefaultFeaturesGet Method for ApiBlockImageDefaultFeaturesGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiBlockImageDefaultFeaturesGetRequest
*/
func (a *RbdAPIService) ApiBlockImageDefaultFeaturesGet(ctx context.Context) ApiApiBlockImageDefaultFeaturesGetRequest {
	return ApiApiBlockImageDefaultFeaturesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *RbdAPIService) ApiBlockImageDefaultFeaturesGetExecute(r ApiApiBlockImageDefaultFeaturesGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbdAPIService.ApiBlockImageDefaultFeaturesGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/block/image/default_features"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiBlockImageGetRequest struct {
	ctx context.Context
	ApiService *RbdAPIService
	poolName *string
	offset *int32
	limit *int32
	search *string
	sort *string
}

// Pool Name
func (r ApiApiBlockImageGetRequest) PoolName(poolName string) ApiApiBlockImageGetRequest {
	r.poolName = &poolName
	return r
}

// offset
func (r ApiApiBlockImageGetRequest) Offset(offset int32) ApiApiBlockImageGetRequest {
	r.offset = &offset
	return r
}

// limit
func (r ApiApiBlockImageGetRequest) Limit(limit int32) ApiApiBlockImageGetRequest {
	r.limit = &limit
	return r
}

func (r ApiApiBlockImageGetRequest) Search(search string) ApiApiBlockImageGetRequest {
	r.search = &search
	return r
}

func (r ApiApiBlockImageGetRequest) Sort(sort string) ApiApiBlockImageGetRequest {
	r.sort = &sort
	return r
}

func (r ApiApiBlockImageGetRequest) Execute() ([]ApiBlockImageGet200ResponseInner, *http.Response, error) {
	return r.ApiService.ApiBlockImageGetExecute(r)
}

/*
ApiBlockImageGet Display Rbd Images

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiBlockImageGetRequest
*/
func (a *RbdAPIService) ApiBlockImageGet(ctx context.Context) ApiApiBlockImageGetRequest {
	return ApiApiBlockImageGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ApiBlockImageGet200ResponseInner
func (a *RbdAPIService) ApiBlockImageGetExecute(r ApiApiBlockImageGetRequest) ([]ApiBlockImageGet200ResponseInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ApiBlockImageGet200ResponseInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbdAPIService.ApiBlockImageGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/block/image"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.poolName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pool_name", r.poolName, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v2.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiBlockImageImageSpecCopyPostRequest struct {
	ctx context.Context
	ApiService *RbdAPIService
	imageSpec string
	apiBlockImageImageSpecCopyPostRequest *ApiBlockImageImageSpecCopyPostRequest
}

func (r ApiApiBlockImageImageSpecCopyPostRequest) ApiBlockImageImageSpecCopyPostRequest(apiBlockImageImageSpecCopyPostRequest ApiBlockImageImageSpecCopyPostRequest) ApiApiBlockImageImageSpecCopyPostRequest {
	r.apiBlockImageImageSpecCopyPostRequest = &apiBlockImageImageSpecCopyPostRequest
	return r
}

func (r ApiApiBlockImageImageSpecCopyPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiBlockImageImageSpecCopyPostExecute(r)
}

/*
ApiBlockImageImageSpecCopyPost Method for ApiBlockImageImageSpecCopyPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param imageSpec
 @return ApiApiBlockImageImageSpecCopyPostRequest
*/
func (a *RbdAPIService) ApiBlockImageImageSpecCopyPost(ctx context.Context, imageSpec string) ApiApiBlockImageImageSpecCopyPostRequest {
	return ApiApiBlockImageImageSpecCopyPostRequest{
		ApiService: a,
		ctx: ctx,
		imageSpec: imageSpec,
	}
}

// Execute executes the request
func (a *RbdAPIService) ApiBlockImageImageSpecCopyPostExecute(r ApiApiBlockImageImageSpecCopyPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbdAPIService.ApiBlockImageImageSpecCopyPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/block/image/{image_spec}/copy"
	localVarPath = strings.Replace(localVarPath, "{"+"image_spec"+"}", url.PathEscape(parameterValueToString(r.imageSpec, "imageSpec")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiBlockImageImageSpecCopyPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiBlockImageImageSpecDeleteRequest struct {
	ctx context.Context
	ApiService *RbdAPIService
	imageSpec string
}

func (r ApiApiBlockImageImageSpecDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiBlockImageImageSpecDeleteExecute(r)
}

/*
ApiBlockImageImageSpecDelete Method for ApiBlockImageImageSpecDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param imageSpec
 @return ApiApiBlockImageImageSpecDeleteRequest
*/
func (a *RbdAPIService) ApiBlockImageImageSpecDelete(ctx context.Context, imageSpec string) ApiApiBlockImageImageSpecDeleteRequest {
	return ApiApiBlockImageImageSpecDeleteRequest{
		ApiService: a,
		ctx: ctx,
		imageSpec: imageSpec,
	}
}

// Execute executes the request
func (a *RbdAPIService) ApiBlockImageImageSpecDeleteExecute(r ApiApiBlockImageImageSpecDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbdAPIService.ApiBlockImageImageSpecDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/block/image/{image_spec}"
	localVarPath = strings.Replace(localVarPath, "{"+"image_spec"+"}", url.PathEscape(parameterValueToString(r.imageSpec, "imageSpec")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiBlockImageImageSpecFlattenPostRequest struct {
	ctx context.Context
	ApiService *RbdAPIService
	imageSpec string
}

func (r ApiApiBlockImageImageSpecFlattenPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiBlockImageImageSpecFlattenPostExecute(r)
}

/*
ApiBlockImageImageSpecFlattenPost Method for ApiBlockImageImageSpecFlattenPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param imageSpec
 @return ApiApiBlockImageImageSpecFlattenPostRequest
*/
func (a *RbdAPIService) ApiBlockImageImageSpecFlattenPost(ctx context.Context, imageSpec string) ApiApiBlockImageImageSpecFlattenPostRequest {
	return ApiApiBlockImageImageSpecFlattenPostRequest{
		ApiService: a,
		ctx: ctx,
		imageSpec: imageSpec,
	}
}

// Execute executes the request
func (a *RbdAPIService) ApiBlockImageImageSpecFlattenPostExecute(r ApiApiBlockImageImageSpecFlattenPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbdAPIService.ApiBlockImageImageSpecFlattenPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/block/image/{image_spec}/flatten"
	localVarPath = strings.Replace(localVarPath, "{"+"image_spec"+"}", url.PathEscape(parameterValueToString(r.imageSpec, "imageSpec")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiBlockImageImageSpecGetRequest struct {
	ctx context.Context
	ApiService *RbdAPIService
	imageSpec string
	omitUsage *bool
}

// When true, usage information is not returned
func (r ApiApiBlockImageImageSpecGetRequest) OmitUsage(omitUsage bool) ApiApiBlockImageImageSpecGetRequest {
	r.omitUsage = &omitUsage
	return r
}

func (r ApiApiBlockImageImageSpecGetRequest) Execute() (*ApiBlockImageImageSpecGet200Response, *http.Response, error) {
	return r.ApiService.ApiBlockImageImageSpecGetExecute(r)
}

/*
ApiBlockImageImageSpecGet Get Rbd Image Info

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param imageSpec URL-encoded \"pool/rbd_name\". e.g. \"rbd%2Ffoo\"
 @return ApiApiBlockImageImageSpecGetRequest
*/
func (a *RbdAPIService) ApiBlockImageImageSpecGet(ctx context.Context, imageSpec string) ApiApiBlockImageImageSpecGetRequest {
	return ApiApiBlockImageImageSpecGetRequest{
		ApiService: a,
		ctx: ctx,
		imageSpec: imageSpec,
	}
}

// Execute executes the request
//  @return ApiBlockImageImageSpecGet200Response
func (a *RbdAPIService) ApiBlockImageImageSpecGetExecute(r ApiApiBlockImageImageSpecGetRequest) (*ApiBlockImageImageSpecGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiBlockImageImageSpecGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbdAPIService.ApiBlockImageImageSpecGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/block/image/{image_spec}"
	localVarPath = strings.Replace(localVarPath, "{"+"image_spec"+"}", url.PathEscape(parameterValueToString(r.imageSpec, "imageSpec")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.omitUsage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "omit_usage", r.omitUsage, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiBlockImageImageSpecMoveTrashPostRequest struct {
	ctx context.Context
	ApiService *RbdAPIService
	imageSpec string
	apiBlockImageImageSpecMoveTrashPostRequest *ApiBlockImageImageSpecMoveTrashPostRequest
}

func (r ApiApiBlockImageImageSpecMoveTrashPostRequest) ApiBlockImageImageSpecMoveTrashPostRequest(apiBlockImageImageSpecMoveTrashPostRequest ApiBlockImageImageSpecMoveTrashPostRequest) ApiApiBlockImageImageSpecMoveTrashPostRequest {
	r.apiBlockImageImageSpecMoveTrashPostRequest = &apiBlockImageImageSpecMoveTrashPostRequest
	return r
}

func (r ApiApiBlockImageImageSpecMoveTrashPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiBlockImageImageSpecMoveTrashPostExecute(r)
}

/*
ApiBlockImageImageSpecMoveTrashPost Method for ApiBlockImageImageSpecMoveTrashPost

Move an image to the trash.
        Images, even ones actively in-use by clones,
        can be moved to the trash and deleted at a later time.
        

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param imageSpec
 @return ApiApiBlockImageImageSpecMoveTrashPostRequest
*/
func (a *RbdAPIService) ApiBlockImageImageSpecMoveTrashPost(ctx context.Context, imageSpec string) ApiApiBlockImageImageSpecMoveTrashPostRequest {
	return ApiApiBlockImageImageSpecMoveTrashPostRequest{
		ApiService: a,
		ctx: ctx,
		imageSpec: imageSpec,
	}
}

// Execute executes the request
func (a *RbdAPIService) ApiBlockImageImageSpecMoveTrashPostExecute(r ApiApiBlockImageImageSpecMoveTrashPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbdAPIService.ApiBlockImageImageSpecMoveTrashPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/block/image/{image_spec}/move_trash"
	localVarPath = strings.Replace(localVarPath, "{"+"image_spec"+"}", url.PathEscape(parameterValueToString(r.imageSpec, "imageSpec")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiBlockImageImageSpecMoveTrashPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiBlockImageImageSpecPutRequest struct {
	ctx context.Context
	ApiService *RbdAPIService
	imageSpec string
	apiBlockImageImageSpecPutRequest *ApiBlockImageImageSpecPutRequest
}

func (r ApiApiBlockImageImageSpecPutRequest) ApiBlockImageImageSpecPutRequest(apiBlockImageImageSpecPutRequest ApiBlockImageImageSpecPutRequest) ApiApiBlockImageImageSpecPutRequest {
	r.apiBlockImageImageSpecPutRequest = &apiBlockImageImageSpecPutRequest
	return r
}

func (r ApiApiBlockImageImageSpecPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiBlockImageImageSpecPutExecute(r)
}

/*
ApiBlockImageImageSpecPut Method for ApiBlockImageImageSpecPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param imageSpec
 @return ApiApiBlockImageImageSpecPutRequest
*/
func (a *RbdAPIService) ApiBlockImageImageSpecPut(ctx context.Context, imageSpec string) ApiApiBlockImageImageSpecPutRequest {
	return ApiApiBlockImageImageSpecPutRequest{
		ApiService: a,
		ctx: ctx,
		imageSpec: imageSpec,
	}
}

// Execute executes the request
func (a *RbdAPIService) ApiBlockImageImageSpecPutExecute(r ApiApiBlockImageImageSpecPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbdAPIService.ApiBlockImageImageSpecPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/block/image/{image_spec}"
	localVarPath = strings.Replace(localVarPath, "{"+"image_spec"+"}", url.PathEscape(parameterValueToString(r.imageSpec, "imageSpec")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiBlockImageImageSpecPutRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiBlockImagePostRequest struct {
	ctx context.Context
	ApiService *RbdAPIService
	apiBlockImagePostRequest *ApiBlockImagePostRequest
}

func (r ApiApiBlockImagePostRequest) ApiBlockImagePostRequest(apiBlockImagePostRequest ApiBlockImagePostRequest) ApiApiBlockImagePostRequest {
	r.apiBlockImagePostRequest = &apiBlockImagePostRequest
	return r
}

func (r ApiApiBlockImagePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiBlockImagePostExecute(r)
}

/*
ApiBlockImagePost Method for ApiBlockImagePost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiBlockImagePostRequest
*/
func (a *RbdAPIService) ApiBlockImagePost(ctx context.Context) ApiApiBlockImagePostRequest {
	return ApiApiBlockImagePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *RbdAPIService) ApiBlockImagePostExecute(r ApiApiBlockImagePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbdAPIService.ApiBlockImagePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/block/image"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ceph.api.v1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiBlockImagePostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
