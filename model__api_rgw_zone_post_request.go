/*
Ceph REST API

This is the official Ceph REST API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ceph

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApiRgwZonePostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiRgwZonePostRequest{}

// ApiRgwZonePostRequest struct for ApiRgwZonePostRequest
type ApiRgwZonePostRequest struct {
	AccessKey *string `json:"access_key,omitempty"`
	Default *bool `json:"default,omitempty"`
	Master *bool `json:"master,omitempty"`
	SecretKey *string `json:"secret_key,omitempty"`
	ZoneEndpoints *string `json:"zone_endpoints,omitempty"`
	ZoneName string `json:"zone_name"`
	ZonegroupName *string `json:"zonegroup_name,omitempty"`
}

type _ApiRgwZonePostRequest ApiRgwZonePostRequest

// NewApiRgwZonePostRequest instantiates a new ApiRgwZonePostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiRgwZonePostRequest(zoneName string) *ApiRgwZonePostRequest {
	this := ApiRgwZonePostRequest{}
	var default_ bool = false
	this.Default = &default_
	var master bool = false
	this.Master = &master
	this.ZoneName = zoneName
	return &this
}

// NewApiRgwZonePostRequestWithDefaults instantiates a new ApiRgwZonePostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiRgwZonePostRequestWithDefaults() *ApiRgwZonePostRequest {
	this := ApiRgwZonePostRequest{}
	var default_ bool = false
	this.Default = &default_
	var master bool = false
	this.Master = &master
	return &this
}

// GetAccessKey returns the AccessKey field value if set, zero value otherwise.
func (o *ApiRgwZonePostRequest) GetAccessKey() string {
	if o == nil || IsNil(o.AccessKey) {
		var ret string
		return ret
	}
	return *o.AccessKey
}

// GetAccessKeyOk returns a tuple with the AccessKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiRgwZonePostRequest) GetAccessKeyOk() (*string, bool) {
	if o == nil || IsNil(o.AccessKey) {
		return nil, false
	}
	return o.AccessKey, true
}

// HasAccessKey returns a boolean if a field has been set.
func (o *ApiRgwZonePostRequest) HasAccessKey() bool {
	if o != nil && !IsNil(o.AccessKey) {
		return true
	}

	return false
}

// SetAccessKey gets a reference to the given string and assigns it to the AccessKey field.
func (o *ApiRgwZonePostRequest) SetAccessKey(v string) {
	o.AccessKey = &v
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *ApiRgwZonePostRequest) GetDefault() bool {
	if o == nil || IsNil(o.Default) {
		var ret bool
		return ret
	}
	return *o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiRgwZonePostRequest) GetDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.Default) {
		return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *ApiRgwZonePostRequest) HasDefault() bool {
	if o != nil && !IsNil(o.Default) {
		return true
	}

	return false
}

// SetDefault gets a reference to the given bool and assigns it to the Default field.
func (o *ApiRgwZonePostRequest) SetDefault(v bool) {
	o.Default = &v
}

// GetMaster returns the Master field value if set, zero value otherwise.
func (o *ApiRgwZonePostRequest) GetMaster() bool {
	if o == nil || IsNil(o.Master) {
		var ret bool
		return ret
	}
	return *o.Master
}

// GetMasterOk returns a tuple with the Master field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiRgwZonePostRequest) GetMasterOk() (*bool, bool) {
	if o == nil || IsNil(o.Master) {
		return nil, false
	}
	return o.Master, true
}

// HasMaster returns a boolean if a field has been set.
func (o *ApiRgwZonePostRequest) HasMaster() bool {
	if o != nil && !IsNil(o.Master) {
		return true
	}

	return false
}

// SetMaster gets a reference to the given bool and assigns it to the Master field.
func (o *ApiRgwZonePostRequest) SetMaster(v bool) {
	o.Master = &v
}

// GetSecretKey returns the SecretKey field value if set, zero value otherwise.
func (o *ApiRgwZonePostRequest) GetSecretKey() string {
	if o == nil || IsNil(o.SecretKey) {
		var ret string
		return ret
	}
	return *o.SecretKey
}

// GetSecretKeyOk returns a tuple with the SecretKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiRgwZonePostRequest) GetSecretKeyOk() (*string, bool) {
	if o == nil || IsNil(o.SecretKey) {
		return nil, false
	}
	return o.SecretKey, true
}

// HasSecretKey returns a boolean if a field has been set.
func (o *ApiRgwZonePostRequest) HasSecretKey() bool {
	if o != nil && !IsNil(o.SecretKey) {
		return true
	}

	return false
}

// SetSecretKey gets a reference to the given string and assigns it to the SecretKey field.
func (o *ApiRgwZonePostRequest) SetSecretKey(v string) {
	o.SecretKey = &v
}

// GetZoneEndpoints returns the ZoneEndpoints field value if set, zero value otherwise.
func (o *ApiRgwZonePostRequest) GetZoneEndpoints() string {
	if o == nil || IsNil(o.ZoneEndpoints) {
		var ret string
		return ret
	}
	return *o.ZoneEndpoints
}

// GetZoneEndpointsOk returns a tuple with the ZoneEndpoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiRgwZonePostRequest) GetZoneEndpointsOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneEndpoints) {
		return nil, false
	}
	return o.ZoneEndpoints, true
}

// HasZoneEndpoints returns a boolean if a field has been set.
func (o *ApiRgwZonePostRequest) HasZoneEndpoints() bool {
	if o != nil && !IsNil(o.ZoneEndpoints) {
		return true
	}

	return false
}

// SetZoneEndpoints gets a reference to the given string and assigns it to the ZoneEndpoints field.
func (o *ApiRgwZonePostRequest) SetZoneEndpoints(v string) {
	o.ZoneEndpoints = &v
}

// GetZoneName returns the ZoneName field value
func (o *ApiRgwZonePostRequest) GetZoneName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ZoneName
}

// GetZoneNameOk returns a tuple with the ZoneName field value
// and a boolean to check if the value has been set.
func (o *ApiRgwZonePostRequest) GetZoneNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZoneName, true
}

// SetZoneName sets field value
func (o *ApiRgwZonePostRequest) SetZoneName(v string) {
	o.ZoneName = v
}

// GetZonegroupName returns the ZonegroupName field value if set, zero value otherwise.
func (o *ApiRgwZonePostRequest) GetZonegroupName() string {
	if o == nil || IsNil(o.ZonegroupName) {
		var ret string
		return ret
	}
	return *o.ZonegroupName
}

// GetZonegroupNameOk returns a tuple with the ZonegroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiRgwZonePostRequest) GetZonegroupNameOk() (*string, bool) {
	if o == nil || IsNil(o.ZonegroupName) {
		return nil, false
	}
	return o.ZonegroupName, true
}

// HasZonegroupName returns a boolean if a field has been set.
func (o *ApiRgwZonePostRequest) HasZonegroupName() bool {
	if o != nil && !IsNil(o.ZonegroupName) {
		return true
	}

	return false
}

// SetZonegroupName gets a reference to the given string and assigns it to the ZonegroupName field.
func (o *ApiRgwZonePostRequest) SetZonegroupName(v string) {
	o.ZonegroupName = &v
}

func (o ApiRgwZonePostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiRgwZonePostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessKey) {
		toSerialize["access_key"] = o.AccessKey
	}
	if !IsNil(o.Default) {
		toSerialize["default"] = o.Default
	}
	if !IsNil(o.Master) {
		toSerialize["master"] = o.Master
	}
	if !IsNil(o.SecretKey) {
		toSerialize["secret_key"] = o.SecretKey
	}
	if !IsNil(o.ZoneEndpoints) {
		toSerialize["zone_endpoints"] = o.ZoneEndpoints
	}
	toSerialize["zone_name"] = o.ZoneName
	if !IsNil(o.ZonegroupName) {
		toSerialize["zonegroup_name"] = o.ZonegroupName
	}
	return toSerialize, nil
}

func (o *ApiRgwZonePostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"zone_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiRgwZonePostRequest := _ApiRgwZonePostRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiRgwZonePostRequest)

	if err != nil {
		return err
	}

	*o = ApiRgwZonePostRequest(varApiRgwZonePostRequest)

	return err
}

type NullableApiRgwZonePostRequest struct {
	value *ApiRgwZonePostRequest
	isSet bool
}

func (v NullableApiRgwZonePostRequest) Get() *ApiRgwZonePostRequest {
	return v.value
}

func (v *NullableApiRgwZonePostRequest) Set(val *ApiRgwZonePostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableApiRgwZonePostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableApiRgwZonePostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiRgwZonePostRequest(val *ApiRgwZonePostRequest) *NullableApiRgwZonePostRequest {
	return &NullableApiRgwZonePostRequest{value: val, isSet: true}
}

func (v NullableApiRgwZonePostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiRgwZonePostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


